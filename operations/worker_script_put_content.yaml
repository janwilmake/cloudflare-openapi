openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /accounts/{account_id}/workers/scripts/{script_name}/content:
    put:
      description: Put script content without touching config or metadata.
      operationId: worker-script-put-content
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            description: Identifier.
            example: 023e105f4ecef8ad9ca31a8372d0c353
            maxLength: 32
            type: string
            x-auditable: true
        - in: path
          name: script_name
          required: true
          schema:
            description: Name of the script, used in URLs and route configuration.
            example: this-is_my_script-01
            pattern: ^[a-z0-9_][a-z0-9-_]*$
            type: string
            x-auditable: true
        - description: >-
            The multipart name of a script upload part containing script content
            in service worker format. Alternative to including in a metadata
            part.
          in: header
          name: CF-WORKER-BODY-PART
          schema:
            type: string
        - description: >-
            The multipart name of a script upload part containing script content
            in es module format. Alternative to including in a metadata part.
          in: header
          name: CF-WORKER-MAIN-MODULE-PART
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            encoding:
              files:
                contentType: >-
                  application/javascript+module, text/javascript+module,
                  application/javascript, text/javascript, text/x-python,
                  text/x-python-requirement, application/wasm, text/plain,
                  application/octet-stream, application/source-map
            schema:
              properties:
                files:
                  description: >-
                    An array of modules (often JavaScript files) comprising a
                    Worker script. At least one module must be present and
                    referenced in the metadata as `main_module` or `body_part`
                    by filename.<br/>Possible Content-Type(s) are:
                    `application/javascript+module`, `text/javascript+module`,
                    `application/javascript`, `text/javascript`,
                    `text/x-python`, `text/x-python-requirement`,
                    `application/wasm`, `text/plain`,
                    `application/octet-stream`, `application/source-map`.
                  items:
                    format: binary
                    type: string
                  type: array
                  x-stainless-collection-type: set
                metadata:
                  description: >-
                    JSON encoded metadata about the uploaded parts and Worker
                    configuration.
                  properties:
                    body_part:
                      description: >-
                        Name of the uploaded file that contains the Worker
                        script (e.g. the file adding a listener to the `fetch`
                        event). Indicates a `service worker syntax` Worker.
                      example: worker.js
                      type: string
                    main_module:
                      description: >-
                        Name of the uploaded file that contains the main module
                        (e.g. the file exporting a `fetch` handler). Indicates a
                        `module syntax` Worker.
                      example: worker.js
                      type: string
                  type: object
              required:
                - metadata
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - allOf:
                      - properties:
                          errors:
                            example: []
                            items:
                              properties:
                                code:
                                  minimum: 1000
                                  type: integer
                                documentation_url:
                                  type: string
                                message:
                                  type: string
                                source:
                                  properties:
                                    pointer:
                                      type: string
                                  type: object
                              required:
                                - code
                                - message
                              type: object
                              uniqueItems: true
                            type: array
                          messages:
                            example: []
                            items:
                              properties:
                                code:
                                  minimum: 1000
                                  type: integer
                                documentation_url:
                                  type: string
                                message:
                                  type: string
                                source:
                                  properties:
                                    pointer:
                                      type: string
                                  type: object
                              required:
                                - code
                                - message
                              type: object
                              uniqueItems: true
                            type: array
                          success:
                            description: Whether the API call was successful.
                            enum:
                              - true
                            example: true
                            type: boolean
                        required:
                          - success
                          - errors
                          - messages
                        type: object
                    type: object
                  - properties:
                      result:
                        properties:
                          created_on:
                            description: When the script was created.
                            example: '2017-01-01T00:00:00Z'
                            format: date-time
                            readOnly: true
                            type: string
                            x-auditable: true
                          etag:
                            description: >-
                              Hashed script content, can be used in a
                              If-None-Match header when updating.
                            example: ea95132c15732412d22c1476fa83f27a
                            readOnly: true
                            type: string
                          has_assets:
                            description: Whether a Worker contains assets.
                            example: false
                            type: boolean
                            x-auditable: true
                          has_modules:
                            description: Whether a Worker contains modules.
                            example: false
                            type: boolean
                            x-auditable: true
                          id:
                            description: >-
                              The id of the script in the Workers system.
                              Usually the script name.
                            example: my-workers-script
                            readOnly: true
                            type: string
                            x-auditable: true
                          logpush:
                            default: false
                            description: Whether Logpush is turned on for the Worker.
                            example: false
                            type: boolean
                            x-auditable: true
                          modified_on:
                            description: When the script was last modified.
                            example: '2017-01-01T00:00:00Z'
                            format: date-time
                            readOnly: true
                            type: string
                            x-auditable: true
                          placement:
                            description: >-
                              Configuration for [Smart
                              Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                            properties:
                              last_analyzed_at:
                                description: >-
                                  The last time the script was analyzed for
                                  [Smart
                                  Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                                example: '2025-01-01T00:00:00Z'
                                format: date-time
                                readOnly: true
                                type: string
                              mode:
                                description: >-
                                  Enables [Smart
                                  Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                                enum:
                                  - smart
                                type: string
                                x-auditable: true
                              status:
                                description: >-
                                  Status of [Smart
                                  Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                                enum:
                                  - SUCCESS
                                  - UNSUPPORTED_APPLICATION
                                  - INSUFFICIENT_INVOCATIONS
                                readOnly: true
                                type: string
                                x-auditable: true
                            type: object
                          placement_mode:
                            allOf:
                              - description: >-
                                  Enables [Smart
                                  Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                                enum:
                                  - smart
                                type: string
                                x-auditable: true
                              - deprecated: true
                                type: string
                          placement_status:
                            allOf:
                              - description: >-
                                  Status of [Smart
                                  Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
                                enum:
                                  - SUCCESS
                                  - UNSUPPORTED_APPLICATION
                                  - INSUFFICIENT_INVOCATIONS
                                readOnly: true
                                type: string
                                x-auditable: true
                              - deprecated: true
                                type: string
                          tail_consumers:
                            description: >-
                              List of Workers that will consume logs from the
                              attached Worker.
                            items:
                              description: >-
                                A reference to a script that will consume logs
                                from the attached Worker.
                              properties:
                                environment:
                                  description: >-
                                    Optional environment if the Worker utilizes
                                    one.
                                  example: production
                                  type: string
                                  x-auditable: true
                                namespace:
                                  description: >-
                                    Optional dispatch namespace the script
                                    belongs to.
                                  example: my-namespace
                                  type: string
                                  x-auditable: true
                                service:
                                  description: Name of Worker that is to be the consumer.
                                  example: my-log-consumer
                                  type: string
                                  x-auditable: true
                              required:
                                - service
                              type: object
                            type: array
                            x-stainless-collection-type: set
                          usage_model:
                            default: standard
                            description: Usage model for the Worker invocations.
                            enum:
                              - standard
                            example: standard
                            type: string
                            x-auditable: true
                    required:
                      - result
                    type: object
                    x-cfLinkErrors:
                      '10001': Unsupported or unexpected Content Type
                      '10002': Unexpected internal server error
                      '10003': Missing required URL parameter
                      '10004': Malformed URL parameter
                      '10006': Unparseable script body
                      '10007': Resource not found (similar to HTTP 404)
                      '10014': Internal error while attempting authorization checks
                      '10015': The current account is not authorized to use workers
                      '10018': >-
                        Attempted to update a script where the e-tag does not
                        match
                      '10021': >-
                        Script content failed validation checks, but was
                        otherwise parseable
                      '10023': Unauthorized access attempt
                      '10027': Script body was too large
                      '10075': Requires a Workers Paid plan
          description: Put script content.
        4XX:
          content:
            application/json:
              schema:
                properties:
                  errors:
                    allOf:
                      - example: []
                        items:
                          properties:
                            code:
                              minimum: 1000
                              type: integer
                            documentation_url:
                              type: string
                            message:
                              type: string
                            source:
                              properties:
                                pointer:
                                  type: string
                              type: object
                          required:
                            - code
                            - message
                          type: object
                          uniqueItems: true
                        type: array
                    example:
                      - code: 7003
                        message: No route for the URI
                    minLength: 1
                  messages:
                    allOf:
                      - example: []
                        items:
                          properties:
                            code:
                              minimum: 1000
                              type: integer
                            documentation_url:
                              type: string
                            message:
                              type: string
                            source:
                              properties:
                                pointer:
                                  type: string
                              type: object
                          required:
                            - code
                            - message
                          type: object
                          uniqueItems: true
                        type: array
                    example: []
                  result:
                    enum:
                      - null
                    nullable: true
                    type: object
                  success:
                    description: Whether the API call was successful.
                    enum:
                      - false
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                  - messages
                  - result
                type: object
          description: Put script content failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Put script content
      tags:
        - Worker Script
      x-api-token-group:
        - Workers Scripts Write

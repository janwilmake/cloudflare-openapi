# Cloudflare API

> Welcome to Cloudflare's API documentation site.

**Version:** 4.0.0

**Base URL:** https://api.cloudflare.com/client/v4

**License:** BSD-3-Clause (https://opensource.org/licenses/BSD-3-Clause)

We are experimenting with an updated version of our API documentation - check out [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/) to test out the new experience.

To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.

Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions. You can also authenticate with [API keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/), but these keys have [several limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations) that make them less secure than API tokens. Whenever possible, use API tokens to interact with the Cloudflare API.

To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to
our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).

For information regarding rate limits, refer to our [API Rate Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).

Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).

[Full OpenAPI Spec](openapi.json)

## AI Gateway Datasets

- [AI Gateway Datasets operations](tags/ai_gateway_datasets.yaml) All 'AI Gateway Datasets' operations in one file
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/datasets](operations/aig_config_list_dataset.yaml): List Datasets
- [POST /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/datasets](operations/aig_config_create_dataset.yaml): Create a new Dataset
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/datasets/{id}](operations/aig_config_fetch_dataset.yaml): Fetch a Dataset
- [PUT /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/datasets/{id}](operations/aig_config_update_dataset.yaml): Update a Dataset
- [DELETE /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/datasets/{id}](operations/aig_config_delete_dataset.yaml): Delete a Dataset

## AI Gateway Evaluations

- [AI Gateway Evaluations operations](tags/ai_gateway_evaluations.yaml) All 'AI Gateway Evaluations' operations in one file
- [GET /accounts/{account_id}/ai-gateway/evaluation-types](operations/aig_config_list_evaluators.yaml): List Evaluators
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/evaluations](operations/aig_config_list_evaluations.yaml): List Evaluations
- [POST /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/evaluations](operations/aig_config_create_evaluations.yaml): Create a new Evaluation
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/evaluations/{id}](operations/aig_config_fetch_evaluations.yaml): Fetch a Evaluation
- [DELETE /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/evaluations/{id}](operations/aig_config_delete_evaluations.yaml): Delete a Evaluation

## AI Gateway Gateways

- [AI Gateway Gateways operations](tags/ai_gateway_gateways.yaml) All 'AI Gateway Gateways' operations in one file
- [GET /accounts/{account_id}/ai-gateway/gateways](operations/aig_config_list_gateway.yaml): List Gateways
- [POST /accounts/{account_id}/ai-gateway/gateways](operations/aig_config_create_gateway.yaml): Create a new Gateway
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/url/{provider}](operations/aig_config_get_gateway_url.yaml): Get Gateway URL
- [GET /accounts/{account_id}/ai-gateway/gateways/{id}](operations/aig_config_fetch_gateway.yaml): Fetch a Gateway
- [PUT /accounts/{account_id}/ai-gateway/gateways/{id}](operations/aig_config_update_gateway.yaml): Update a Gateway
- [DELETE /accounts/{account_id}/ai-gateway/gateways/{id}](operations/aig_config_delete_gateway.yaml): Delete a Gateway

## AI Gateway Logs

- [AI Gateway Logs operations](tags/ai_gateway_logs.yaml) All 'AI Gateway Logs' operations in one file
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs](operations/aig_config_list_gateway_logs.yaml): List Gateway Logs
- [DELETE /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs](operations/aig_config_delete_gateway_logs.yaml): Delete Gateway Logs
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs/{id}](operations/aig_config_get_gateway_log_detail.yaml): Get Gateway Log Detail
- [PATCH /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs/{id}](operations/aig_config_patch_gateway_log.yaml): Patch Gateway Log
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs/{id}/request](operations/aig_config_get_gateway_log_request.yaml): Get Gateway Log Request
- [GET /accounts/{account_id}/ai-gateway/gateways/{gateway_id}/logs/{id}/response](operations/aig_config_get_gateway_log_response.yaml): Get Gateway Log Response

## API Shield API Discovery

- [API Shield API Discovery operations](tags/api_shield_api_discovery.yaml) All 'API Shield API Discovery' operations in one file
- [GET /zones/{zone_id}/api_gateway/discovery](operations/api_shield_api_discovery_retrieve_discovered_operations_on_a_zone_as_openapi.yaml): Retrieve discovered operations on a zone rendered as OpenAPI schemas
- [GET /zones/{zone_id}/api_gateway/discovery/operations](operations/api_shield_api_discovery_retrieve_discovered_operations_on_a_zone.yaml): Retrieve discovered operations on a zone
- [PATCH /zones/{zone_id}/api_gateway/discovery/operations](operations/api_shield_api_patch_discovered_operations.yaml): Patch discovered operations
- [PATCH /zones/{zone_id}/api_gateway/discovery/operations/{operation_id}](operations/api_shield_api_patch_discovered_operation.yaml): Patch discovered operation

## API Shield Client Certificates for a Zone

- [API Shield Client Certificates for a Zone operations](tags/api_shield_client_certificates_for_a_zone.yaml) All 'API Shield Client Certificates for a Zone' operations in one file
- [GET /zones/{zone_id}/certificate_authorities/hostname_associations](operations/client_certificate_for_a_zone_list_hostname_associations.yaml): List Hostname Associations
- [PUT /zones/{zone_id}/certificate_authorities/hostname_associations](operations/client_certificate_for_a_zone_put_hostname_associations.yaml): Replace Hostname Associations
- [GET /zones/{zone_id}/client_certificates](operations/client_certificate_for_a_zone_list_client_certificates.yaml): List Client Certificates
- [POST /zones/{zone_id}/client_certificates](operations/client_certificate_for_a_zone_create_client_certificate.yaml): Create Client Certificate
- [GET /zones/{zone_id}/client_certificates/{client_certificate_id}](operations/client_certificate_for_a_zone_client_certificate_details.yaml): Client Certificate Details
- [PATCH /zones/{zone_id}/client_certificates/{client_certificate_id}](operations/client_certificate_for_a_zone_edit_client_certificate.yaml): Reactivate Client Certificate
- [DELETE /zones/{zone_id}/client_certificates/{client_certificate_id}](operations/client_certificate_for_a_zone_delete_client_certificate.yaml): Revoke Client Certificate

## API Shield Endpoint Management

- [API Shield Endpoint Management operations](tags/api_shield_endpoint_management.yaml) All 'API Shield Endpoint Management' operations in one file
- [GET /zones/{zone_id}/api_gateway/operations](operations/api_shield_endpoint_management_retrieve_information_about_all_operations_on_a_zone.yaml): Retrieve information about all operations on a zone
- [POST /zones/{zone_id}/api_gateway/operations](operations/api_shield_endpoint_management_add_operations_to_a_zone.yaml): Add operations to a zone
- [DELETE /zones/{zone_id}/api_gateway/operations](operations/api_shield_endpoint_management_delete_multiple_operations.yaml): Delete multiple operations
- [POST /zones/{zone_id}/api_gateway/operations/item](operations/api_shield_endpoint_management_add_operation_to_a_zone.yaml): Add one operation to a zone
- [GET /zones/{zone_id}/api_gateway/operations/{operation_id}](operations/api_shield_endpoint_management_retrieve_information_about_an_operation.yaml): Retrieve information about an operation
- [DELETE /zones/{zone_id}/api_gateway/operations/{operation_id}](operations/api_shield_endpoint_management_delete_an_operation.yaml): Delete an operation
- [GET /zones/{zone_id}/api_gateway/schemas](operations/api_shield_endpoint_management_retrieve_operations_and_features_as_open_api_schemas.yaml): Retrieve operations and features as OpenAPI schemas

## API Shield Schema Validation 2.0

- [API Shield Schema Validation 2.0 operations](tags/api_shield_schema_validation_2_0.yaml) All 'API Shield Schema Validation 2.0' operations in one file
- [PATCH /zones/{zone_id}/api_gateway/operations/schema_validation](operations/api_shield_schema_validation_update_multiple_operation_level_settings.yaml): Update multiple operation-level schema validation settings
- [GET /zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation](operations/api_shield_schema_validation_retrieve_operation_level_settings.yaml): Retrieve operation-level schema validation settings
- [PUT /zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation](operations/api_shield_schema_validation_update_operation_level_settings.yaml): Update operation-level schema validation settings
- [GET /zones/{zone_id}/api_gateway/settings/schema_validation](operations/api_shield_schema_validation_retrieve_zone_level_settings.yaml): Retrieve zone level schema validation settings
- [PUT /zones/{zone_id}/api_gateway/settings/schema_validation](operations/api_shield_schema_validation_update_zone_level_settings.yaml): Update zone level schema validation settings
- [PATCH /zones/{zone_id}/api_gateway/settings/schema_validation](operations/api_shield_schema_validation_patch_zone_level_settings.yaml): Update zone level schema validation settings
- [GET /zones/{zone_id}/api_gateway/user_schemas](operations/api_shield_schema_validation_retrieve_information_about_all_schemas.yaml): Retrieve information about all schemas on a zone
- [POST /zones/{zone_id}/api_gateway/user_schemas](operations/api_shield_schema_validation_post_schema.yaml): Upload a schema to a zone
- [GET /zones/{zone_id}/api_gateway/user_schemas/hosts](operations/api_shield_schema_validation_retrieve_user_schema_hosts.yaml): Retrieve schema hosts in a zone
- [GET /zones/{zone_id}/api_gateway/user_schemas/{schema_id}](operations/api_shield_schema_validation_retrieve_information_about_specific_schema.yaml): Retrieve information about a specific schema on a zone
- [PATCH /zones/{zone_id}/api_gateway/user_schemas/{schema_id}](operations/api_shield_schema_validation_enable_validation_for_a_schema.yaml): Enable validation for a schema
- [DELETE /zones/{zone_id}/api_gateway/user_schemas/{schema_id}](operations/api_shield_schema_delete_a_schema.yaml): Delete a schema
- [GET /zones/{zone_id}/api_gateway/user_schemas/{schema_id}/operations](operations/api_shield_schema_validation_extract_operations_from_schema.yaml): Retrieve all operations from a schema.

## API Shield Settings

- [API Shield Settings operations](tags/api_shield_settings.yaml) All 'API Shield Settings' operations in one file
- [GET /zones/{zone_id}/api_gateway/configuration](operations/api_shield_settings_retrieve_information_about_specific_configuration_properties.yaml): Retrieve information about specific configuration properties
- [PUT /zones/{zone_id}/api_gateway/configuration](operations/api_shield_settings_set_configuration_properties.yaml): Set configuration properties

## API Shield WAF Expression Templates

- [API Shield WAF Expression Templates operations](tags/api_shield_waf_expression_templates.yaml) All 'API Shield WAF Expression Templates' operations in one file
- [POST /zones/{zone_id}/api_gateway/expression-template/fallthrough](operations/api_shield_expression_templates_fallthrough.yaml): Generate fallthrough WAF expression template from a set of API hosts

## ASN Intelligence

- [ASN Intelligence operations](tags/asn_intelligence.yaml) All 'ASN Intelligence' operations in one file
- [GET /accounts/{account_id}/intel/asn/{asn}](operations/asn_intelligence_get_asn_overview.yaml): Get ASN Overview.
- [GET /accounts/{account_id}/intel/asn/{asn}/subnets](operations/asn_intelligence_get_asn_subnets.yaml): Get ASN Subnets

## Access Bookmark applications (Deprecated)

- [Access Bookmark applications (Deprecated) operations](tags/access_bookmark_applications_deprecated.yaml) All 'Access Bookmark applications (Deprecated)' operations in one file
- [GET /accounts/{account_id}/access/bookmarks](operations/access_bookmark_applications_deprecated_list_bookmark_applications.yaml): List Bookmark applications
- [GET /accounts/{account_id}/access/bookmarks/{bookmark_id}](operations/access_bookmark_applications_deprecated_get_a_bookmark_application.yaml): Get a Bookmark application
- [POST /accounts/{account_id}/access/bookmarks/{bookmark_id}](operations/access_bookmark_applications_deprecated_create_a_bookmark_application.yaml): Create a Bookmark application
- [PUT /accounts/{account_id}/access/bookmarks/{bookmark_id}](operations/access_bookmark_applications_deprecated_update_a_bookmark_application.yaml): Update a Bookmark application
- [DELETE /accounts/{account_id}/access/bookmarks/{bookmark_id}](operations/access_bookmark_applications_deprecated_delete_a_bookmark_application.yaml): Delete a Bookmark application

## Access SCIM update logs

- [Access SCIM update logs operations](tags/access_scim_update_logs.yaml) All 'Access SCIM update logs' operations in one file
- [GET /accounts/{account_id}/access/logs/scim/updates](operations/access_scim_update_logs_list_access_scim_update_logs.yaml): List Access SCIM update logs

## Access application-scoped policies

- [Access application-scoped policies operations](tags/access_application_scoped_policies.yaml) All 'Access application-scoped policies' operations in one file
- [GET /accounts/{account_id}/access/apps/{app_id}/policies](operations/access_policies_list_access_app_policies.yaml): List Access application policies
- [POST /accounts/{account_id}/access/apps/{app_id}/policies](operations/access_policies_create_an_access_policy.yaml): Create an Access application policy
- [GET /accounts/{account_id}/access/apps/{app_id}/policies/{policy_id}](operations/access_policies_get_an_access_policy.yaml): Get an Access application policy
- [PUT /accounts/{account_id}/access/apps/{app_id}/policies/{policy_id}](operations/access_policies_update_an_access_policy.yaml): Update an Access application policy
- [DELETE /accounts/{account_id}/access/apps/{app_id}/policies/{policy_id}](operations/access_policies_delete_an_access_policy.yaml): Delete an Access application policy
- [PUT /accounts/{account_id}/access/apps/{app_id}/policies/{policy_id}/make_reusable](operations/access_policies_convert_reusable.yaml): Convert an Access application policy to a reusable policy

## Access applications

- [Access applications operations](tags/access_applications.yaml) All 'Access applications' operations in one file
- [GET /accounts/{account_id}/access/apps](operations/access_applications_list_access_applications.yaml): List Access applications
- [POST /accounts/{account_id}/access/apps](operations/access_applications_add_an_application.yaml): Add an Access application
- [GET /accounts/{account_id}/access/apps/{app_id}](operations/access_applications_get_an_access_application.yaml): Get an Access application
- [PUT /accounts/{account_id}/access/apps/{app_id}](operations/access_applications_update_an_access_application.yaml): Update an Access application
- [DELETE /accounts/{account_id}/access/apps/{app_id}](operations/access_applications_delete_an_access_application.yaml): Delete an Access application
- [POST /accounts/{account_id}/access/apps/{app_id}/revoke_tokens](operations/access_applications_revoke_service_tokens.yaml): Revoke application tokens
- [PUT /accounts/{account_id}/access/apps/{app_id}/settings](operations/access_applications_put_update_access_application_settings.yaml): Update Access application settings
- [PATCH /accounts/{account_id}/access/apps/{app_id}/settings](operations/access_applications_patch_update_access_application_settings.yaml): Update Access application settings
- [GET /accounts/{account_id}/access/apps/{app_id}/user_policy_checks](operations/access_applications_test_access_policies.yaml): Test Access policies

## Access authentication logs

- [Access authentication logs operations](tags/access_authentication_logs.yaml) All 'Access authentication logs' operations in one file
- [GET /accounts/{account_id}/access/logs/access_requests](operations/access_authentication_logs_get_access_authentication_logs.yaml): Get Access authentication logs

## Access custom pages

- [Access custom pages operations](tags/access_custom_pages.yaml) All 'Access custom pages' operations in one file
- [GET /accounts/{account_id}/access/custom_pages](operations/access_custom_pages_list_custom_pages.yaml): List custom pages
- [POST /accounts/{account_id}/access/custom_pages](operations/access_custom_pages_create_a_custom_page.yaml): Create a custom page
- [GET /accounts/{account_id}/access/custom_pages/{custom_page_id}](operations/access_custom_pages_get_a_custom_page.yaml): Get a custom page
- [PUT /accounts/{account_id}/access/custom_pages/{custom_page_id}](operations/access_custom_pages_update_a_custom_page.yaml): Update a custom page
- [DELETE /accounts/{account_id}/access/custom_pages/{custom_page_id}](operations/access_custom_pages_delete_a_custom_page.yaml): Delete a custom page

## Access groups

- [Access groups operations](tags/access_groups.yaml) All 'Access groups' operations in one file
- [GET /accounts/{account_id}/access/groups](operations/access_groups_list_access_groups.yaml): List Access groups
- [POST /accounts/{account_id}/access/groups](operations/access_groups_create_an_access_group.yaml): Create an Access group
- [GET /accounts/{account_id}/access/groups/{group_id}](operations/access_groups_get_an_access_group.yaml): Get an Access group
- [PUT /accounts/{account_id}/access/groups/{group_id}](operations/access_groups_update_an_access_group.yaml): Update an Access group
- [DELETE /accounts/{account_id}/access/groups/{group_id}](operations/access_groups_delete_an_access_group.yaml): Delete an Access group

## Access identity providers

- [Access identity providers operations](tags/access_identity_providers.yaml) All 'Access identity providers' operations in one file
- [GET /accounts/{account_id}/access/identity_providers](operations/access_identity_providers_list_access_identity_providers.yaml): List Access identity providers
- [POST /accounts/{account_id}/access/identity_providers](operations/access_identity_providers_add_an_access_identity_provider.yaml): Add an Access identity provider
- [GET /accounts/{account_id}/access/identity_providers/{identity_provider_id}](operations/access_identity_providers_get_an_access_identity_provider.yaml): Get an Access identity provider
- [PUT /accounts/{account_id}/access/identity_providers/{identity_provider_id}](operations/access_identity_providers_update_an_access_identity_provider.yaml): Update an Access identity provider
- [DELETE /accounts/{account_id}/access/identity_providers/{identity_provider_id}](operations/access_identity_providers_delete_an_access_identity_provider.yaml): Delete an Access identity provider
- [GET /accounts/{account_id}/access/identity_providers/{identity_provider_id}/scim/groups](operations/access_identity_providers_list_scim_group_resources.yaml): List SCIM Group resources
- [GET /accounts/{account_id}/access/identity_providers/{identity_provider_id}/scim/users](operations/access_identity_providers_list_scim_user_resources.yaml): List SCIM User resources

## Access key configuration

- [Access key configuration operations](tags/access_key_configuration.yaml) All 'Access key configuration' operations in one file
- [GET /accounts/{account_id}/access/keys](operations/access_key_configuration_get_the_access_key_configuration.yaml): Get the Access key configuration
- [PUT /accounts/{account_id}/access/keys](operations/access_key_configuration_update_the_access_key_configuration.yaml): Update the Access key configuration
- [POST /accounts/{account_id}/access/keys/rotate](operations/access_key_configuration_rotate_access_keys.yaml): Rotate Access keys

## Access mTLS authentication

- [Access mTLS authentication operations](tags/access_mtls_authentication.yaml) All 'Access mTLS authentication' operations in one file
- [GET /accounts/{account_id}/access/certificates](operations/access_mtls_authentication_list_mtls_certificates.yaml): List mTLS certificates
- [POST /accounts/{account_id}/access/certificates](operations/access_mtls_authentication_add_an_mtls_certificate.yaml): Add an mTLS certificate
- [GET /accounts/{account_id}/access/certificates/settings](operations/access_mtls_authentication_list_mtls_certificates_hostname_settings.yaml): List all mTLS hostname settings
- [PUT /accounts/{account_id}/access/certificates/settings](operations/access_mtls_authentication_update_an_mtls_certificate_settings.yaml): Update an mTLS certificate's hostname settings
- [GET /accounts/{account_id}/access/certificates/{certificate_id}](operations/access_mtls_authentication_get_an_mtls_certificate.yaml): Get an mTLS certificate
- [PUT /accounts/{account_id}/access/certificates/{certificate_id}](operations/access_mtls_authentication_update_an_mtls_certificate.yaml): Update an mTLS certificate
- [DELETE /accounts/{account_id}/access/certificates/{certificate_id}](operations/access_mtls_authentication_delete_an_mtls_certificate.yaml): Delete an mTLS certificate

## Access policy tester

- [Access policy tester operations](tags/access_policy_tester.yaml) All 'Access policy tester' operations in one file
- [POST /accounts/{account_id}/access/policy-tests](operations/access_policy_tests.yaml): Start Access policy test
- [GET /accounts/{account_id}/access/policy-tests/{policy_test_id}](operations/access_policy_tests_get_an_update.yaml): Get the current status of a given Access policy test
- [GET /accounts/{account_id}/access/policy-tests/{policy_test_id}/users](operations/access_policy_tests_get_a_user_page.yaml): Get an Access policy test users page

## Access reusable policies

- [Access reusable policies operations](tags/access_reusable_policies.yaml) All 'Access reusable policies' operations in one file
- [GET /accounts/{account_id}/access/policies](operations/access_policies_list_access_reusable_policies.yaml): List Access reusable policies
- [POST /accounts/{account_id}/access/policies](operations/access_policies_create_an_access_reusable_policy.yaml): Create an Access reusable policy
- [GET /accounts/{account_id}/access/policies/{policy_id}](operations/access_policies_get_an_access_reusable_policy.yaml): Get an Access reusable policy
- [PUT /accounts/{account_id}/access/policies/{policy_id}](operations/access_policies_update_an_access_reusable_policy.yaml): Update an Access reusable policy
- [DELETE /accounts/{account_id}/access/policies/{policy_id}](operations/access_policies_delete_an_access_reusable_policy.yaml): Delete an Access reusable policy

## Access service tokens

- [Access service tokens operations](tags/access_service_tokens.yaml) All 'Access service tokens' operations in one file
- [GET /accounts/{account_id}/access/service_tokens](operations/access_service_tokens_list_service_tokens.yaml): List service tokens
- [POST /accounts/{account_id}/access/service_tokens](operations/access_service_tokens_create_a_service_token.yaml): Create a service token
- [GET /accounts/{account_id}/access/service_tokens/{service_token_id}](operations/access_service_tokens_get_a_service_token.yaml): Get a service token
- [PUT /accounts/{account_id}/access/service_tokens/{service_token_id}](operations/access_service_tokens_update_a_service_token.yaml): Update a service token
- [DELETE /accounts/{account_id}/access/service_tokens/{service_token_id}](operations/access_service_tokens_delete_a_service_token.yaml): Delete a service token
- [POST /accounts/{account_id}/access/service_tokens/{service_token_id}/refresh](operations/access_service_tokens_refresh_a_service_token.yaml): Refresh a service token
- [POST /accounts/{account_id}/access/service_tokens/{service_token_id}/rotate](operations/access_service_tokens_rotate_a_service_token.yaml): Rotate a service token

## Access short-lived certificate CAs

- [Access short-lived certificate CAs operations](tags/access_short_lived_certificate_cas.yaml) All 'Access short-lived certificate CAs' operations in one file
- [GET /accounts/{account_id}/access/apps/ca](operations/access_short_lived_certificate_c_as_list_short_lived_certificate_c_as.yaml): List short-lived certificate CAs
- [GET /accounts/{account_id}/access/apps/{app_id}/ca](operations/access_short_lived_certificate_c_as_get_a_short_lived_certificate_ca.yaml): Get a short-lived certificate CA
- [POST /accounts/{account_id}/access/apps/{app_id}/ca](operations/access_short_lived_certificate_c_as_create_a_short_lived_certificate_ca.yaml): Create a short-lived certificate CA
- [DELETE /accounts/{account_id}/access/apps/{app_id}/ca](operations/access_short_lived_certificate_c_as_delete_a_short_lived_certificate_ca.yaml): Delete a short-lived certificate CA

## Access tags

- [Access tags operations](tags/access_tags.yaml) All 'Access tags' operations in one file
- [GET /accounts/{account_id}/access/tags](operations/access_tags_list_tags.yaml): List tags
- [POST /accounts/{account_id}/access/tags](operations/access_tags_create_tag.yaml): Create a tag
- [GET /accounts/{account_id}/access/tags/{tag_name}](operations/access_tags_get_a_tag.yaml): Get a tag
- [PUT /accounts/{account_id}/access/tags/{tag_name}](operations/access_tags_update_a_tag.yaml): Update a tag
- [DELETE /accounts/{account_id}/access/tags/{tag_name}](operations/access_tags_delete_a_tag.yaml): Delete a tag

## Account Billing Profile

- [Account Billing Profile operations](tags/account_billing_profile.yaml) All 'Account Billing Profile' operations in one file
- [GET /accounts/{account_id}/billing/profile](operations/account_billing_profile_deprecated_billing_profile_details.yaml): Billing Profile Details

## Account Load Balancer Monitors

- [Account Load Balancer Monitors operations](tags/account_load_balancer_monitors.yaml) All 'Account Load Balancer Monitors' operations in one file
- [GET /accounts/{account_id}/load_balancers/monitors](operations/account_load_balancer_monitors_list_monitors.yaml): List Monitors
- [POST /accounts/{account_id}/load_balancers/monitors](operations/account_load_balancer_monitors_create_monitor.yaml): Create Monitor
- [GET /accounts/{account_id}/load_balancers/monitors/{monitor_id}](operations/account_load_balancer_monitors_monitor_details.yaml): Monitor Details
- [PUT /accounts/{account_id}/load_balancers/monitors/{monitor_id}](operations/account_load_balancer_monitors_update_monitor.yaml): Update Monitor
- [PATCH /accounts/{account_id}/load_balancers/monitors/{monitor_id}](operations/account_load_balancer_monitors_patch_monitor.yaml): Patch Monitor
- [DELETE /accounts/{account_id}/load_balancers/monitors/{monitor_id}](operations/account_load_balancer_monitors_delete_monitor.yaml): Delete Monitor
- [POST /accounts/{account_id}/load_balancers/monitors/{monitor_id}/preview](operations/account_load_balancer_monitors_preview_monitor.yaml): Preview Monitor
- [GET /accounts/{account_id}/load_balancers/monitors/{monitor_id}/references](operations/account_load_balancer_monitors_list_monitor_references.yaml): List Monitor References
- [GET /accounts/{account_id}/load_balancers/preview/{preview_id}](operations/account_load_balancer_monitors_preview_result.yaml): Preview Result

## Account Load Balancer Pools

- [Account Load Balancer Pools operations](tags/account_load_balancer_pools.yaml) All 'Account Load Balancer Pools' operations in one file
- [GET /accounts/{account_id}/load_balancers/pools](operations/account_load_balancer_pools_list_pools.yaml): List Pools
- [POST /accounts/{account_id}/load_balancers/pools](operations/account_load_balancer_pools_create_pool.yaml): Create Pool
- [PATCH /accounts/{account_id}/load_balancers/pools](operations/account_load_balancer_pools_patch_pools.yaml): Patch Pools
- [GET /accounts/{account_id}/load_balancers/pools/{pool_id}](operations/account_load_balancer_pools_pool_details.yaml): Pool Details
- [PUT /accounts/{account_id}/load_balancers/pools/{pool_id}](operations/account_load_balancer_pools_update_pool.yaml): Update Pool
- [PATCH /accounts/{account_id}/load_balancers/pools/{pool_id}](operations/account_load_balancer_pools_patch_pool.yaml): Patch Pool
- [DELETE /accounts/{account_id}/load_balancers/pools/{pool_id}](operations/account_load_balancer_pools_delete_pool.yaml): Delete Pool
- [GET /accounts/{account_id}/load_balancers/pools/{pool_id}/health](operations/account_load_balancer_pools_pool_health_details.yaml): Pool Health Details
- [POST /accounts/{account_id}/load_balancers/pools/{pool_id}/preview](operations/account_load_balancer_pools_preview_pool.yaml): Preview Pool
- [GET /accounts/{account_id}/load_balancers/pools/{pool_id}/references](operations/account_load_balancer_pools_list_pool_references.yaml): List Pool References

## Account Load Balancer Search

- [Account Load Balancer Search operations](tags/account_load_balancer_search.yaml) All 'Account Load Balancer Search' operations in one file
- [GET /accounts/{account_id}/load_balancers/search](operations/account_load_balancer_search_search_resources.yaml): Search Resources

## Account Members

- [Account Members operations](tags/account_members.yaml) All 'Account Members' operations in one file
- [GET /accounts/{account_id}/members](operations/account_members_list_members.yaml): List Members
- [POST /accounts/{account_id}/members](operations/account_members_add_member.yaml): Add Member
- [GET /accounts/{account_id}/members/{member_id}](operations/account_members_member_details.yaml): Member Details
- [PUT /accounts/{account_id}/members/{member_id}](operations/account_members_update_member.yaml): Update Member
- [DELETE /accounts/{account_id}/members/{member_id}](operations/account_members_remove_member.yaml): Remove Member

## Account Owned API Tokens

- [Account Owned API Tokens operations](tags/account_owned_api_tokens.yaml) All 'Account Owned API Tokens' operations in one file
- [GET /accounts/{account_id}/tokens](operations/account_api_tokens_list_tokens.yaml): List Tokens
- [POST /accounts/{account_id}/tokens](operations/account_api_tokens_create_token.yaml): Create Token
- [GET /accounts/{account_id}/tokens/permission_groups](operations/account_api_tokens_list_permission_groups.yaml): List Permission Groups
- [GET /accounts/{account_id}/tokens/verify](operations/account_api_tokens_verify_token.yaml): Verify Token
- [GET /accounts/{account_id}/tokens/{token_id}](operations/account_api_tokens_token_details.yaml): Token Details
- [PUT /accounts/{account_id}/tokens/{token_id}](operations/account_api_tokens_update_token.yaml): Update Token
- [DELETE /accounts/{account_id}/tokens/{token_id}](operations/account_api_tokens_delete_token.yaml): Delete Token
- [PUT /accounts/{account_id}/tokens/{token_id}/value](operations/account_api_tokens_roll_token.yaml): Roll Token

## Account Permission Groups

- [Account Permission Groups operations](tags/account_permission_groups.yaml) All 'Account Permission Groups' operations in one file
- [GET /accounts/{account_id}/iam/permission_groups](operations/account_permission_group_list.yaml): List Account Permission Groups
- [GET /accounts/{account_id}/iam/permission_groups/{permission_group_id}](operations/account_permission_group_details.yaml): Permission Group Details

## Account Request Tracer

- [Account Request Tracer operations](tags/account_request_tracer.yaml) All 'Account Request Tracer' operations in one file
- [POST /accounts/{account_id}/request-tracer/trace](operations/account_request_tracer_request_trace.yaml): Request Trace

## Account Resource Groups

- [Account Resource Groups operations](tags/account_resource_groups.yaml) All 'Account Resource Groups' operations in one file
- [GET /accounts/{account_id}/iam/resource_groups](operations/account_resource_group_list.yaml): List Resource Groups
- [POST /accounts/{account_id}/iam/resource_groups](operations/account_resource_group_create.yaml): Create Resource Group
- [GET /accounts/{account_id}/iam/resource_groups/{resource_group_id}](operations/account_resource_group_details.yaml): Resource Group Details
- [PUT /accounts/{account_id}/iam/resource_groups/{resource_group_id}](operations/account_resource_group_update.yaml): Update Resource Group
- [DELETE /accounts/{account_id}/iam/resource_groups/{resource_group_id}](operations/account_resource_group_delete.yaml): Remove Resource Group

## Account Roles

- [Account Roles operations](tags/account_roles.yaml) All 'Account Roles' operations in one file
- [GET /accounts/{account_id}/roles](operations/account_roles_list_roles.yaml): List Roles
- [GET /accounts/{account_id}/roles/{role_id}](operations/account_roles_role_details.yaml): Role Details

## Account Rulesets

- [Account Rulesets operations](tags/account_rulesets.yaml) All 'Account Rulesets' operations in one file
- [GET /accounts/{account_id}/rulesets](operations/listaccountrulesets.yaml): List account rulesets
- [POST /accounts/{account_id}/rulesets](operations/createaccountruleset.yaml): Create an account ruleset
- [GET /accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint](operations/getaccountentrypointruleset.yaml): Get an account entry point ruleset
- [PUT /accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint](operations/updateaccountentrypointruleset.yaml): Update an account entry point ruleset
- [GET /accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions](operations/listaccountentrypointrulesetversions.yaml): List an account entry point ruleset's versions
- [GET /accounts/{account_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}](operations/getaccountentrypointrulesetversion.yaml): Get an account entry point ruleset version
- [GET /accounts/{account_id}/rulesets/{ruleset_id}](operations/getaccountruleset.yaml): Get an account ruleset
- [PUT /accounts/{account_id}/rulesets/{ruleset_id}](operations/updateaccountruleset.yaml): Update an account ruleset
- [DELETE /accounts/{account_id}/rulesets/{ruleset_id}](operations/deleteaccountruleset.yaml): Delete an account ruleset
- [POST /accounts/{account_id}/rulesets/{ruleset_id}/rules](operations/createaccountrulesetrule.yaml): Create an account ruleset rule
- [PATCH /accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}](operations/updateaccountrulesetrule.yaml): Update an account ruleset rule
- [DELETE /accounts/{account_id}/rulesets/{ruleset_id}/rules/{rule_id}](operations/deleteaccountrulesetrule.yaml): Delete an account ruleset rule
- [GET /accounts/{account_id}/rulesets/{ruleset_id}/versions](operations/listaccountrulesetversions.yaml): List an account ruleset's versions
- [GET /accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}](operations/getaccountrulesetversion.yaml): Get an account ruleset version
- [DELETE /accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}](operations/deleteaccountrulesetversion.yaml): Delete an account ruleset version
- [GET /accounts/{account_id}/rulesets/{ruleset_id}/versions/{ruleset_version}/by_tag/{rule_tag}](operations/listaccountrulesetversionrulesbytag.yaml): List an account ruleset version's rules by tag

## Account Subscriptions

- [Account Subscriptions operations](tags/account_subscriptions.yaml) All 'Account Subscriptions' operations in one file
- [GET /accounts/{account_id}/subscriptions](operations/account_subscriptions_list_subscriptions.yaml): List Subscriptions
- [POST /accounts/{account_id}/subscriptions](operations/account_subscriptions_create_subscription.yaml): Create Subscription
- [PUT /accounts/{account_id}/subscriptions/{subscription_identifier}](operations/account_subscriptions_update_subscription.yaml): Update Subscription
- [DELETE /accounts/{account_id}/subscriptions/{subscription_identifier}](operations/account_subscriptions_delete_subscription.yaml): Delete Subscription

## Account User Groups

- [Account User Groups operations](tags/account_user_groups.yaml) All 'Account User Groups' operations in one file
- [GET /accounts/{account_id}/iam/user_groups](operations/account_user_group_list.yaml): List User Groups
- [POST /accounts/{account_id}/iam/user_groups](operations/account_user_group_create.yaml): Create User Group
- [GET /accounts/{account_id}/iam/user_groups/{user_group_id}](operations/account_user_group_details.yaml): User Group Details
- [PUT /accounts/{account_id}/iam/user_groups/{user_group_id}](operations/account_user_group_update.yaml): Update User Group
- [DELETE /accounts/{account_id}/iam/user_groups/{user_group_id}](operations/account_user_group_delete.yaml): Remove User Group
- [GET /accounts/{account_id}/iam/user_groups/{user_group_id}/members](operations/account_user_group_member_list.yaml): List User Group Members
- [POST /accounts/{account_id}/iam/user_groups/{user_group_id}/members](operations/account_user_group_member_create.yaml): Add User Group Members
- [PUT /accounts/{account_id}/iam/user_groups/{user_group_id}/members](operations/account_user_group_members_update.yaml): Update User Group Members
- [DELETE /accounts/{account_id}/iam/user_groups/{user_group_id}/members/{member_id}](operations/account_user_group_member_delete.yaml): Remove User Group Member

## Account-Level Custom Nameservers

- [Account-Level Custom Nameservers operations](tags/account_level_custom_nameservers.yaml) All 'Account-Level Custom Nameservers' operations in one file
- [GET /accounts/{account_id}/custom_ns](operations/account_level_custom_nameservers_list_account_custom_nameservers.yaml): List Account Custom Nameservers
- [POST /accounts/{account_id}/custom_ns](operations/account_level_custom_nameservers_add_account_custom_nameserver.yaml): Add Account Custom Nameserver
- [DELETE /accounts/{account_id}/custom_ns/{custom_ns_id}](operations/account_level_custom_nameservers_delete_account_custom_nameserver.yaml): Delete Account Custom Nameserver

## Account-Level Custom Nameservers Usage for a Zone

- [Account-Level Custom Nameservers Usage for a Zone operations](tags/account_level_custom_nameservers_usage_for_a_zone.yaml) All 'Account-Level Custom Nameservers Usage for a Zone' operations in one file
- [GET /zones/{zone_id}/custom_ns](operations/account_level_custom_nameservers_usage_for_a_zone_get_account_custom_nameserver_related_zone_metadata.yaml): Get Account Custom Nameserver Related Zone Metadata
- [PUT /zones/{zone_id}/custom_ns](operations/account_level_custom_nameservers_usage_for_a_zone_set_account_custom_nameserver_related_zone_metadata.yaml): Set Account Custom Nameserver Related Zone Metadata

## Accounts

- [Accounts operations](tags/accounts.yaml) All 'Accounts' operations in one file
- [GET /accounts](operations/accounts_list_accounts.yaml): List Accounts
- [POST /accounts](operations/account_creation.yaml): Create an account
- [GET /accounts/{account_id}](operations/accounts_account_details.yaml): Account Details
- [PUT /accounts/{account_id}](operations/accounts_update_account.yaml): Update Account
- [DELETE /accounts/{account_id}](operations/account_deletion.yaml): Delete a specific account

## Analyze Certificate

- [Analyze Certificate operations](tags/analyze_certificate.yaml) All 'Analyze Certificate' operations in one file
- [POST /zones/{zone_id}/ssl/analyze](operations/analyze_certificate_analyze_certificate.yaml): Analyze Certificate

## Argo Analytics for Geolocation

- [Argo Analytics for Geolocation operations](tags/argo_analytics_for_geolocation.yaml) All 'Argo Analytics for Geolocation' operations in one file
- [GET /zones/{zone_id}/analytics/latency/colos](operations/argo_analytics_for_geolocation_argo_analytics_for_a_zone_at_different_po_ps.yaml): Argo Analytics for a zone at different PoPs

## Argo Analytics for Zone

- [Argo Analytics for Zone operations](tags/argo_analytics_for_zone.yaml) All 'Argo Analytics for Zone' operations in one file
- [GET /zones/{zone_id}/analytics/latency](operations/argo_analytics_for_zone_argo_analytics_for_a_zone.yaml): Argo Analytics for a zone

## Argo Smart Routing

- [Argo Smart Routing operations](tags/argo_smart_routing.yaml) All 'Argo Smart Routing' operations in one file
- [GET /zones/{zone_id}/argo/smart_routing](operations/argo_smart_routing_get_argo_smart_routing_setting.yaml): Get Argo Smart Routing setting
- [PATCH /zones/{zone_id}/argo/smart_routing](operations/argo_smart_routing_patch_argo_smart_routing_setting.yaml): Patch Argo Smart Routing setting

## Attacker

- [Attacker operations](tags/attacker.yaml) All 'Attacker' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/attackers](operations/get_attackerlist.yaml): Lists attackers

## Audit Logs

- [Audit Logs operations](tags/audit_logs.yaml) All 'Audit Logs' operations in one file
- [GET /accounts/{account_id}/audit_logs](operations/audit_logs_get_account_audit_logs.yaml): Get account audit logs
- [GET /accounts/{account_id}/logs/audit](operations/audit_logs_v2_get_account_audit_logs.yaml): Get account audit logs (Version 2, Beta release)
- [GET /user/audit_logs](operations/audit_logs_get_user_audit_logs.yaml): Get user audit logs

## AutoRAG

- [AutoRAG operations](tags/autorag.yaml) All 'AutoRAG' operations in one file
- [POST /accounts/{account_id}/autorag/rags/{id}/ai-search](operations/autorag_config_ai_search.yaml): AI Search
- [POST /accounts/{account_id}/autorag/rags/{id}/search](operations/autorag_config_search.yaml): Search
- [PATCH /accounts/{account_id}/autorag/rags/{id}/sync](operations/autorag_config_sync.yaml): Sync

## AutoRAG Jobs

- [AutoRAG Jobs operations](tags/autorag_jobs.yaml) All 'AutoRAG Jobs' operations in one file
- [GET /accounts/{account_id}/autorag/rags/{id}/jobs](operations/autorag_config_list_jobs.yaml): Jobs
- [GET /accounts/{account_id}/autorag/rags/{id}/jobs/{job_id}](operations/autorag_config_get_job.yaml): Jobs
- [GET /accounts/{account_id}/autorag/rags/{id}/jobs/{job_id}/logs](operations/autorag_config_list_job_logs.yaml): Jobs

## Automatic SSL/TLS

- [Automatic SSL/TLS operations](tags/automatic_ssl_tls.yaml) All 'Automatic SSL/TLS' operations in one file
- [GET /zones/{zone_id}/settings/ssl_automatic_mode](operations/ssl_detector_automatic_mode_get_enrollment.yaml): Get Automatic SSL/TLS enrollment status for the given zone
- [PATCH /zones/{zone_id}/settings/ssl_automatic_mode](operations/ssl_detector_automatic_mode_patch_enrollment.yaml): Patch Automatic SSL/TLS Enrollment status for given zone

## Available Page Rules settings

- [Available Page Rules settings operations](tags/available_page_rules_settings.yaml) All 'Available Page Rules settings' operations in one file
- [GET /zones/{zone_id}/pagerules/settings](operations/available_page_rules_settings_list_available_page_rules_settings.yaml): List available Page Rules settings

## BinDB

- [BinDB operations](tags/bindb.yaml) All 'BinDB' operations in one file
- [POST /accounts/{account_id}/cloudforce-one/binary](operations/post_bindbpost.yaml): Posts a file to Binary Storage
- [GET /accounts/{account_id}/cloudforce-one/binary/{hash}](operations/get_bindbgetbinary.yaml): Retrieves a file from Binary Storage

## Bot Settings

- [Bot Settings operations](tags/bot_settings.yaml) All 'Bot Settings' operations in one file
- [GET /zones/{zone_id}/bot_management](operations/bot_management_for_a_zone_get_config.yaml): Get Zone Bot Management Config
- [PUT /zones/{zone_id}/bot_management](operations/bot_management_for_a_zone_update_config.yaml): Update Zone Bot Management Config

## Botnet Threat Feed

- [Botnet Threat Feed operations](tags/botnet_threat_feed.yaml) All 'Botnet Threat Feed' operations in one file
- [GET /accounts/{account_id}/botnet_feed/asn/{asn_id}/day_report](operations/botnet_threat_feed_get_day_report.yaml): Get daily report
- [GET /accounts/{account_id}/botnet_feed/asn/{asn_id}/full_report](operations/botnet_threat_feed_get_full_report.yaml): Get full report
- [GET /accounts/{account_id}/botnet_feed/configs/asn](operations/botnet_threat_feed_list_asn.yaml): Get list of ASNs
- [DELETE /accounts/{account_id}/botnet_feed/configs/asn/{asn_id}](operations/botnet_threat_feed_delete_asn.yaml): Delete an ASN

## CNIs

- [CNIs operations](tags/cnis.yaml) All 'CNIs' operations in one file
- [GET /accounts/{account_id}/cni/cnis](operations/list_cnis.yaml): List existing CNI objects
- [POST /accounts/{account_id}/cni/cnis](operations/create_cni.yaml): Create a new CNI object
- [GET /accounts/{account_id}/cni/cnis/{cni}](operations/get_cni.yaml): Get information about a CNI object
- [PUT /accounts/{account_id}/cni/cnis/{cni}](operations/update_cni.yaml): Modify stored information about a CNI object
- [DELETE /accounts/{account_id}/cni/cnis/{cni}](operations/delete_cni.yaml): Delete a specified CNI object

## Calls Apps

- [Calls Apps operations](tags/calls_apps.yaml) All 'Calls Apps' operations in one file
- [GET /accounts/{account_id}/calls/apps](operations/calls_apps_list.yaml): List apps
- [POST /accounts/{account_id}/calls/apps](operations/calls_apps_create_a_new_app.yaml): Create a new app
- [GET /accounts/{account_id}/calls/apps/{app_id}](operations/calls_apps_retrieve_app_details.yaml): Retrieve app details
- [PUT /accounts/{account_id}/calls/apps/{app_id}](operations/calls_apps_update_app_details.yaml): Edit app details
- [DELETE /accounts/{account_id}/calls/apps/{app_id}](operations/calls_apps_delete_app.yaml): Delete app

## Calls TURN Keys

- [Calls TURN Keys operations](tags/calls_turn_keys.yaml) All 'Calls TURN Keys' operations in one file
- [GET /accounts/{account_id}/calls/turn_keys](operations/calls_turn_key_list.yaml): List TURN Keys
- [POST /accounts/{account_id}/calls/turn_keys](operations/calls_turn_key_create.yaml): Create a new TURN key
- [GET /accounts/{account_id}/calls/turn_keys/{key_id}](operations/calls_retrieve_turn_key_details.yaml): Retrieve TURN key details
- [PUT /accounts/{account_id}/calls/turn_keys/{key_id}](operations/calls_update_turn_key.yaml): Edit TURN key details
- [DELETE /accounts/{account_id}/calls/turn_keys/{key_id}](operations/calls_delete_turn_key.yaml): Delete TURN key

## Catalog Sync

- [Catalog Sync operations](tags/catalog_sync.yaml) All 'Catalog Sync' operations in one file
- [GET /accounts/{account_id}/magic/cloud/catalog-syncs](operations/catalog_syncs_list.yaml): List Catalog Syncs
- [POST /accounts/{account_id}/magic/cloud/catalog-syncs](operations/catalog_syncs_create.yaml): Create Catalog Sync
- [GET /accounts/{account_id}/magic/cloud/catalog-syncs/prebuilt-policies](operations/catalog_syncs_prebuilt_policies_list.yaml): List Prebuilt Policies
- [GET /accounts/{account_id}/magic/cloud/catalog-syncs/{sync_id}](operations/catalog_syncs_read.yaml): Read Catalog Sync
- [PUT /accounts/{account_id}/magic/cloud/catalog-syncs/{sync_id}](operations/catalog_syncs_update.yaml): Update Catalog Sync
- [PATCH /accounts/{account_id}/magic/cloud/catalog-syncs/{sync_id}](operations/catalog_syncs_patch.yaml): Patch Catalog Sync
- [DELETE /accounts/{account_id}/magic/cloud/catalog-syncs/{sync_id}](operations/catalog_syncs_delete.yaml): Delete Catalog Sync
- [POST /accounts/{account_id}/magic/cloud/catalog-syncs/{sync_id}/refresh](operations/catalog_syncs_refresh.yaml): Run Catalog Sync

## Category

- [Category operations](tags/category.yaml) All 'Category' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/categories](operations/get_categorylist.yaml): Lists categories
- [POST /accounts/{account_id}/cloudforce-one/events/categories/create](operations/post_categorycreate.yaml): Creates a new category
- [GET /accounts/{account_id}/cloudforce-one/events/categories/{category_id}](operations/get_categoryread.yaml): Reads a category
- [POST /accounts/{account_id}/cloudforce-one/events/categories/{category_id}](operations/post_categoryupdate.yaml): Updates a category
- [PATCH /accounts/{account_id}/cloudforce-one/events/categories/{category_id}](operations/patch_categoryupdate.yaml): Updates a category
- [DELETE /accounts/{account_id}/cloudforce-one/events/categories/{category_id}](operations/delete_categorydelete.yaml): Deletes a category

## Certificate Packs

- [Certificate Packs operations](tags/certificate_packs.yaml) All 'Certificate Packs' operations in one file
- [GET /zones/{zone_id}/ssl/certificate_packs](operations/certificate_packs_list_certificate_packs.yaml): List Certificate Packs
- [POST /zones/{zone_id}/ssl/certificate_packs/order](operations/certificate_packs_order_advanced_certificate_manager_certificate_pack.yaml): Order Advanced Certificate Manager Certificate Pack
- [GET /zones/{zone_id}/ssl/certificate_packs/quota](operations/certificate_packs_get_certificate_pack_quotas.yaml): Get Certificate Pack Quotas
- [GET /zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}](operations/certificate_packs_get_certificate_pack.yaml): Get Certificate Pack
- [PATCH /zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}](operations/certificate_packs_restart_validation_for_advanced_certificate_manager_certificate_pack.yaml): Restart Validation or Update Advanced Certificate Manager Certificate Pack
- [DELETE /zones/{zone_id}/ssl/certificate_packs/{certificate_pack_id}](operations/certificate_packs_delete_advanced_certificate_manager_certificate_pack.yaml): Delete Advanced Certificate Manager Certificate Pack

## Cloud Integrations

- [Cloud Integrations operations](tags/cloud_integrations.yaml) All 'Cloud Integrations' operations in one file
- [GET /accounts/{account_id}/magic/cloud/providers](operations/providers_list.yaml): List Cloud Integrations
- [POST /accounts/{account_id}/magic/cloud/providers](operations/providers_create.yaml): Create Cloud Integration
- [POST /accounts/{account_id}/magic/cloud/providers/discover](operations/providers_discover_all.yaml): Run Discovery for All Integrations
- [GET /accounts/{account_id}/magic/cloud/providers/{provider_id}](operations/providers_read.yaml): Read Cloud Integration
- [PUT /accounts/{account_id}/magic/cloud/providers/{provider_id}](operations/providers_update.yaml): Update Cloud Integration
- [PATCH /accounts/{account_id}/magic/cloud/providers/{provider_id}](operations/providers_patch.yaml): Patch Cloud Integration
- [DELETE /accounts/{account_id}/magic/cloud/providers/{provider_id}](operations/providers_delete.yaml): Delete Cloud Integration
- [POST /accounts/{account_id}/magic/cloud/providers/{provider_id}/discover](operations/providers_discover.yaml): Run Discovery
- [GET /accounts/{account_id}/magic/cloud/providers/{provider_id}/initial_setup](operations/providers_initial_setup.yaml): Get Cloud Integration Setup Config

## Cloudflare IPs

- [Cloudflare IPs operations](tags/cloudflare_ips.yaml) All 'Cloudflare IPs' operations in one file
- [GET /ips](operations/cloudflare_ips_cloudflare_ip_details.yaml): Cloudflare/JD Cloud IP Details

## Cloudflare Images

- [Cloudflare Images operations](tags/cloudflare_images.yaml) All 'Cloudflare Images' operations in one file
- [GET /accounts/{account_id}/images/v1](operations/cloudflare_images_list_images.yaml): List images
- [POST /accounts/{account_id}/images/v1](operations/cloudflare_images_upload_an_image_via_url.yaml): Upload an image
- [GET /accounts/{account_id}/images/v1/stats](operations/cloudflare_images_images_usage_statistics.yaml): Images usage statistics
- [GET /accounts/{account_id}/images/v1/{image_id}](operations/cloudflare_images_image_details.yaml): Image details
- [PATCH /accounts/{account_id}/images/v1/{image_id}](operations/cloudflare_images_update_image.yaml): Update image
- [DELETE /accounts/{account_id}/images/v1/{image_id}](operations/cloudflare_images_delete_image.yaml): Delete image
- [GET /accounts/{account_id}/images/v1/{image_id}/blob](operations/cloudflare_images_base_image.yaml): Base image
- [GET /accounts/{account_id}/images/v2](operations/cloudflare_images_list_images_v2.yaml): List images V2
- [POST /accounts/{account_id}/images/v2/direct_upload](operations/cloudflare_images_create_authenticated_direct_upload_url_v_2.yaml): Create authenticated direct upload URL V2

## Cloudflare Images Keys

- [Cloudflare Images Keys operations](tags/cloudflare_images_keys.yaml) All 'Cloudflare Images Keys' operations in one file
- [GET /accounts/{account_id}/images/v1/keys](operations/cloudflare_images_keys_list_signing_keys.yaml): List Signing Keys
- [PUT /accounts/{account_id}/images/v1/keys/{signing_key_name}](operations/cloudflare_images_keys_add_signing_key.yaml): Create a new Signing Key
- [DELETE /accounts/{account_id}/images/v1/keys/{signing_key_name}](operations/cloudflare_images_keys_delete_signing_key.yaml): Delete Signing Key

## Cloudflare Images Variants

- [Cloudflare Images Variants operations](tags/cloudflare_images_variants.yaml) All 'Cloudflare Images Variants' operations in one file
- [GET /accounts/{account_id}/images/v1/variants](operations/cloudflare_images_variants_list_variants.yaml): List variants
- [POST /accounts/{account_id}/images/v1/variants](operations/cloudflare_images_variants_create_a_variant.yaml): Create a variant
- [GET /accounts/{account_id}/images/v1/variants/{variant_id}](operations/cloudflare_images_variants_variant_details.yaml): Variant details
- [PATCH /accounts/{account_id}/images/v1/variants/{variant_id}](operations/cloudflare_images_variants_update_a_variant.yaml): Update a variant
- [DELETE /accounts/{account_id}/images/v1/variants/{variant_id}](operations/cloudflare_images_variants_delete_a_variant.yaml): Delete a variant

## Cloudflare Tunnel

- [Cloudflare Tunnel operations](tags/cloudflare_tunnel.yaml) All 'Cloudflare Tunnel' operations in one file
- [GET /accounts/{account_id}/cfd_tunnel](operations/cloudflare_tunnel_list_cloudflare_tunnels.yaml): List Cloudflare Tunnels
- [POST /accounts/{account_id}/cfd_tunnel](operations/cloudflare_tunnel_create_a_cloudflare_tunnel.yaml): Create a Cloudflare Tunnel
- [GET /accounts/{account_id}/cfd_tunnel/{tunnel_id}](operations/cloudflare_tunnel_get_a_cloudflare_tunnel.yaml): Get a Cloudflare Tunnel
- [PATCH /accounts/{account_id}/cfd_tunnel/{tunnel_id}](operations/cloudflare_tunnel_update_a_cloudflare_tunnel.yaml): Update a Cloudflare Tunnel
- [DELETE /accounts/{account_id}/cfd_tunnel/{tunnel_id}](operations/cloudflare_tunnel_delete_a_cloudflare_tunnel.yaml): Delete a Cloudflare Tunnel
- [GET /accounts/{account_id}/cfd_tunnel/{tunnel_id}/connections](operations/cloudflare_tunnel_list_cloudflare_tunnel_connections.yaml): List Cloudflare Tunnel connections
- [DELETE /accounts/{account_id}/cfd_tunnel/{tunnel_id}/connections](operations/cloudflare_tunnel_clean_up_cloudflare_tunnel_connections.yaml): Clean up Cloudflare Tunnel connections
- [GET /accounts/{account_id}/cfd_tunnel/{tunnel_id}/connectors/{connector_id}](operations/cloudflare_tunnel_get_cloudflare_tunnel_connector.yaml): Get Cloudflare Tunnel connector
- [POST /accounts/{account_id}/cfd_tunnel/{tunnel_id}/management](operations/cloudflare_tunnel_get_a_cloudflare_tunnel_management_token.yaml): Get a Cloudflare Tunnel management token
- [GET /accounts/{account_id}/cfd_tunnel/{tunnel_id}/token](operations/cloudflare_tunnel_get_a_cloudflare_tunnel_token.yaml): Get a Cloudflare Tunnel token
- [GET /accounts/{account_id}/tunnels](operations/cloudflare_tunnel_list_all_tunnels.yaml): List All Tunnels
- [GET /accounts/{account_id}/warp_connector](operations/cloudflare_tunnel_list_warp_connector_tunnels.yaml): List Warp Connector Tunnels
- [POST /accounts/{account_id}/warp_connector](operations/cloudflare_tunnel_create_a_warp_connector_tunnel.yaml): Create a Warp Connector Tunnel
- [GET /accounts/{account_id}/warp_connector/{tunnel_id}](operations/cloudflare_tunnel_get_a_warp_connector_tunnel.yaml): Get a Warp Connector Tunnel
- [PATCH /accounts/{account_id}/warp_connector/{tunnel_id}](operations/cloudflare_tunnel_update_a_warp_connector_tunnel.yaml): Update a Warp Connector Tunnel
- [DELETE /accounts/{account_id}/warp_connector/{tunnel_id}](operations/cloudflare_tunnel_delete_a_warp_connector_tunnel.yaml): Delete a Warp Connector Tunnel
- [GET /accounts/{account_id}/warp_connector/{tunnel_id}/token](operations/cloudflare_tunnel_get_a_warp_connector_tunnel_token.yaml): Get a Warp Connector Tunnel token

## Cloudflare Tunnel Configuration

- [Cloudflare Tunnel Configuration operations](tags/cloudflare_tunnel_configuration.yaml) All 'Cloudflare Tunnel Configuration' operations in one file
- [GET /accounts/{account_id}/cfd_tunnel/{tunnel_id}/configurations](operations/cloudflare_tunnel_configuration_get_configuration.yaml): Get configuration
- [PUT /accounts/{account_id}/cfd_tunnel/{tunnel_id}/configurations](operations/cloudflare_tunnel_configuration_put_configuration.yaml): Put configuration

## Content Scanning

- [Content Scanning operations](tags/content_scanning.yaml) All 'Content Scanning' operations in one file
- [POST /zones/{zone_id}/content-upload-scan/disable](operations/waf_content_scanning_disable.yaml): Disable Content Scanning
- [POST /zones/{zone_id}/content-upload-scan/enable](operations/waf_content_scanning_enable.yaml): Enable Content Scanning
- [GET /zones/{zone_id}/content-upload-scan/payloads](operations/waf_content_scanning_list_custom_scan_expressions.yaml): List Existing Custom Scan Expressions
- [POST /zones/{zone_id}/content-upload-scan/payloads](operations/waf_content_scanning_add_custom_scan_expressions.yaml): Add Custom Scan Expressions
- [DELETE /zones/{zone_id}/content-upload-scan/payloads/{expression_id}](operations/waf_content_scanning_delete_custom_scan_expressions.yaml): Delete a Custom Scan Expression
- [GET /zones/{zone_id}/content-upload-scan/settings](operations/waf_content_scanning_get_status.yaml): Get Content Scanning Status

## Country

- [Country operations](tags/country.yaml) All 'Country' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/countries](operations/get_countryread.yaml): Retrieves countries information for all countries

## Cron

- [Cron operations](tags/cron.yaml) All 'Cron' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/cron](operations/get_cronupdateread.yaml): Reads the last cron update time
- [POST /accounts/{account_id}/cloudforce-one/events/cron](operations/post_cronupdate.yaml): Reads the last cron update time
- [PATCH /accounts/{account_id}/cloudforce-one/events/cron](operations/patch_cronupdate.yaml): Reads the last cron update time

## Custom Hostname Fallback Origin for a Zone

- [Custom Hostname Fallback Origin for a Zone operations](tags/custom_hostname_fallback_origin_for_a_zone.yaml) All 'Custom Hostname Fallback Origin for a Zone' operations in one file
- [GET /zones/{zone_id}/custom_hostnames/fallback_origin](operations/custom_hostname_fallback_origin_for_a_zone_get_fallback_origin_for_custom_hostnames.yaml): Get Fallback Origin for Custom Hostnames
- [PUT /zones/{zone_id}/custom_hostnames/fallback_origin](operations/custom_hostname_fallback_origin_for_a_zone_update_fallback_origin_for_custom_hostnames.yaml): Update Fallback Origin for Custom Hostnames
- [DELETE /zones/{zone_id}/custom_hostnames/fallback_origin](operations/custom_hostname_fallback_origin_for_a_zone_delete_fallback_origin_for_custom_hostnames.yaml): Delete Fallback Origin for Custom Hostnames

## Custom Hostname for a Zone

- [Custom Hostname for a Zone operations](tags/custom_hostname_for_a_zone.yaml) All 'Custom Hostname for a Zone' operations in one file
- [GET /zones/{zone_id}/custom_hostnames](operations/custom_hostname_for_a_zone_list_custom_hostnames.yaml): List Custom Hostnames
- [POST /zones/{zone_id}/custom_hostnames](operations/custom_hostname_for_a_zone_create_custom_hostname.yaml): Create Custom Hostname
- [GET /zones/{zone_id}/custom_hostnames/{custom_hostname_id}](operations/custom_hostname_for_a_zone_custom_hostname_details.yaml): Custom Hostname Details
- [PATCH /zones/{zone_id}/custom_hostnames/{custom_hostname_id}](operations/custom_hostname_for_a_zone_edit_custom_hostname.yaml): Edit Custom Hostname
- [DELETE /zones/{zone_id}/custom_hostnames/{custom_hostname_id}](operations/custom_hostname_for_a_zone_delete_custom_hostname_and_any_issued_ssl_certificates.yaml): Delete Custom Hostname (and any issued SSL certificates)
- [PUT /zones/{zone_id}/custom_hostnames/{custom_hostname_id}/certificate_pack/{certificate_pack_id}/certificates/{certificate_id}](operations/custom_hostname_for_a_zone_edit_custom_certificate_custom_hostname.yaml): Replace Custom Certificate and Custom Key In Custom Hostname
- [DELETE /zones/{zone_id}/custom_hostnames/{custom_hostname_id}/certificate_pack/{certificate_pack_id}/certificates/{certificate_id}](operations/custom_hostname_for_a_zone_delete_single_certificate_and_key_in_a_custom_hostname.yaml): Delete Single Certificate And Key For Custom Hostname

## Custom Indicator Feeds

- [Custom Indicator Feeds operations](tags/custom_indicator_feeds.yaml) All 'Custom Indicator Feeds' operations in one file
- [GET /accounts/{account_id}/intel/indicator-feeds](operations/custom_indicator_feeds_get_indicator_feeds.yaml): Get indicator feeds owned by this account
- [POST /accounts/{account_id}/intel/indicator-feeds](operations/custom_indicator_feeds_create_indicator_feeds.yaml): Create new indicator feed
- [PUT /accounts/{account_id}/intel/indicator-feeds/permissions/add](operations/custom_indicator_feeds_add_permission.yaml): Grant permission to indicator feed
- [PUT /accounts/{account_id}/intel/indicator-feeds/permissions/remove](operations/custom_indicator_feeds_remove_permission.yaml): Revoke permission to indicator feed
- [GET /accounts/{account_id}/intel/indicator-feeds/permissions/view](operations/custom_indicator_feeds_view_permissions.yaml): List indicator feed permissions
- [GET /accounts/{account_id}/intel/indicator-feeds/{feed_id}](operations/custom_indicator_feeds_get_indicator_feed_metadata.yaml): Get indicator feed metadata
- [PUT /accounts/{account_id}/intel/indicator-feeds/{feed_id}](operations/custom_indicator_feeds_update_indicator_feed_metadata.yaml): Update indicator feed metadata
- [GET /accounts/{account_id}/intel/indicator-feeds/{feed_id}/data](operations/custom_indicator_feeds_get_indicator_feed_data.yaml): Get indicator feed data
- [PUT /accounts/{account_id}/intel/indicator-feeds/{feed_id}/snapshot](operations/custom_indicator_feeds_update_indicator_feed_data.yaml): Update indicator feed data
- [GET /accounts/{account_id}/intel/indicator_feeds/{feed_id}/download](operations/custom_indicator_feeds_download_indicator_feed_data.yaml): Download indicator feed data

## Custom SSL for a Zone

- [Custom SSL for a Zone operations](tags/custom_ssl_for_a_zone.yaml) All 'Custom SSL for a Zone' operations in one file
- [GET /zones/{zone_id}/custom_certificates](operations/custom_ssl_for_a_zone_list_ssl_configurations.yaml): List SSL Configurations
- [POST /zones/{zone_id}/custom_certificates](operations/custom_ssl_for_a_zone_create_ssl_configuration.yaml): Create SSL Configuration
- [PUT /zones/{zone_id}/custom_certificates/prioritize](operations/custom_ssl_for_a_zone_re_prioritize_ssl_certificates.yaml): Re-prioritize SSL Certificates
- [GET /zones/{zone_id}/custom_certificates/{custom_certificate_id}](operations/custom_ssl_for_a_zone_ssl_configuration_details.yaml): SSL Configuration Details
- [PATCH /zones/{zone_id}/custom_certificates/{custom_certificate_id}](operations/custom_ssl_for_a_zone_edit_ssl_configuration.yaml): Edit SSL Configuration
- [DELETE /zones/{zone_id}/custom_certificates/{custom_certificate_id}](operations/custom_ssl_for_a_zone_delete_ssl_configuration.yaml): Delete SSL Configuration

## Custom pages for a zone

- [Custom pages for a zone operations](tags/custom_pages_for_a_zone.yaml) All 'Custom pages for a zone' operations in one file
- [GET /zones/{zone_identifier}/custom_pages](operations/custom_pages_for_a_zone_list_custom_pages.yaml): List custom pages
- [GET /zones/{zone_identifier}/custom_pages/{identifier}](operations/custom_pages_for_a_zone_get_a_custom_page.yaml): Get a custom page
- [PUT /zones/{zone_identifier}/custom_pages/{identifier}](operations/custom_pages_for_a_zone_update_a_custom_page.yaml): Update a custom page

## Custom pages for an account

- [Custom pages for an account operations](tags/custom_pages_for_an_account.yaml) All 'Custom pages for an account' operations in one file
- [GET /accounts/{account_identifier}/custom_pages](operations/custom_pages_for_an_account_list_custom_pages.yaml): List custom pages
- [GET /accounts/{account_identifier}/custom_pages/{identifier}](operations/custom_pages_for_an_account_get_a_custom_page.yaml): Get a custom page
- [PUT /accounts/{account_identifier}/custom_pages/{identifier}](operations/custom_pages_for_an_account_update_a_custom_page.yaml): Update a custom page

## D1

- [D1 operations](tags/d1.yaml) All 'D1' operations in one file
- [GET /accounts/{account_id}/d1/database](operations/cloudflare_d1_list_databases.yaml): List D1 Databases
- [POST /accounts/{account_id}/d1/database](operations/cloudflare_d1_create_database.yaml): Create D1 Database
- [GET /accounts/{account_id}/d1/database/{database_id}](operations/cloudflare_d1_get_database.yaml): Get D1 Database
- [PUT /accounts/{account_id}/d1/database/{database_id}](operations/cloudflare_d1_update_database.yaml): Update D1 Database
- [PATCH /accounts/{account_id}/d1/database/{database_id}](operations/cloudflare_d1_update_partial_database.yaml): Update D1 Database partially
- [DELETE /accounts/{account_id}/d1/database/{database_id}](operations/cloudflare_d1_delete_database.yaml): Delete D1 Database
- [POST /accounts/{account_id}/d1/database/{database_id}/export](operations/cloudflare_d1_export_database.yaml): Export D1 Database as SQL
- [POST /accounts/{account_id}/d1/database/{database_id}/import](operations/cloudflare_d1_import_database.yaml): Import SQL into your D1 Database
- [POST /accounts/{account_id}/d1/database/{database_id}/query](operations/cloudflare_d1_query_database.yaml): Query D1 Database
- [POST /accounts/{account_id}/d1/database/{database_id}/raw](operations/cloudflare_d1_raw_database_query.yaml): Raw D1 Database query

## DCV Delegation

- [DCV Delegation operations](tags/dcv_delegation.yaml) All 'DCV Delegation' operations in one file
- [GET /zones/{zone_id}/dcv_delegation/uuid](operations/dcv_delegation_uuid_get.yaml): Retrieve the DCV Delegation unique identifier.

## DEX Remote Commands

- [DEX Remote Commands operations](tags/dex_remote_commands.yaml) All 'DEX Remote Commands' operations in one file
- [GET /accounts/{account_id}/dex/commands](operations/get_commands.yaml): List account commands
- [POST /accounts/{account_id}/dex/commands](operations/post_commands.yaml): Create account commands
- [GET /accounts/{account_id}/dex/commands/devices](operations/get_commands_eligible_devices.yaml): List devices eligible for remote captures
- [GET /accounts/{account_id}/dex/commands/quota](operations/get_commands_quota.yaml): Returns account commands usage, quota, and reset time
- [GET /accounts/{account_id}/dex/commands/{command_id}/downloads/{filename}](operations/get_commands_command_id_downloads_filename.yaml): Download command output file

## DEX Synthetic Application Monitoring

- [DEX Synthetic Application Monitoring operations](tags/dex_synthetic_application_monitoring.yaml) All 'DEX Synthetic Application Monitoring' operations in one file
- [GET /accounts/{account_id}/dex/colos](operations/dex_endpoints_list_colos.yaml): List Cloudflare colos
- [GET /accounts/{account_id}/dex/devices/{device_id}/fleet-status/live](operations/devices_live_status.yaml): Get the live status of a latest device
- [GET /accounts/{account_id}/dex/fleet-status/devices](operations/dex_fleet_status_devices.yaml): List fleet status devices
- [GET /accounts/{account_id}/dex/fleet-status/live](operations/dex_fleet_status_live.yaml): List fleet status details by dimension
- [GET /accounts/{account_id}/dex/fleet-status/over-time](operations/dex_fleet_status_over_time.yaml): List fleet status aggregate details by dimension
- [GET /accounts/{account_id}/dex/http-tests/{test_id}](operations/dex_endpoints_http_test_details.yaml): Get details and aggregate metrics for an http test
- [GET /accounts/{account_id}/dex/http-tests/{test_id}/percentiles](operations/dex_endpoints_http_test_percentiles.yaml): Get percentiles for an http test
- [GET /accounts/{account_id}/dex/tests/overview](operations/dex_endpoints_list_tests_overview.yaml): List DEX test analytics
- [GET /accounts/{account_id}/dex/tests/unique-devices](operations/dex_endpoints_tests_unique_devices.yaml): Get count of devices targeted
- [GET /accounts/{account_id}/dex/traceroute-test-results/{test_result_id}/network-path](operations/dex_endpoints_traceroute_test_result_network_path.yaml): Get details for a specific traceroute test run
- [GET /accounts/{account_id}/dex/traceroute-tests/{test_id}](operations/dex_endpoints_traceroute_test_details.yaml): Get details and aggregate metrics for a traceroute test
- [GET /accounts/{account_id}/dex/traceroute-tests/{test_id}/network-path](operations/dex_endpoints_traceroute_test_network_path.yaml): Get network path breakdown for a traceroute test
- [GET /accounts/{account_id}/dex/traceroute-tests/{test_id}/percentiles](operations/dex_endpoints_traceroute_test_percentiles.yaml): Get percentiles for a traceroute test

## DLP Datasets

- [DLP Datasets operations](tags/dlp_datasets.yaml) All 'DLP Datasets' operations in one file
- [GET /accounts/{account_id}/dlp/datasets](operations/dlp_datasets_read_all.yaml): Fetch all datasets
- [POST /accounts/{account_id}/dlp/datasets](operations/dlp_datasets_create.yaml): Create a new dataset
- [GET /accounts/{account_id}/dlp/datasets/{dataset_id}](operations/dlp_datasets_read.yaml): Fetch a specific dataset
- [PUT /accounts/{account_id}/dlp/datasets/{dataset_id}](operations/dlp_datasets_update.yaml): Update details about a dataset
- [DELETE /accounts/{account_id}/dlp/datasets/{dataset_id}](operations/dlp_datasets_delete.yaml): Delete a dataset
- [POST /accounts/{account_id}/dlp/datasets/{dataset_id}/upload](operations/dlp_datasets_create_version.yaml): Prepare to upload a new version of a dataset
- [POST /accounts/{account_id}/dlp/datasets/{dataset_id}/upload/{version}](operations/dlp_datasets_upload_version.yaml): Upload a new version of a dataset
- [POST /accounts/{account_id}/dlp/datasets/{dataset_id}/versions/{version}](operations/dlp_datasets_define_columns.yaml): Sets the column information for a multi-column upload
- [POST /accounts/{account_id}/dlp/datasets/{dataset_id}/versions/{version}/entries/{entry_id}](operations/dlp_datasets_upload_dataset_column.yaml): Upload a new version of a multi-column dataset

## DLP Document Fingerprints

- [DLP Document Fingerprints operations](tags/dlp_document_fingerprints.yaml) All 'DLP Document Fingerprints' operations in one file
- [GET /accounts/{account_id}/dlp/document_fingerprints](operations/dlp_document_fingerprints_read_all.yaml): Retrieve data about all document fingerprints.
- [POST /accounts/{account_id}/dlp/document_fingerprints](operations/dlp_document_fingerprints_create.yaml): Creates a new document fingerprint.
- [GET /accounts/{account_id}/dlp/document_fingerprints/{document_fingerprint_id}](operations/dlp_document_fingerprints_read.yaml): Retrieve data about a specific document fingerprint.
- [POST /accounts/{account_id}/dlp/document_fingerprints/{document_fingerprint_id}](operations/dlp_document_fingerprints_update.yaml): Update the attributes of a single document fingerprint.
- [PUT /accounts/{account_id}/dlp/document_fingerprints/{document_fingerprint_id}](operations/dlp_document_fingerprints_upload.yaml): Uploads a new version for a document fingerprint.
- [DELETE /accounts/{account_id}/dlp/document_fingerprints/{document_fingerprint_id}](operations/dlp_document_fingerprints_delete.yaml): Delete a single document fingerprint.

## DLP Email

- [DLP Email operations](tags/dlp_email.yaml) All 'DLP Email' operations in one file
- [GET /accounts/{account_id}/dlp/email/account_mapping](operations/dlp_email_scanner_get_account_mapping.yaml): Get mapping
- [POST /accounts/{account_id}/dlp/email/account_mapping](operations/dlp_email_scanner_create_account_mapping.yaml): Create mapping
- [GET /accounts/{account_id}/dlp/email/rules](operations/dlp_email_scanner_list_all_rules.yaml): List all email scanner rules
- [POST /accounts/{account_id}/dlp/email/rules](operations/dlp_email_scanner_create_rule.yaml): Create email scanner rule
- [PATCH /accounts/{account_id}/dlp/email/rules](operations/dlp_email_scanner_update_rule_priorities.yaml): Update email scanner rule priorities
- [GET /accounts/{account_id}/dlp/email/rules/{rule_id}](operations/dlp_email_scanner_get_rule.yaml): Get an email scanner rule
- [PUT /accounts/{account_id}/dlp/email/rules/{rule_id}](operations/dlp_email_scanner_update_rule.yaml): Update email scanner rule
- [DELETE /accounts/{account_id}/dlp/email/rules/{rule_id}](operations/dlp_email_scanner_delete_rule.yaml): Delete email scanner rule

## DLP Entries

- [DLP Entries operations](tags/dlp_entries.yaml) All 'DLP Entries' operations in one file
- [GET /accounts/{account_id}/dlp/entries](operations/dlp_entries_list_all_entries.yaml): List all entries
- [POST /accounts/{account_id}/dlp/entries](operations/dlp_entries_create_entry.yaml): Create custom entry
- [PUT /accounts/{account_id}/dlp/entries/custom/{entry_id}](operations/dlp_entries_update_custom_entry.yaml): Update custom entry
- [PUT /accounts/{account_id}/dlp/entries/predefined/{entry_id}](operations/dlp_entries_update_predefined_entry.yaml): Update predefined entry
- [GET /accounts/{account_id}/dlp/entries/{entry_id}](operations/dlp_entries_get_dlp_entry.yaml): Get DLP Entry
- [PUT /accounts/{account_id}/dlp/entries/{entry_id}](operations/dlp_entries_update_entry.yaml): Update entry
- [DELETE /accounts/{account_id}/dlp/entries/{entry_id}](operations/dlp_entries_delete_entry.yaml): Delete custom entry

## DLP Integration Entries

- [DLP Integration Entries operations](tags/dlp_integration_entries.yaml) All 'DLP Integration Entries' operations in one file
- [POST /accounts/{account_id}/dlp/entries/integration](operations/dlp_entries_create_integration_entry.yaml): Create integration entry
- [PUT /accounts/{account_id}/dlp/entries/integration/{entry_id}](operations/dlp_entries_update_integration_entry.yaml): Update integration entry
- [DELETE /accounts/{account_id}/dlp/entries/integration/{entry_id}](operations/dlp_entries_delete_integration_entry.yaml): Delete integration entry

## DLP Predefined Entries

- [DLP Predefined Entries operations](tags/dlp_predefined_entries.yaml) All 'DLP Predefined Entries' operations in one file
- [POST /accounts/{account_id}/dlp/entries/predefined](operations/dlp_entries_create_predefined_entry.yaml): Create predefined entry
- [DELETE /accounts/{account_id}/dlp/entries/predefined/{entry_id}](operations/dlp_entries_delete_predefined_entry.yaml): Delete predefined entry

## DLP Profiles

- [DLP Profiles operations](tags/dlp_profiles.yaml) All 'DLP Profiles' operations in one file
- [GET /accounts/{account_id}/dlp/profiles](operations/dlp_profiles_list_all_profiles.yaml): List all profiles
- [POST /accounts/{account_id}/dlp/profiles/custom](operations/dlp_profiles_create_custom_profiles.yaml): Create custom profile
- [GET /accounts/{account_id}/dlp/profiles/custom/{profile_id}](operations/dlp_profiles_get_custom_profile.yaml): Get custom profile
- [PUT /accounts/{account_id}/dlp/profiles/custom/{profile_id}](operations/dlp_profiles_update_custom_profile.yaml): Update custom profile
- [DELETE /accounts/{account_id}/dlp/profiles/custom/{profile_id}](operations/dlp_profiles_delete_custom_profile.yaml): Delete custom profile
- [POST /accounts/{account_id}/dlp/profiles/predefined](operations/dlp_profiles_create_predefined_profile.yaml): Create predefined profile
- [GET /accounts/{account_id}/dlp/profiles/predefined/{profile_id}](operations/dlp_profiles_get_predefined_profile.yaml): Get predefined profile
- [PUT /accounts/{account_id}/dlp/profiles/predefined/{profile_id}](operations/dlp_profiles_update_predefined_profile.yaml): Update predefined profile
- [DELETE /accounts/{account_id}/dlp/profiles/predefined/{profile_id}](operations/dlp_profiles_delete_predefined_profile.yaml): Delete predefined profile
- [GET /accounts/{account_id}/dlp/profiles/{profile_id}](operations/dlp_profiles_get_dlp_profile.yaml): Get DLP Profile

## DLP Settings

- [DLP Settings operations](tags/dlp_settings.yaml) All 'DLP Settings' operations in one file
- [GET /accounts/{account_id}/dlp/limits](operations/dlp_limits_get.yaml): Fetch limits associated with DLP for account
- [POST /accounts/{account_id}/dlp/patterns/validate](operations/dlp_pattern_validate.yaml): Validate a DLP regex pattern
- [GET /accounts/{account_id}/dlp/payload_log](operations/dlp_payload_log_get.yaml): Get payload log settings
- [PUT /accounts/{account_id}/dlp/payload_log](operations/dlp_payload_log_put.yaml): Set payload log settings

## DLS Regional Services

- [DLS Regional Services operations](tags/dls_regional_services.yaml) All 'DLS Regional Services' operations in one file
- [GET /accounts/{account_id}/addressing/regional_hostnames/regions](operations/dls_account_regional_hostnames_account_list_regions.yaml): List Regions
- [GET /zones/{zone_id}/addressing/regional_hostnames](operations/dls_account_regional_hostnames_account_list_hostnames.yaml): List Regional Hostnames
- [POST /zones/{zone_id}/addressing/regional_hostnames](operations/dls_account_regional_hostnames_account_create_hostname.yaml): Create Regional Hostname
- [GET /zones/{zone_id}/addressing/regional_hostnames/{hostname}](operations/dls_account_regional_hostnames_account_fetch_hostname.yaml): Fetch Regional Hostname
- [PATCH /zones/{zone_id}/addressing/regional_hostnames/{hostname}](operations/dls_account_regional_hostnames_account_patch_hostname.yaml): Update Regional Hostname
- [DELETE /zones/{zone_id}/addressing/regional_hostnames/{hostname}](operations/dls_account_regional_hostnames_account_delete_hostname.yaml): Delete Regional Hostname

## DNS Analytics

- [DNS Analytics operations](tags/dns_analytics.yaml) All 'DNS Analytics' operations in one file
- [GET /zones/{zone_id}/dns_analytics/report](operations/dns_analytics_table.yaml): Table
- [GET /zones/{zone_id}/dns_analytics/report/bytime](operations/dns_analytics_by_time.yaml): By Time

## DNS Firewall

- [DNS Firewall operations](tags/dns_firewall.yaml) All 'DNS Firewall' operations in one file
- [GET /accounts/{account_id}/dns_firewall](operations/dns_firewall_list_dns_firewall_clusters.yaml): List DNS Firewall Clusters
- [POST /accounts/{account_id}/dns_firewall](operations/dns_firewall_create_dns_firewall_cluster.yaml): Create DNS Firewall Cluster
- [GET /accounts/{account_id}/dns_firewall/{dns_firewall_id}](operations/dns_firewall_dns_firewall_cluster_details.yaml): DNS Firewall Cluster Details
- [PATCH /accounts/{account_id}/dns_firewall/{dns_firewall_id}](operations/dns_firewall_update_dns_firewall_cluster.yaml): Update DNS Firewall Cluster
- [DELETE /accounts/{account_id}/dns_firewall/{dns_firewall_id}](operations/dns_firewall_delete_dns_firewall_cluster.yaml): Delete DNS Firewall Cluster
- [GET /accounts/{account_id}/dns_firewall/{dns_firewall_id}/reverse_dns](operations/dns_firewall_show_dns_firewall_cluster_reverse_dns.yaml): Show DNS Firewall Cluster Reverse DNS
- [PATCH /accounts/{account_id}/dns_firewall/{dns_firewall_id}/reverse_dns](operations/dns_firewall_update_dns_firewall_cluster_reverse_dns.yaml): Update DNS Firewall Cluster Reverse DNS

## DNS Firewall Analytics

- [DNS Firewall Analytics operations](tags/dns_firewall_analytics.yaml) All 'DNS Firewall Analytics' operations in one file
- [GET /accounts/{account_id}/dns_firewall/{dns_firewall_id}/dns_analytics/report](operations/dns_firewall_analytics_table.yaml): Table
- [GET /accounts/{account_id}/dns_firewall/{dns_firewall_id}/dns_analytics/report/bytime](operations/dns_firewall_analytics_by_time.yaml): By Time

## DNS Internal Views for an Account

- [DNS Internal Views for an Account operations](tags/dns_internal_views_for_an_account.yaml) All 'DNS Internal Views for an Account' operations in one file
- [GET /accounts/{account_id}/dns_settings/views](operations/dns_views_for_an_account_list_internal_dns_views.yaml): List Internal DNS Views
- [POST /accounts/{account_id}/dns_settings/views](operations/dns_views_for_an_account_create_internal_dns_views.yaml): Create Internal DNS View
- [GET /accounts/{account_id}/dns_settings/views/{view_id}](operations/dns_views_for_an_account_get_internal_dns_view.yaml): DNS Internal View Details
- [PATCH /accounts/{account_id}/dns_settings/views/{view_id}](operations/dns_views_for_an_account_update_internal_dns_view.yaml): Update Internal DNS View
- [DELETE /accounts/{account_id}/dns_settings/views/{view_id}](operations/dns_views_for_an_account_delete_internal_dns_view.yaml): Delete Internal DNS View

## DNS Records for a Zone

- [DNS Records for a Zone operations](tags/dns_records_for_a_zone.yaml) All 'DNS Records for a Zone' operations in one file
- [GET /zones/{zone_id}/dns_records](operations/dns_records_for_a_zone_list_dns_records.yaml): List DNS Records
- [POST /zones/{zone_id}/dns_records](operations/dns_records_for_a_zone_create_dns_record.yaml): Create DNS Record
- [POST /zones/{zone_id}/dns_records/batch](operations/dns_records_for_a_zone_batch_dns_records.yaml): Batch DNS Records
- [GET /zones/{zone_id}/dns_records/export](operations/dns_records_for_a_zone_export_dns_records.yaml): Export DNS Records
- [POST /zones/{zone_id}/dns_records/import](operations/dns_records_for_a_zone_import_dns_records.yaml): Import DNS Records
- [POST /zones/{zone_id}/dns_records/scan](operations/dns_records_for_a_zone_scan_dns_records.yaml): Scan DNS Records
- [GET /zones/{zone_id}/dns_records/{dns_record_id}](operations/dns_records_for_a_zone_dns_record_details.yaml): DNS Record Details
- [PUT /zones/{zone_id}/dns_records/{dns_record_id}](operations/dns_records_for_a_zone_update_dns_record.yaml): Overwrite DNS Record
- [PATCH /zones/{zone_id}/dns_records/{dns_record_id}](operations/dns_records_for_a_zone_patch_dns_record.yaml): Update DNS Record
- [DELETE /zones/{zone_id}/dns_records/{dns_record_id}](operations/dns_records_for_a_zone_delete_dns_record.yaml): Delete DNS Record

## DNS Settings for a Zone

- [DNS Settings for a Zone operations](tags/dns_settings_for_a_zone.yaml) All 'DNS Settings for a Zone' operations in one file
- [GET /zones/{zone_id}/dns_settings](operations/dns_settings_for_a_zone_list_dns_settings.yaml): Show DNS Settings
- [PATCH /zones/{zone_id}/dns_settings](operations/dns_settings_for_a_zone_update_dns_settings.yaml): Update DNS Settings

## DNS Settings for an Account

- [DNS Settings for an Account operations](tags/dns_settings_for_an_account.yaml) All 'DNS Settings for an Account' operations in one file
- [GET /accounts/{account_id}/dns_settings](operations/dns_settings_for_an_account_list_dns_settings.yaml): Show DNS Settings
- [PATCH /accounts/{account_id}/dns_settings](operations/dns_settings_for_an_account_update_dns_settings.yaml): Update DNS Settings

## DNSSEC

- [DNSSEC operations](tags/dnssec.yaml) All 'DNSSEC' operations in one file
- [GET /zones/{zone_id}/dnssec](operations/dnssec_dnssec_details.yaml): DNSSEC Details
- [PATCH /zones/{zone_id}/dnssec](operations/dnssec_edit_dnssec_status.yaml): Edit DNSSEC Status
- [DELETE /zones/{zone_id}/dnssec](operations/dnssec_delete_dnssec_records.yaml): Delete DNSSEC records

## Dataset

- [Dataset operations](tags/dataset.yaml) All 'Dataset' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/dataset](operations/get_datasetlist.yaml): Lists all datasets in an account
- [POST /accounts/{account_id}/cloudforce-one/events/dataset/create](operations/post_datasetcreate.yaml): Creates a dataset
- [GET /accounts/{account_id}/cloudforce-one/events/dataset/{dataset_id}](operations/get_datasetread.yaml): Reads a dataset
- [POST /accounts/{account_id}/cloudforce-one/events/dataset/{dataset_id}](operations/post_datasetupdate.yaml): Updates an existing dataset
- [PATCH /accounts/{account_id}/cloudforce-one/events/dataset/{dataset_id}](operations/patch_datasetupdate.yaml): Updates an existing dataset

## Device DEX Tests

- [Device DEX Tests operations](tags/device_dex_tests.yaml) All 'Device DEX Tests' operations in one file
- [GET /accounts/{account_id}/dex/devices/dex_tests](operations/device_dex_test_details.yaml): List Device DEX tests
- [POST /accounts/{account_id}/dex/devices/dex_tests](operations/device_dex_test_create_device_dex_test.yaml): Create Device DEX test
- [GET /accounts/{account_id}/dex/devices/dex_tests/{dex_test_id}](operations/device_dex_test_get_device_dex_test.yaml): Get Device DEX test
- [PUT /accounts/{account_id}/dex/devices/dex_tests/{dex_test_id}](operations/device_dex_test_update_device_dex_test.yaml): Update Device DEX test
- [DELETE /accounts/{account_id}/dex/devices/dex_tests/{dex_test_id}](operations/device_dex_test_delete_device_dex_test.yaml): Delete Device DEX test

## Device Managed Networks

- [Device Managed Networks operations](tags/device_managed_networks.yaml) All 'Device Managed Networks' operations in one file
- [GET /accounts/{account_id}/devices/networks](operations/device_managed_networks_list_device_managed_networks.yaml): List your device managed networks
- [POST /accounts/{account_id}/devices/networks](operations/device_managed_networks_create_device_managed_network.yaml): Create a device managed network
- [GET /accounts/{account_id}/devices/networks/{network_id}](operations/device_managed_networks_device_managed_network_details.yaml): Get device managed network details
- [PUT /accounts/{account_id}/devices/networks/{network_id}](operations/device_managed_networks_update_device_managed_network.yaml): Update a device managed network
- [DELETE /accounts/{account_id}/devices/networks/{network_id}](operations/device_managed_networks_delete_device_managed_network.yaml): Delete a device managed network

## Device Posture Integrations

- [Device Posture Integrations operations](tags/device_posture_integrations.yaml) All 'Device Posture Integrations' operations in one file
- [GET /accounts/{account_id}/devices/posture/integration](operations/device_posture_integrations_list_device_posture_integrations.yaml): List your device posture integrations
- [POST /accounts/{account_id}/devices/posture/integration](operations/device_posture_integrations_create_device_posture_integration.yaml): Create a device posture integration
- [GET /accounts/{account_id}/devices/posture/integration/{integration_id}](operations/device_posture_integrations_device_posture_integration_details.yaml): Get device posture integration details
- [PATCH /accounts/{account_id}/devices/posture/integration/{integration_id}](operations/device_posture_integrations_update_device_posture_integration.yaml): Update a device posture integration
- [DELETE /accounts/{account_id}/devices/posture/integration/{integration_id}](operations/device_posture_integrations_delete_device_posture_integration.yaml): Delete a device posture integration

## Device posture rules

- [Device posture rules operations](tags/device_posture_rules.yaml) All 'Device posture rules' operations in one file
- [GET /accounts/{account_id}/devices/posture](operations/device_posture_rules_list_device_posture_rules.yaml): List device posture rules
- [POST /accounts/{account_id}/devices/posture](operations/device_posture_rules_create_device_posture_rule.yaml): Create a device posture rule
- [GET /accounts/{account_id}/devices/posture/{rule_id}](operations/device_posture_rules_device_posture_rules_details.yaml): Get device posture rule details
- [PUT /accounts/{account_id}/devices/posture/{rule_id}](operations/device_posture_rules_update_device_posture_rule.yaml): Update a device posture rule
- [DELETE /accounts/{account_id}/devices/posture/{rule_id}](operations/device_posture_rules_delete_device_posture_rule.yaml): Delete a device posture rule

## Devices

- [Devices operations](tags/devices.yaml) All 'Devices' operations in one file
- [GET /accounts/{account_id}/devices](operations/devices_list_devices.yaml): List devices (deprecated)
- [GET /accounts/{account_id}/devices/policies](operations/devices_list_device_settings_policies.yaml): List device settings profiles
- [GET /accounts/{account_id}/devices/policy](operations/devices_get_default_device_settings_policy.yaml): Get the default device settings profile
- [POST /accounts/{account_id}/devices/policy](operations/devices_create_device_settings_policy.yaml): Create a device settings profile
- [PATCH /accounts/{account_id}/devices/policy](operations/devices_update_default_device_settings_policy.yaml): Update the default device settings profile
- [GET /accounts/{account_id}/devices/policy/exclude](operations/devices_get_split_tunnel_exclude_list.yaml): Get the Split Tunnel exclude list
- [PUT /accounts/{account_id}/devices/policy/exclude](operations/devices_set_split_tunnel_exclude_list.yaml): Set the Split Tunnel exclude list
- [GET /accounts/{account_id}/devices/policy/fallback_domains](operations/devices_get_local_domain_fallback_list.yaml): Get your Local Domain Fallback list
- [PUT /accounts/{account_id}/devices/policy/fallback_domains](operations/devices_set_local_domain_fallback_list.yaml): Set your Local Domain Fallback list
- [GET /accounts/{account_id}/devices/policy/include](operations/devices_get_split_tunnel_include_list.yaml): Get the Split Tunnel include list
- [PUT /accounts/{account_id}/devices/policy/include](operations/devices_set_split_tunnel_include_list.yaml): Set the Split Tunnel include list
- [GET /accounts/{account_id}/devices/policy/{policy_id}](operations/devices_get_device_settings_policy_by_id.yaml): Get device settings profile by ID
- [PATCH /accounts/{account_id}/devices/policy/{policy_id}](operations/devices_update_device_settings_policy.yaml): Update a device settings profile
- [DELETE /accounts/{account_id}/devices/policy/{policy_id}](operations/devices_delete_device_settings_policy.yaml): Delete a device settings profile
- [GET /accounts/{account_id}/devices/policy/{policy_id}/exclude](operations/devices_get_split_tunnel_exclude_list_for_a_device_settings_policy.yaml): Get the Split Tunnel exclude list for a device settings profile
- [PUT /accounts/{account_id}/devices/policy/{policy_id}/exclude](operations/devices_set_split_tunnel_exclude_list_for_a_device_settings_policy.yaml): Set the Split Tunnel exclude list for a device settings profile
- [GET /accounts/{account_id}/devices/policy/{policy_id}/fallback_domains](operations/devices_get_local_domain_fallback_list_for_a_device_settings_policy.yaml): Get the Local Domain Fallback list for a device settings profile
- [PUT /accounts/{account_id}/devices/policy/{policy_id}/fallback_domains](operations/devices_set_local_domain_fallback_list_for_a_device_settings_policy.yaml): Set the Local Domain Fallback list for a device settings profile
- [GET /accounts/{account_id}/devices/policy/{policy_id}/include](operations/devices_get_split_tunnel_include_list_for_a_device_settings_policy.yaml): Get the Split Tunnel include list for a device settings profile
- [PUT /accounts/{account_id}/devices/policy/{policy_id}/include](operations/devices_set_split_tunnel_include_list_for_a_device_settings_policy.yaml): Set the Split Tunnel include list for a device settings profile
- [POST /accounts/{account_id}/devices/revoke](operations/devices_revoke_devices.yaml): Revoke devices (deprecated)
- [POST /accounts/{account_id}/devices/unrevoke](operations/devices_unrevoke_devices.yaml): Unrevoke devices (deprecated)
- [GET /accounts/{account_id}/devices/{device_id}](operations/devices_device_details.yaml): Get device (deprecated)
- [GET /accounts/{account_id}/devices/{device_id}/override_codes](operations/devices_list_admin_override_code_for_device.yaml): Get override codes (deprecated)

- [GET /zones/{zone_id}/devices/policy/certificates](operations/devices_get_policy_certificates.yaml): Get device certificate provisioning status
- [PATCH /zones/{zone_id}/devices/policy/certificates](operations/devices_update_policy_certificates.yaml): Update device certificate provisioning status

## Devices Resilience

- [Devices Resilience operations](tags/devices_resilience.yaml) All 'Devices Resilience' operations in one file
- [GET /accounts/{account_id}/devices/resilience/disconnect](operations/devices_resilience_retrieve_global_warp_override.yaml): Retrieve Global WARP override state
- [POST /accounts/{account_id}/devices/resilience/disconnect](operations/devices_resilience_set_global_warp_override.yaml): Set Global WARP override state

## Diagnostics

- [Diagnostics operations](tags/diagnostics.yaml) All 'Diagnostics' operations in one file
- [POST /accounts/{account_id}/diagnostics/traceroute](operations/diagnostics_traceroute.yaml): Traceroute

## Domain History

- [Domain History operations](tags/domain_history.yaml) All 'Domain History' operations in one file
- [GET /accounts/{account_id}/intel/domain-history](operations/domain_history_get_domain_history.yaml): Get Domain History

## Domain Intelligence

- [Domain Intelligence operations](tags/domain_intelligence.yaml) All 'Domain Intelligence' operations in one file
- [GET /accounts/{account_id}/intel/domain](operations/domain_intelligence_get_domain_details.yaml): Get Domain Details
- [GET /accounts/{account_id}/intel/domain/bulk](operations/domain_intelligence_get_multiple_domain_details.yaml): Get Multiple Domain Details

## Durable Objects Namespace

- [Durable Objects Namespace operations](tags/durable_objects_namespace.yaml) All 'Durable Objects Namespace' operations in one file
- [GET /accounts/{account_id}/workers/durable_objects/namespaces](operations/durable_objects_namespace_list_namespaces.yaml): List Namespaces
- [GET /accounts/{account_id}/workers/durable_objects/namespaces/{id}/objects](operations/durable_objects_namespace_list_objects.yaml): List Objects

## Email Routing destination addresses

- [Email Routing destination addresses operations](tags/email_routing_destination_addresses.yaml) All 'Email Routing destination addresses' operations in one file
- [GET /accounts/{account_id}/email/routing/addresses](operations/email_routing_destination_addresses_list_destination_addresses.yaml): List destination addresses
- [POST /accounts/{account_id}/email/routing/addresses](operations/email_routing_destination_addresses_create_a_destination_address.yaml): Create a destination address
- [GET /accounts/{account_id}/email/routing/addresses/{destination_address_identifier}](operations/email_routing_destination_addresses_get_a_destination_address.yaml): Get a destination address
- [DELETE /accounts/{account_id}/email/routing/addresses/{destination_address_identifier}](operations/email_routing_destination_addresses_delete_destination_address.yaml): Delete destination address

## Email Routing routing rules

- [Email Routing routing rules operations](tags/email_routing_routing_rules.yaml) All 'Email Routing routing rules' operations in one file
- [GET /zones/{zone_id}/email/routing/rules](operations/email_routing_routing_rules_list_routing_rules.yaml): List routing rules
- [POST /zones/{zone_id}/email/routing/rules](operations/email_routing_routing_rules_create_routing_rule.yaml): Create routing rule
- [GET /zones/{zone_id}/email/routing/rules/catch_all](operations/email_routing_routing_rules_get_catch_all_rule.yaml): Get catch-all rule
- [PUT /zones/{zone_id}/email/routing/rules/catch_all](operations/email_routing_routing_rules_update_catch_all_rule.yaml): Update catch-all rule
- [GET /zones/{zone_id}/email/routing/rules/{rule_identifier}](operations/email_routing_routing_rules_get_routing_rule.yaml): Get routing rule
- [PUT /zones/{zone_id}/email/routing/rules/{rule_identifier}](operations/email_routing_routing_rules_update_routing_rule.yaml): Update routing rule
- [DELETE /zones/{zone_id}/email/routing/rules/{rule_identifier}](operations/email_routing_routing_rules_delete_routing_rule.yaml): Delete routing rule

## Email Routing settings

- [Email Routing settings operations](tags/email_routing_settings.yaml) All 'Email Routing settings' operations in one file
- [GET /zones/{zone_id}/email/routing](operations/email_routing_settings_get_email_routing_settings.yaml): Get Email Routing settings
- [POST /zones/{zone_id}/email/routing/disable](operations/email_routing_settings_disable_email_routing.yaml): Disable Email Routing
- [GET /zones/{zone_id}/email/routing/dns](operations/email_routing_settings_email_routing_dns_settings.yaml): Email Routing - DNS settings
- [POST /zones/{zone_id}/email/routing/dns](operations/email_routing_settings_enable_email_routing_dns.yaml): Enable Email Routing
- [PATCH /zones/{zone_id}/email/routing/dns](operations/email_routing_settings_unlock_email_routing_dns.yaml): Unlock Email Routing
- [DELETE /zones/{zone_id}/email/routing/dns](operations/email_routing_settings_disable_email_routing_dns.yaml): Disable Email Routing
- [POST /zones/{zone_id}/email/routing/enable](operations/email_routing_settings_enable_email_routing.yaml): Enable Email Routing

## Email Security

- [Email Security operations](tags/email_security.yaml) All 'Email Security' operations in one file
- [GET /accounts/{account_id}/email-security/investigate](operations/email_security_investigate.yaml): Search email messages
- [POST /accounts/{account_id}/email-security/investigate/move](operations/email_security_post_bulk_message_move.yaml): Move multiple messages
- [POST /accounts/{account_id}/email-security/investigate/preview](operations/email_security_post_preview.yaml): Preview for non-detection messages
- [POST /accounts/{account_id}/email-security/investigate/release](operations/email_security_post_release.yaml): Release messages from quarantine
- [GET /accounts/{account_id}/email-security/investigate/{postfix_id}](operations/email_security_get_message.yaml): Get message details
- [GET /accounts/{account_id}/email-security/investigate/{postfix_id}/detections](operations/email_security_get_message_detections.yaml): Get message detection details
- [POST /accounts/{account_id}/email-security/investigate/{postfix_id}/move](operations/email_security_post_message_move.yaml): Move a message
- [GET /accounts/{account_id}/email-security/investigate/{postfix_id}/preview](operations/email_security_get_message_preview.yaml): Get email preview
- [GET /accounts/{account_id}/email-security/investigate/{postfix_id}/raw](operations/email_security_get_message_raw.yaml): Get raw email content
- [POST /accounts/{account_id}/email-security/investigate/{postfix_id}/reclassify](operations/email_security_post_reclassify.yaml): Change email classfication
- [GET /accounts/{account_id}/email-security/investigate/{postfix_id}/trace](operations/email_security_get_message_trace.yaml): Get email trace
- [GET /accounts/{account_id}/email-security/submissions](operations/email_security_submissions.yaml): Get reclassify submissions

## Email Security Settings

- [Email Security Settings operations](tags/email_security_settings.yaml) All 'Email Security Settings' operations in one file
- [GET /accounts/{account_id}/email-security/settings/allow_policies](operations/email_security_list_allow_policies.yaml): List email allow policies
- [POST /accounts/{account_id}/email-security/settings/allow_policies](operations/email_security_create_allow_policy.yaml): Create an email allow policy
- [POST /accounts/{account_id}/email-security/settings/allow_policies/batch](operations/email_security_batch_allow_policies.yaml): Batch Allow Policies
- [GET /accounts/{account_id}/email-security/settings/allow_policies/{policy_id}](operations/email_security_get_allow_policy.yaml): Get an email allow policy
- [PATCH /accounts/{account_id}/email-security/settings/allow_policies/{policy_id}](operations/email_security_update_allow_policy.yaml): Update an email allow policy
- [DELETE /accounts/{account_id}/email-security/settings/allow_policies/{policy_id}](operations/email_security_delete_allow_policy.yaml): Delete an email allow policy
- [GET /accounts/{account_id}/email-security/settings/block_senders](operations/email_security_list_blocked_senders.yaml): List blocked email senders
- [POST /accounts/{account_id}/email-security/settings/block_senders](operations/email_security_create_blocked_sender.yaml): Create a blocked email sender
- [POST /accounts/{account_id}/email-security/settings/block_senders/batch](operations/email_security_batch_blocked_senders.yaml): Batch Block Senders
- [GET /accounts/{account_id}/email-security/settings/block_senders/{pattern_id}](operations/email_security_get_blocked_sender.yaml): Get a blocked email sender
- [PATCH /accounts/{account_id}/email-security/settings/block_senders/{pattern_id}](operations/email_security_update_blocked_sender.yaml): Update a blocked email sender
- [DELETE /accounts/{account_id}/email-security/settings/block_senders/{pattern_id}](operations/email_security_delete_blocked_sender.yaml): Delete a blocked email sender
- [GET /accounts/{account_id}/email-security/settings/domains](operations/email_security_list_domains.yaml): List protected email domains
- [DELETE /accounts/{account_id}/email-security/settings/domains](operations/email_security_delete_domains.yaml): Unprotect multiple email domains
- [GET /accounts/{account_id}/email-security/settings/domains/{domain_id}](operations/email_security_get_domain.yaml): Get an email domain
- [PATCH /accounts/{account_id}/email-security/settings/domains/{domain_id}](operations/email_security_update_domain.yaml): Update an email domain
- [DELETE /accounts/{account_id}/email-security/settings/domains/{domain_id}](operations/email_security_delete_domain.yaml): Unprotect an email domain
- [GET /accounts/{account_id}/email-security/settings/impersonation_registry](operations/email_security_list_display_names.yaml): List entries in impersonation registry
- [POST /accounts/{account_id}/email-security/settings/impersonation_registry](operations/email_security_create_display_name.yaml): Create an entry in impersonation registry
- [GET /accounts/{account_id}/email-security/settings/impersonation_registry/{display_name_id}](operations/email_security_get_display_name.yaml): Get an entry in impersonation registry
- [PATCH /accounts/{account_id}/email-security/settings/impersonation_registry/{display_name_id}](operations/email_security_update_display_name.yaml): Update an entry in impersonation registry
- [DELETE /accounts/{account_id}/email-security/settings/impersonation_registry/{display_name_id}](operations/email_security_delete_display_name.yaml): Delete an entry from impersonation registry
- [POST /accounts/{account_id}/email-security/settings/sending_domain_restrictions/batch](operations/email_security_batch_sending_domain_restrictions.yaml): Batch Sending Domain Restrictions
- [GET /accounts/{account_id}/email-security/settings/trusted_domains](operations/email_security_list_trusted_domains.yaml): List trusted email domains
- [POST /accounts/{account_id}/email-security/settings/trusted_domains](operations/email_security_create_trusted_domain.yaml): Create a trusted email domain
- [POST /accounts/{account_id}/email-security/settings/trusted_domains/batch](operations/email_security_batch_trusted_domains.yaml): Batch Trusted Domains
- [GET /accounts/{account_id}/email-security/settings/trusted_domains/{trusted_domain_id}](operations/email_security_get_trusted_domain.yaml): Get a trusted email domain
- [PATCH /accounts/{account_id}/email-security/settings/trusted_domains/{trusted_domain_id}](operations/email_security_update_trusted_domain.yaml): Update a trusted email domain
- [DELETE /accounts/{account_id}/email-security/settings/trusted_domains/{trusted_domain_id}](operations/email_security_delete_trusted_domain.yaml): Delete a trusted email domain

## Endpoint Health Checks

- [Endpoint Health Checks operations](tags/endpoint_health_checks.yaml) All 'Endpoint Health Checks' operations in one file
- [GET /accounts/{account_id}/diagnostics/endpoint-healthchecks](operations/diagnostics_endpoint_healthcheck_list.yaml): List Endpoint Health Checks
- [POST /accounts/{account_id}/diagnostics/endpoint-healthchecks](operations/diagnostics_endpoint_healthcheck_create.yaml): Endpoint Health Check
- [GET /accounts/{account_id}/diagnostics/endpoint-healthchecks/{id}](operations/diagnostics_endpoint_healthcheck_get.yaml): Get Endpoint Health Check
- [PUT /accounts/{account_id}/diagnostics/endpoint-healthchecks/{id}](operations/diagnostics_endpoint_healthcheck_update.yaml): Update Endpoint Health Check
- [DELETE /accounts/{account_id}/diagnostics/endpoint-healthchecks/{id}](operations/diagnostics_endpoint_healthcheck_delete.yaml): Delete Endpoint Health Check

## Event

- [Event operations](tags/event.yaml) All 'Event' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events](operations/get_eventlistget.yaml): Filter and list events
- [POST /accounts/{account_id}/cloudforce-one/events](operations/post_eventlist.yaml): Filter and list events
- [POST /accounts/{account_id}/cloudforce-one/events/create](operations/post_eventcreate.yaml): Creates a new event
- [POST /accounts/{account_id}/cloudforce-one/events/create/bulk](operations/post_eventcreatebulk.yaml): Creates bulk events
- [POST /accounts/{account_id}/cloudforce-one/events/dataset/{dataset_id}/move](operations/post_eventmovetonewds.yaml): Moves specified events from one dataset to another dataset
- [DELETE /accounts/{account_id}/cloudforce-one/events/event_tag/{event_id}](operations/delete_eventtagdelete.yaml): Removes a tag from an event
- [POST /accounts/{account_id}/cloudforce-one/events/event_tag/{event_id}/create](operations/post_eventtagcreate.yaml): Adds a tag to an event
- [GET /accounts/{account_id}/cloudforce-one/events/raw/{dataset_id}/{event_id}](operations/get_eventrawreadds.yaml): Reads data for a raw event
- [DELETE /accounts/{account_id}/cloudforce-one/events/relate/{event_id}](operations/delete_eventreferencedelete.yaml): Removes an event reference
- [POST /accounts/{account_id}/cloudforce-one/events/relate/{event_id}/create](operations/post_eventreferencecreate.yaml): Creates event references for a event
- [POST /accounts/{account_id}/cloudforce-one/events/relationships/create](operations/post_createeventrelationship.yaml): Create a relationship between two events
- [DELETE /accounts/{account_id}/cloudforce-one/events/{dataset_id}/delete](operations/delete_eventdeletedo.yaml): Deletes one or more events
- [GET /accounts/{account_id}/cloudforce-one/events/{event_id}](operations/get_eventread.yaml): Reads an event
- [POST /accounts/{account_id}/cloudforce-one/events/{event_id}](operations/post_eventupdate.yaml): Updates an event
- [PATCH /accounts/{account_id}/cloudforce-one/events/{event_id}](operations/patch_eventupdate.yaml): Updates an event
- [DELETE /accounts/{account_id}/cloudforce-one/events/{event_id}](operations/delete_eventdelete.yaml): Deletes an event
- [GET /accounts/{account_id}/cloudforce-one/events/{event_id}/raw/{raw_id}](operations/get_eventrawread.yaml): Reads data for a raw event
- [POST /accounts/{account_id}/cloudforce-one/events/{event_id}/raw/{raw_id}](operations/post_eventrawupdate.yaml): Updates a raw event
- [PATCH /accounts/{account_id}/cloudforce-one/events/{event_id}/raw/{raw_id}](operations/patch_eventrawupdate.yaml): Updates a raw event
- [GET /accounts/{account_id}/cloudforce-one/events/{event_id}/relationships](operations/get_eventrelationships.yaml): Filter and list events related to specific event

## Filters

- [Filters operations](tags/filters.yaml) All 'Filters' operations in one file
- [GET /zones/{zone_id}/filters](operations/filters_list_filters.yaml): List filters
- [POST /zones/{zone_id}/filters](operations/filters_create_filters.yaml): Create filters
- [PUT /zones/{zone_id}/filters](operations/filters_update_filters.yaml): Update filters
- [DELETE /zones/{zone_id}/filters](operations/filters_delete_filters.yaml): Delete filters
- [GET /zones/{zone_id}/filters/{filter_id}](operations/filters_get_a_filter.yaml): Get a filter
- [PUT /zones/{zone_id}/filters/{filter_id}](operations/filters_update_a_filter.yaml): Update a filter
- [DELETE /zones/{zone_id}/filters/{filter_id}](operations/filters_delete_a_filter.yaml): Delete a filter

## Firewall rules

- [Firewall rules operations](tags/firewall_rules.yaml) All 'Firewall rules' operations in one file
- [GET /zones/{zone_id}/firewall/rules](operations/firewall_rules_list_firewall_rules.yaml): List firewall rules
- [POST /zones/{zone_id}/firewall/rules](operations/firewall_rules_create_firewall_rules.yaml): Create firewall rules
- [PUT /zones/{zone_id}/firewall/rules](operations/firewall_rules_update_firewall_rules.yaml): Update firewall rules
- [PATCH /zones/{zone_id}/firewall/rules](operations/firewall_rules_update_priority_of_firewall_rules.yaml): Update priority of firewall rules
- [DELETE /zones/{zone_id}/firewall/rules](operations/firewall_rules_delete_firewall_rules.yaml): Delete firewall rules
- [GET /zones/{zone_id}/firewall/rules/{rule_id}](operations/firewall_rules_get_a_firewall_rule.yaml): Get a firewall rule
- [PUT /zones/{zone_id}/firewall/rules/{rule_id}](operations/firewall_rules_update_a_firewall_rule.yaml): Update a firewall rule
- [PATCH /zones/{zone_id}/firewall/rules/{rule_id}](operations/firewall_rules_update_priority_of_a_firewall_rule.yaml): Update priority of a firewall rule
- [DELETE /zones/{zone_id}/firewall/rules/{rule_id}](operations/firewall_rules_delete_a_firewall_rule.yaml): Delete a firewall rule

## Gateway CA

- [Gateway CA operations](tags/gateway_ca.yaml) All 'Gateway CA' operations in one file
- [GET /accounts/{account_id}/access/gateway_ca](operations/access_gateway_ca_list_ssh_ca.yaml): List SSH Certificate Authorities (CA)
- [POST /accounts/{account_id}/access/gateway_ca](operations/access_gateway_ca_add_an_ssh_ca.yaml): Add a new SSH Certificate Authority (CA)
- [DELETE /accounts/{account_id}/access/gateway_ca/{certificate_id}](operations/access_gateway_ca_delete_an_ssh_ca.yaml): Delete an SSH Certificate Authority (CA)

## Health Check

- [Health Check operations](tags/health_check.yaml) All 'Health Check' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/dataset/{dataset_id}/health](operations/get_dohealthcheck.yaml): Benchmark Durable Object warmup

## Health Checks

- [Health Checks operations](tags/health_checks.yaml) All 'Health Checks' operations in one file
- [GET /zones/{zone_id}/healthchecks](operations/health_checks_list_health_checks.yaml): List Health Checks
- [POST /zones/{zone_id}/healthchecks](operations/health_checks_create_health_check.yaml): Create Health Check
- [POST /zones/{zone_id}/healthchecks/preview](operations/health_checks_create_preview_health_check.yaml): Create Preview Health Check
- [GET /zones/{zone_id}/healthchecks/preview/{healthcheck_id}](operations/health_checks_health_check_preview_details.yaml): Health Check Preview Details
- [DELETE /zones/{zone_id}/healthchecks/preview/{healthcheck_id}](operations/health_checks_delete_preview_health_check.yaml): Delete Preview Health Check
- [GET /zones/{zone_id}/healthchecks/{healthcheck_id}](operations/health_checks_health_check_details.yaml): Health Check Details
- [PUT /zones/{zone_id}/healthchecks/{healthcheck_id}](operations/health_checks_update_health_check.yaml): Update Health Check
- [PATCH /zones/{zone_id}/healthchecks/{healthcheck_id}](operations/health_checks_patch_health_check.yaml): Patch Health Check
- [DELETE /zones/{zone_id}/healthchecks/{healthcheck_id}](operations/health_checks_delete_health_check.yaml): Delete Health Check

## Hyperdrive

- [Hyperdrive operations](tags/hyperdrive.yaml) All 'Hyperdrive' operations in one file
- [GET /accounts/{account_id}/hyperdrive/configs](operations/list_hyperdrive.yaml): List Hyperdrives
- [POST /accounts/{account_id}/hyperdrive/configs](operations/create_hyperdrive.yaml): Create Hyperdrive
- [GET /accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}](operations/get_hyperdrive.yaml): Get Hyperdrive
- [PUT /accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}](operations/update_hyperdrive.yaml): Update Hyperdrive
- [PATCH /accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}](operations/patch_hyperdrive.yaml): Patch Hyperdrive
- [DELETE /accounts/{account_id}/hyperdrive/configs/{hyperdrive_id}](operations/delete_hyperdrive.yaml): Delete Hyperdrive

## IP Access rules for a user

- [IP Access rules for a user operations](tags/ip_access_rules_for_a_user.yaml) All 'IP Access rules for a user' operations in one file
- [GET /user/firewall/access_rules/rules](operations/ip_access_rules_for_a_user_list_ip_access_rules.yaml): List IP Access rules
- [POST /user/firewall/access_rules/rules](operations/ip_access_rules_for_a_user_create_an_ip_access_rule.yaml): Create an IP Access rule
- [PATCH /user/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_a_user_update_an_ip_access_rule.yaml): Update an IP Access rule
- [DELETE /user/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_a_user_delete_an_ip_access_rule.yaml): Delete an IP Access rule

## IP Access rules for a zone

- [IP Access rules for a zone operations](tags/ip_access_rules_for_a_zone.yaml) All 'IP Access rules for a zone' operations in one file
- [GET /zones/{zone_id}/firewall/access_rules/rules](operations/ip_access_rules_for_a_zone_list_ip_access_rules.yaml): List IP Access rules
- [POST /zones/{zone_id}/firewall/access_rules/rules](operations/ip_access_rules_for_a_zone_create_an_ip_access_rule.yaml): Create an IP Access rule
- [PATCH /zones/{zone_id}/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_a_zone_update_an_ip_access_rule.yaml): Update an IP Access rule
- [DELETE /zones/{zone_id}/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_a_zone_delete_an_ip_access_rule.yaml): Delete an IP Access rule

## IP Access rules for an account

- [IP Access rules for an account operations](tags/ip_access_rules_for_an_account.yaml) All 'IP Access rules for an account' operations in one file
- [GET /accounts/{account_id}/firewall/access_rules/rules](operations/ip_access_rules_for_an_account_list_ip_access_rules.yaml): List IP Access rules
- [POST /accounts/{account_id}/firewall/access_rules/rules](operations/ip_access_rules_for_an_account_create_an_ip_access_rule.yaml): Create an IP Access rule
- [GET /accounts/{account_id}/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_an_account_get_an_ip_access_rule.yaml): Get an IP Access rule
- [PATCH /accounts/{account_id}/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_an_account_update_an_ip_access_rule.yaml): Update an IP Access rule
- [DELETE /accounts/{account_id}/firewall/access_rules/rules/{rule_id}](operations/ip_access_rules_for_an_account_delete_an_ip_access_rule.yaml): Delete an IP Access rule

## IP Address Management Address Maps

- [IP Address Management Address Maps operations](tags/ip_address_management_address_maps.yaml) All 'IP Address Management Address Maps' operations in one file
- [GET /accounts/{account_id}/addressing/address_maps](operations/ip_address_management_address_maps_list_address_maps.yaml): List Address Maps
- [POST /accounts/{account_id}/addressing/address_maps](operations/ip_address_management_address_maps_create_address_map.yaml): Create Address Map
- [GET /accounts/{account_id}/addressing/address_maps/{address_map_id}](operations/ip_address_management_address_maps_address_map_details.yaml): Address Map Details
- [PATCH /accounts/{account_id}/addressing/address_maps/{address_map_id}](operations/ip_address_management_address_maps_update_address_map.yaml): Update Address Map
- [DELETE /accounts/{account_id}/addressing/address_maps/{address_map_id}](operations/ip_address_management_address_maps_delete_address_map.yaml): Delete Address Map
- [PUT /accounts/{account_id}/addressing/address_maps/{address_map_id}/accounts/{account_id}](operations/ip_address_management_address_maps_add_an_account_membership_to_an_address_map.yaml): Add an account membership to an Address Map
- [DELETE /accounts/{account_id}/addressing/address_maps/{address_map_id}/accounts/{account_id}](operations/ip_address_management_address_maps_remove_an_account_membership_from_an_address_map.yaml): Remove an account membership from an Address Map
- [PUT /accounts/{account_id}/addressing/address_maps/{address_map_id}/ips/{ip_address}](operations/ip_address_management_address_maps_add_an_ip_to_an_address_map.yaml): Add an IP to an Address Map
- [DELETE /accounts/{account_id}/addressing/address_maps/{address_map_id}/ips/{ip_address}](operations/ip_address_management_address_maps_remove_an_ip_from_an_address_map.yaml): Remove an IP from an Address Map
- [PUT /accounts/{account_id}/addressing/address_maps/{address_map_id}/zones/{zone_id}](operations/ip_address_management_address_maps_add_a_zone_membership_to_an_address_map.yaml): Add a zone membership to an Address Map
- [DELETE /accounts/{account_id}/addressing/address_maps/{address_map_id}/zones/{zone_id}](operations/ip_address_management_address_maps_remove_a_zone_membership_from_an_address_map.yaml): Remove a zone membership from an Address Map

## IP Address Management BGP Prefixes

- [IP Address Management BGP Prefixes operations](tags/ip_address_management_bgp_prefixes.yaml) All 'IP Address Management BGP Prefixes' operations in one file
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes](operations/ip_address_management_prefixes_list_bgp_prefixes.yaml): List BGP Prefixes
- [POST /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes](operations/ip_address_management_prefixes_create_bgp_prefix.yaml): Create BGP Prefix
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes/{bgp_prefix_id}](operations/ip_address_management_prefixes_fetch_bgp_prefix.yaml): Fetch BGP Prefix
- [PATCH /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/prefixes/{bgp_prefix_id}](operations/ip_address_management_prefixes_update_bgp_prefix.yaml): Update BGP Prefix

## IP Address Management Dynamic Advertisement

- [IP Address Management Dynamic Advertisement operations](tags/ip_address_management_dynamic_advertisement.yaml) All 'IP Address Management Dynamic Advertisement' operations in one file
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/status](operations/ip_address_management_dynamic_advertisement_get_advertisement_status.yaml): Get Advertisement Status
- [PATCH /accounts/{account_id}/addressing/prefixes/{prefix_id}/bgp/status](operations/ip_address_management_dynamic_advertisement_update_prefix_dynamic_advertisement_status.yaml): Update Prefix Dynamic Advertisement Status

## IP Address Management Prefix Delegation

- [IP Address Management Prefix Delegation operations](tags/ip_address_management_prefix_delegation.yaml) All 'IP Address Management Prefix Delegation' operations in one file
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/delegations](operations/ip_address_management_prefix_delegation_list_prefix_delegations.yaml): List Prefix Delegations
- [POST /accounts/{account_id}/addressing/prefixes/{prefix_id}/delegations](operations/ip_address_management_prefix_delegation_create_prefix_delegation.yaml): Create Prefix Delegation
- [DELETE /accounts/{account_id}/addressing/prefixes/{prefix_id}/delegations/{delegation_id}](operations/ip_address_management_prefix_delegation_delete_prefix_delegation.yaml): Delete Prefix Delegation

## IP Address Management Prefixes

- [IP Address Management Prefixes operations](tags/ip_address_management_prefixes.yaml) All 'IP Address Management Prefixes' operations in one file
- [POST /accounts/{account_id}/addressing/loa_documents](operations/ip_address_management_prefixes_upload_loa_document.yaml): Upload LOA Document
- [GET /accounts/{account_id}/addressing/loa_documents/{loa_document_id}/download](operations/ip_address_management_prefixes_download_loa_document.yaml): Download LOA Document
- [GET /accounts/{account_id}/addressing/prefixes](operations/ip_address_management_prefixes_list_prefixes.yaml): List Prefixes
- [POST /accounts/{account_id}/addressing/prefixes](operations/ip_address_management_prefixes_add_prefix.yaml): Add Prefix
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}](operations/ip_address_management_prefixes_prefix_details.yaml): Prefix Details
- [PATCH /accounts/{account_id}/addressing/prefixes/{prefix_id}](operations/ip_address_management_prefixes_update_prefix_description.yaml): Update Prefix Description
- [DELETE /accounts/{account_id}/addressing/prefixes/{prefix_id}](operations/ip_address_management_prefixes_delete_prefix.yaml): Delete Prefix

## IP Address Management Service Bindings

- [IP Address Management Service Bindings operations](tags/ip_address_management_service_bindings.yaml) All 'IP Address Management Service Bindings' operations in one file
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings](operations/ip_address_management_service_bindings_list_service_bindings.yaml): List Service Bindings
- [POST /accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings](operations/ip_address_management_service_bindings_create_service_binding.yaml): Create Service Binding
- [GET /accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings/{binding_id}](operations/ip_address_management_service_bindings_get_service_binding.yaml): Get Service Binding
- [DELETE /accounts/{account_id}/addressing/prefixes/{prefix_id}/bindings/{binding_id}](operations/ip_address_management_service_bindings_delete_service_binding.yaml): Delete Service Binding
- [GET /accounts/{account_id}/addressing/services](operations/ip_address_management_service_bindings_list_services.yaml): List Services

## IP Intelligence

- [IP Intelligence operations](tags/ip_intelligence.yaml) All 'IP Intelligence' operations in one file
- [GET /accounts/{account_id}/intel/ip](operations/ip_intelligence_get_ip_overview.yaml): Get IP Overview

## IP List

- [IP List operations](tags/ip_list.yaml) All 'IP List' operations in one file
- [GET /accounts/{account_id}/intel/ip-list](operations/ip_list_get_ip_lists.yaml): Get IP Lists

## Indicator

- [Indicator operations](tags/indicator.yaml) All 'Indicator' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/indicators](operations/get_indicatorlist.yaml): Lists indicators
- [POST /accounts/{account_id}/cloudforce-one/events/indicators/bulk](operations/post_indicatorcreatebulk.yaml): Creates multiple indicators in bulk
- [POST /accounts/{account_id}/cloudforce-one/events/indicators/create](operations/post_indicatorcreate.yaml): Creates a new indicator
- [GET /accounts/{account_id}/cloudforce-one/events/indicators/{indicator_id}](operations/get_indicatorread.yaml): Reads an indicator
- [PATCH /accounts/{account_id}/cloudforce-one/events/indicators/{indicator_id}](operations/patch_indicatorupdate.yaml): Updates an indicator
- [DELETE /accounts/{account_id}/cloudforce-one/events/indicators/{indicator_id}](operations/delete_indicatordelete.yaml): Deletes an indicator

## Indicator Types

- [Indicator Types operations](tags/indicator_types.yaml) All 'Indicator Types' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/indicatorTypes](operations/get_indicatortypeslist.yaml): Lists all indicator types

## Infrastructure Access Targets

- [Infrastructure Access Targets operations](tags/infrastructure_access_targets.yaml) All 'Infrastructure Access Targets' operations in one file
- [GET /accounts/{account_id}/infrastructure/targets](operations/infra_targets_list.yaml): List all targets
- [POST /accounts/{account_id}/infrastructure/targets](operations/infra_targets_post.yaml): Create new target
- [PUT /accounts/{account_id}/infrastructure/targets/batch](operations/infra_targets_put_batch.yaml): Create new targets
- [DELETE /accounts/{account_id}/infrastructure/targets/batch](operations/infra_targets_delete_batch.yaml): Delete targets (Deprecated)
- [POST /accounts/{account_id}/infrastructure/targets/batch_delete](operations/infra_targets_delete_batch_post.yaml): Delete targets
- [GET /accounts/{account_id}/infrastructure/targets/{target_id}](operations/infra_targets_get.yaml): Get target
- [PUT /accounts/{account_id}/infrastructure/targets/{target_id}](operations/infra_targets_put.yaml): Update target
- [DELETE /accounts/{account_id}/infrastructure/targets/{target_id}](operations/infra_targets_delete.yaml): Delete target

## Instant Logs jobs for a zone

- [Instant Logs jobs for a zone operations](tags/instant_logs_jobs_for_a_zone.yaml) All 'Instant Logs jobs for a zone' operations in one file
- [GET /zones/{zone_id}/logpush/edge](operations/get_zones_zone_id_logpush_edge_jobs.yaml): List Instant Logs jobs
- [POST /zones/{zone_id}/logpush/edge](operations/post_zones_zone_id_logpush_edge_jobs.yaml): Create Instant Logs job

## Interconnects

- [Interconnects operations](tags/interconnects.yaml) All 'Interconnects' operations in one file
- [GET /accounts/{account_id}/cni/interconnects](operations/list_interconnects.yaml): List existing interconnects
- [POST /accounts/{account_id}/cni/interconnects](operations/create_interconnect.yaml): Create a new interconnect
- [GET /accounts/{account_id}/cni/interconnects/{icon}](operations/get_interconnect.yaml): Get information about an interconnect object
- [DELETE /accounts/{account_id}/cni/interconnects/{icon}](operations/delete_interconnect.yaml): Delete an interconnect object
- [GET /accounts/{account_id}/cni/interconnects/{icon}/loa](operations/get_interconnect_loa.yaml): Generate the Letter of Authorization (LOA) for a given interconnect
- [GET /accounts/{account_id}/cni/interconnects/{icon}/status](operations/get_interconnect_status.yaml): Get the current status of an interconnect object

## Keyless SSL for a Zone

- [Keyless SSL for a Zone operations](tags/keyless_ssl_for_a_zone.yaml) All 'Keyless SSL for a Zone' operations in one file
- [GET /zones/{zone_id}/keyless_certificates](operations/keyless_ssl_for_a_zone_list_keyless_ssl_configurations.yaml): List Keyless SSL Configurations
- [POST /zones/{zone_id}/keyless_certificates](operations/keyless_ssl_for_a_zone_create_keyless_ssl_configuration.yaml): Create Keyless SSL Configuration
- [GET /zones/{zone_id}/keyless_certificates/{keyless_certificate_id}](operations/keyless_ssl_for_a_zone_get_keyless_ssl_configuration.yaml): Get Keyless SSL Configuration
- [PATCH /zones/{zone_id}/keyless_certificates/{keyless_certificate_id}](operations/keyless_ssl_for_a_zone_edit_keyless_ssl_configuration.yaml): Edit Keyless SSL Configuration
- [DELETE /zones/{zone_id}/keyless_certificates/{keyless_certificate_id}](operations/keyless_ssl_for_a_zone_delete_keyless_ssl_configuration.yaml): Delete Keyless SSL Configuration

## Keys

- [Keys operations](tags/keys.yaml) All 'Keys' operations in one file
- [POST /accounts/{account_id}/workers/observability/telemetry/keys](operations/telemetry_keys_list.yaml): List keys

## Leaked Credential Checks

- [Leaked Credential Checks operations](tags/leaked_credential_checks.yaml) All 'Leaked Credential Checks' operations in one file
- [GET /zones/{zone_id}/leaked-credential-checks](operations/waf_product_api_leaked_credentials_get_status.yaml): Get Leaked Credential Checks Status
- [POST /zones/{zone_id}/leaked-credential-checks](operations/waf_product_api_leaked_credentials_set_status.yaml): Set Leaked Credential Checks Status
- [GET /zones/{zone_id}/leaked-credential-checks/detections](operations/waf_product_api_leaked_credentials_list_detections.yaml): List Leaked Credential Checks Custom Detections
- [POST /zones/{zone_id}/leaked-credential-checks/detections](operations/waf_product_api_leaked_credentials_create_detection.yaml): Create Leaked Credential Checks Custom Detection
- [PUT /zones/{zone_id}/leaked-credential-checks/detections/{detection_id}](operations/waf_product_api_leaked_credentials_update_detection.yaml): Update Leaked Credential Checks Custom Detection
- [DELETE /zones/{zone_id}/leaked-credential-checks/detections/{detection_id}](operations/waf_product_api_leaked_credentials_delete_detection.yaml): Delete Leaked Credential Checks Custom Detection

## Lists

- [Lists operations](tags/lists.yaml) All 'Lists' operations in one file
- [GET /accounts/{account_id}/rules/lists](operations/lists_get_lists.yaml): Get lists
- [POST /accounts/{account_id}/rules/lists](operations/lists_create_a_list.yaml): Create a list
- [GET /accounts/{account_id}/rules/lists/bulk_operations/{operation_id}](operations/lists_get_bulk_operation_status.yaml): Get bulk operation status
- [GET /accounts/{account_id}/rules/lists/{list_id}](operations/lists_get_a_list.yaml): Get a list
- [PUT /accounts/{account_id}/rules/lists/{list_id}](operations/lists_update_a_list.yaml): Update a list
- [DELETE /accounts/{account_id}/rules/lists/{list_id}](operations/lists_delete_a_list.yaml): Delete a list
- [GET /accounts/{account_id}/rules/lists/{list_id}/items](operations/lists_get_list_items.yaml): Get list items
- [POST /accounts/{account_id}/rules/lists/{list_id}/items](operations/lists_create_list_items.yaml): Create list items
- [PUT /accounts/{account_id}/rules/lists/{list_id}/items](operations/lists_update_all_list_items.yaml): Update all list items
- [DELETE /accounts/{account_id}/rules/lists/{list_id}/items](operations/lists_delete_list_items.yaml): Delete list items
- [GET /accounts/{account_id}/rules/lists/{list_id}/items/{item_id}](operations/lists_get_a_list_item.yaml): Get a list item

## Load Balancer Healthcheck Events

- [Load Balancer Healthcheck Events operations](tags/load_balancer_healthcheck_events.yaml) All 'Load Balancer Healthcheck Events' operations in one file
- [GET /user/load_balancing_analytics/events](operations/load_balancer_healthcheck_events_list_healthcheck_events.yaml): List Healthcheck Events

## Load Balancer Monitors

- [Load Balancer Monitors operations](tags/load_balancer_monitors.yaml) All 'Load Balancer Monitors' operations in one file
- [GET /user/load_balancers/monitors](operations/load_balancer_monitors_list_monitors.yaml): List Monitors
- [POST /user/load_balancers/monitors](operations/load_balancer_monitors_create_monitor.yaml): Create Monitor
- [GET /user/load_balancers/monitors/{monitor_id}](operations/load_balancer_monitors_monitor_details.yaml): Monitor Details
- [PUT /user/load_balancers/monitors/{monitor_id}](operations/load_balancer_monitors_update_monitor.yaml): Update Monitor
- [PATCH /user/load_balancers/monitors/{monitor_id}](operations/load_balancer_monitors_patch_monitor.yaml): Patch Monitor
- [DELETE /user/load_balancers/monitors/{monitor_id}](operations/load_balancer_monitors_delete_monitor.yaml): Delete Monitor
- [POST /user/load_balancers/monitors/{monitor_id}/preview](operations/load_balancer_monitors_preview_monitor.yaml): Preview Monitor
- [GET /user/load_balancers/monitors/{monitor_id}/references](operations/load_balancer_monitors_list_monitor_references.yaml): List Monitor References
- [GET /user/load_balancers/preview/{preview_id}](operations/load_balancer_monitors_preview_result.yaml): Preview Result

## Load Balancer Pools

- [Load Balancer Pools operations](tags/load_balancer_pools.yaml) All 'Load Balancer Pools' operations in one file
- [GET /user/load_balancers/pools](operations/load_balancer_pools_list_pools.yaml): List Pools
- [POST /user/load_balancers/pools](operations/load_balancer_pools_create_pool.yaml): Create Pool
- [PATCH /user/load_balancers/pools](operations/load_balancer_pools_patch_pools.yaml): Patch Pools
- [GET /user/load_balancers/pools/{pool_id}](operations/load_balancer_pools_pool_details.yaml): Pool Details
- [PUT /user/load_balancers/pools/{pool_id}](operations/load_balancer_pools_update_pool.yaml): Update Pool
- [PATCH /user/load_balancers/pools/{pool_id}](operations/load_balancer_pools_patch_pool.yaml): Patch Pool
- [DELETE /user/load_balancers/pools/{pool_id}](operations/load_balancer_pools_delete_pool.yaml): Delete Pool
- [GET /user/load_balancers/pools/{pool_id}/health](operations/load_balancer_pools_pool_health_details.yaml): Pool Health Details
- [POST /user/load_balancers/pools/{pool_id}/preview](operations/load_balancer_pools_preview_pool.yaml): Preview Pool
- [GET /user/load_balancers/pools/{pool_id}/references](operations/load_balancer_pools_list_pool_references.yaml): List Pool References

## Load Balancer Regions

- [Load Balancer Regions operations](tags/load_balancer_regions.yaml) All 'Load Balancer Regions' operations in one file
- [GET /accounts/{account_id}/load_balancers/regions](operations/load_balancer_regions_list_regions.yaml): List Regions
- [GET /accounts/{account_id}/load_balancers/regions/{region_id}](operations/load_balancer_regions_get_region.yaml): Get Region

## Load Balancers

- [Load Balancers operations](tags/load_balancers.yaml) All 'Load Balancers' operations in one file
- [GET /zones/{zone_id}/load_balancers](operations/load_balancers_list_load_balancers.yaml): List Load Balancers
- [POST /zones/{zone_id}/load_balancers](operations/load_balancers_create_load_balancer.yaml): Create Load Balancer
- [GET /zones/{zone_id}/load_balancers/{load_balancer_id}](operations/load_balancers_load_balancer_details.yaml): Load Balancer Details
- [PUT /zones/{zone_id}/load_balancers/{load_balancer_id}](operations/load_balancers_update_load_balancer.yaml): Update Load Balancer
- [PATCH /zones/{zone_id}/load_balancers/{load_balancer_id}](operations/load_balancers_patch_load_balancer.yaml): Patch Load Balancer
- [DELETE /zones/{zone_id}/load_balancers/{load_balancer_id}](operations/load_balancers_delete_load_balancer.yaml): Delete Load Balancer

## Logcontrol CMB config for an account

- [Logcontrol CMB config for an account operations](tags/logcontrol_cmb_config_for_an_account.yaml) All 'Logcontrol CMB config for an account' operations in one file
- [GET /accounts/{account_id}/logs/control/cmb/config](operations/get_accounts_account_id_logs_control_cmb_config.yaml): Get CMB config
- [POST /accounts/{account_id}/logs/control/cmb/config](operations/post_accounts_account_id_logs_control_cmb_config.yaml): Update CMB config
- [DELETE /accounts/{account_id}/logs/control/cmb/config](operations/delete_accounts_account_id_logs_control_cmb_config.yaml): Delete CMB config

## Logpush jobs for a zone

- [Logpush jobs for a zone operations](tags/logpush_jobs_for_a_zone.yaml) All 'Logpush jobs for a zone' operations in one file
- [GET /zones/{zone_id}/logpush/datasets/{dataset_id}/fields](operations/get_zones_zone_id_logpush_datasets_dataset_id_fields.yaml): List fields
- [GET /zones/{zone_id}/logpush/datasets/{dataset_id}/jobs](operations/get_zones_zone_id_logpush_datasets_dataset_id_jobs.yaml): List Logpush jobs for a dataset
- [GET /zones/{zone_id}/logpush/jobs](operations/get_zones_zone_id_logpush_jobs.yaml): List Logpush jobs
- [POST /zones/{zone_id}/logpush/jobs](operations/post_zones_zone_id_logpush_jobs.yaml): Create Logpush job
- [GET /zones/{zone_id}/logpush/jobs/{job_id}](operations/get_zones_zone_id_logpush_jobs_job_id.yaml): Get Logpush job details
- [PUT /zones/{zone_id}/logpush/jobs/{job_id}](operations/put_zones_zone_id_logpush_jobs_job_id.yaml): Update Logpush job
- [DELETE /zones/{zone_id}/logpush/jobs/{job_id}](operations/delete_zones_zone_id_logpush_jobs_job_id.yaml): Delete Logpush job
- [POST /zones/{zone_id}/logpush/ownership](operations/post_zones_zone_id_logpush_ownership.yaml): Get ownership challenge
- [POST /zones/{zone_id}/logpush/ownership/validate](operations/post_zones_zone_id_logpush_ownership_validate.yaml): Validate ownership challenge
- [POST /zones/{zone_id}/logpush/validate/destination](operations/post_zones_zone_id_logpush_validate_destination.yaml): Validate destination
- [POST /zones/{zone_id}/logpush/validate/destination/exists](operations/post_zones_zone_id_logpush_validate_destination_exists.yaml): Check destination exists
- [POST /zones/{zone_id}/logpush/validate/origin](operations/post_zones_zone_id_logpush_validate_origin.yaml): Validate origin

## Logpush jobs for an account

- [Logpush jobs for an account operations](tags/logpush_jobs_for_an_account.yaml) All 'Logpush jobs for an account' operations in one file
- [GET /accounts/{account_id}/logpush/datasets/{dataset_id}/fields](operations/get_accounts_account_id_logpush_datasets_dataset_id_fields.yaml): List fields
- [GET /accounts/{account_id}/logpush/datasets/{dataset_id}/jobs](operations/get_accounts_account_id_logpush_datasets_dataset_id_jobs.yaml): List Logpush jobs for a dataset
- [GET /accounts/{account_id}/logpush/jobs](operations/get_accounts_account_id_logpush_jobs.yaml): List Logpush jobs
- [POST /accounts/{account_id}/logpush/jobs](operations/post_accounts_account_id_logpush_jobs.yaml): Create Logpush job
- [GET /accounts/{account_id}/logpush/jobs/{job_id}](operations/get_accounts_account_id_logpush_jobs_job_id.yaml): Get Logpush job details
- [PUT /accounts/{account_id}/logpush/jobs/{job_id}](operations/put_accounts_account_id_logpush_jobs_job_id.yaml): Update Logpush job
- [DELETE /accounts/{account_id}/logpush/jobs/{job_id}](operations/delete_accounts_account_id_logpush_jobs_job_id.yaml): Delete Logpush job
- [POST /accounts/{account_id}/logpush/ownership](operations/post_accounts_account_id_logpush_ownership.yaml): Get ownership challenge
- [POST /accounts/{account_id}/logpush/ownership/validate](operations/post_accounts_account_id_logpush_ownership_validate.yaml): Validate ownership challenge
- [POST /accounts/{account_id}/logpush/validate/destination](operations/delete_accounts_account_id_logpush_validate_destination.yaml): Validate destination
- [POST /accounts/{account_id}/logpush/validate/destination/exists](operations/delete_accounts_account_id_logpush_validate_destination_exists.yaml): Check destination exists
- [POST /accounts/{account_id}/logpush/validate/origin](operations/post_accounts_account_id_logpush_validate_origin.yaml): Validate origin

## Logs Received

- [Logs Received operations](tags/logs_received.yaml) All 'Logs Received' operations in one file
- [GET /zones/{zone_id}/logs/control/retention/flag](operations/get_zones_zone_id_logs_control_retention_flag.yaml): Get log retention flag
- [POST /zones/{zone_id}/logs/control/retention/flag](operations/post_zones_zone_id_logs_control_retention_flag.yaml): Update log retention flag
- [GET /zones/{zone_id}/logs/rayids/{ray_id}](operations/get_zones_zone_id_logs_rayids_ray_id.yaml): Get logs RayIDs
- [GET /zones/{zone_id}/logs/received](operations/get_zones_zone_id_logs_received.yaml): Get logs received
- [GET /zones/{zone_id}/logs/received/fields](operations/get_zones_zone_id_logs_received_fields.yaml): List fields

## Magic Account Apps

- [Magic Account Apps operations](tags/magic_account_apps.yaml) All 'Magic Account Apps' operations in one file
- [GET /accounts/{account_id}/magic/apps](operations/magic_account_apps_list_apps.yaml): List Apps
- [POST /accounts/{account_id}/magic/apps](operations/magic_account_apps_add_app.yaml): Create a new App
- [PUT /accounts/{account_id}/magic/apps/{account_app_id}](operations/magic_account_apps_update_app.yaml): Update an App
- [PATCH /accounts/{account_id}/magic/apps/{account_app_id}](operations/magic_account_apps_patch_app.yaml): Update an App
- [DELETE /accounts/{account_id}/magic/apps/{account_app_id}](operations/magic_account_apps_delete_app.yaml): Delete Account App

## Magic Connectors

- [Magic Connectors operations](tags/magic_connectors.yaml) All 'Magic Connectors' operations in one file
- [GET /accounts/{account_id}/magic/connectors](operations/mconn_connector_list.yaml): List Connectors
- [POST /accounts/{account_id}/magic/connectors](operations/mconn_connector_create.yaml): Add a connector to your account
- [GET /accounts/{account_id}/magic/connectors/{connector_id}](operations/mconn_connector_fetch.yaml): Fetch Connector
- [PUT /accounts/{account_id}/magic/connectors/{connector_id}](operations/mconn_connector_replace.yaml): Replace Connector
- [PATCH /accounts/{account_id}/magic/connectors/{connector_id}](operations/mconn_connector_update.yaml): Edit Connector to update specific properties
- [DELETE /accounts/{account_id}/magic/connectors/{connector_id}](operations/mconn_connector_delete.yaml): Remove a connector from your account
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/events](operations/mconn_connector_telemetry_events_list.yaml): List Events
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/events/latest](operations/mconn_connector_telemetry_events_listlatest.yaml): Get latest Events
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/events/{event_t}.{event_n}](operations/mconn_connector_telemetry_events_get.yaml): Get Event
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/snapshots](operations/mconn_connector_telemetry_snapshots_list.yaml): List Snapshots
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/snapshots/latest](operations/mconn_connector_telemetry_snapshots_listlatest.yaml): Get latest Snapshots
- [GET /accounts/{account_id}/magic/connectors/{connector_id}/telemetry/snapshots/{snapshot_t}](operations/mconn_connector_telemetry_snapshots_get.yaml): Get Snapshot

## Magic GRE tunnels

- [Magic GRE tunnels operations](tags/magic_gre_tunnels.yaml) All 'Magic GRE tunnels' operations in one file
- [GET /accounts/{account_id}/magic/gre_tunnels](operations/magic_gre_tunnels_list_gre_tunnels.yaml): List GRE tunnels
- [POST /accounts/{account_id}/magic/gre_tunnels](operations/magic_gre_tunnels_create_gre_tunnels.yaml): Create a GRE tunnel
- [PUT /accounts/{account_id}/magic/gre_tunnels](operations/magic_gre_tunnels_update_multiple_gre_tunnels.yaml): Update multiple GRE tunnels
- [GET /accounts/{account_id}/magic/gre_tunnels/{gre_tunnel_id}](operations/magic_gre_tunnels_list_gre_tunnel_details.yaml): List GRE Tunnel Details
- [PUT /accounts/{account_id}/magic/gre_tunnels/{gre_tunnel_id}](operations/magic_gre_tunnels_update_gre_tunnel.yaml): Update GRE Tunnel
- [DELETE /accounts/{account_id}/magic/gre_tunnels/{gre_tunnel_id}](operations/magic_gre_tunnels_delete_gre_tunnel.yaml): Delete GRE Tunnel

## Magic IPsec tunnels

- [Magic IPsec tunnels operations](tags/magic_ipsec_tunnels.yaml) All 'Magic IPsec tunnels' operations in one file
- [GET /accounts/{account_id}/magic/ipsec_tunnels](operations/magic_ipsec_tunnels_list_ipsec_tunnels.yaml): List IPsec tunnels
- [POST /accounts/{account_id}/magic/ipsec_tunnels](operations/magic_ipsec_tunnels_create_ipsec_tunnels.yaml): Create an IPsec tunnel
- [PUT /accounts/{account_id}/magic/ipsec_tunnels](operations/magic_ipsec_tunnels_update_multiple_ipsec_tunnels.yaml): Update multiple IPsec tunnels
- [GET /accounts/{account_id}/magic/ipsec_tunnels/{ipsec_tunnel_id}](operations/magic_ipsec_tunnels_list_ipsec_tunnel_details.yaml): List IPsec tunnel details
- [PUT /accounts/{account_id}/magic/ipsec_tunnels/{ipsec_tunnel_id}](operations/magic_ipsec_tunnels_update_ipsec_tunnel.yaml): Update IPsec Tunnel
- [DELETE /accounts/{account_id}/magic/ipsec_tunnels/{ipsec_tunnel_id}](operations/magic_ipsec_tunnels_delete_ipsec_tunnel.yaml): Delete IPsec Tunnel
- [POST /accounts/{account_id}/magic/ipsec_tunnels/{ipsec_tunnel_id}/psk_generate](operations/magic_ipsec_tunnels_generate_pre_shared_key_psk_for_ipsec_tunnels.yaml): Generate Pre Shared Key (PSK) for IPsec tunnels

## Magic Interconnects

- [Magic Interconnects operations](tags/magic_interconnects.yaml) All 'Magic Interconnects' operations in one file
- [GET /accounts/{account_id}/magic/cf_interconnects](operations/magic_interconnects_list_interconnects.yaml): List interconnects
- [PUT /accounts/{account_id}/magic/cf_interconnects](operations/magic_interconnects_update_multiple_interconnects.yaml): Update multiple interconnects
- [GET /accounts/{account_id}/magic/cf_interconnects/{cf_interconnect_id}](operations/magic_interconnects_list_interconnect_details.yaml): List interconnect Details
- [PUT /accounts/{account_id}/magic/cf_interconnects/{cf_interconnect_id}](operations/magic_interconnects_update_interconnect.yaml): Update interconnect

## Magic Network Monitoring Configuration

- [Magic Network Monitoring Configuration operations](tags/magic_network_monitoring_configuration.yaml) All 'Magic Network Monitoring Configuration' operations in one file
- [GET /accounts/{account_id}/mnm/config](operations/magic_network_monitoring_configuration_list_account_configuration.yaml): List account configuration
- [POST /accounts/{account_id}/mnm/config](operations/magic_network_monitoring_configuration_create_account_configuration.yaml): Create account configuration
- [PUT /accounts/{account_id}/mnm/config](operations/magic_network_monitoring_configuration_update_an_entire_account_configuration.yaml): Update an entire account configuration
- [PATCH /accounts/{account_id}/mnm/config](operations/magic_network_monitoring_configuration_update_account_configuration_fields.yaml): Update account configuration fields
- [DELETE /accounts/{account_id}/mnm/config](operations/magic_network_monitoring_configuration_delete_account_configuration.yaml): Delete account configuration
- [GET /accounts/{account_id}/mnm/config/full](operations/magic_network_monitoring_configuration_list_rules_and_account_configuration.yaml): List rules and account configuration

## Magic Network Monitoring Rules

- [Magic Network Monitoring Rules operations](tags/magic_network_monitoring_rules.yaml) All 'Magic Network Monitoring Rules' operations in one file
- [GET /accounts/{account_id}/mnm/rules](operations/magic_network_monitoring_rules_list_rules.yaml): List rules
- [POST /accounts/{account_id}/mnm/rules](operations/magic_network_monitoring_rules_create_rules.yaml): Create rules
- [PUT /accounts/{account_id}/mnm/rules](operations/magic_network_monitoring_rules_update_rules.yaml): Update rules
- [GET /accounts/{account_id}/mnm/rules/{rule_id}](operations/magic_network_monitoring_rules_get_rule.yaml): Get rule
- [PATCH /accounts/{account_id}/mnm/rules/{rule_id}](operations/magic_network_monitoring_rules_update_rule.yaml): Update rule
- [DELETE /accounts/{account_id}/mnm/rules/{rule_id}](operations/magic_network_monitoring_rules_delete_rule.yaml): Delete rule
- [PATCH /accounts/{account_id}/mnm/rules/{rule_id}/advertisement](operations/magic_network_monitoring_rules_update_advertisement_for_rule.yaml): Update advertisement for rule

## Magic Network Monitoring VPC Flow logs

- [Magic Network Monitoring VPC Flow logs operations](tags/magic_network_monitoring_vpc_flow_logs.yaml) All 'Magic Network Monitoring VPC Flow logs' operations in one file
- [POST /accounts/{account_id}/mnm/vpc-flows/token](operations/magic_network_monitoring_vpc_flows_generate_authentication_token.yaml): Generate authentication token for VPC flow logs export.

## Magic PCAP collection

- [Magic PCAP collection operations](tags/magic_pcap_collection.yaml) All 'Magic PCAP collection' operations in one file
- [GET /accounts/{account_id}/pcaps](operations/magic_pcap_collection_list_packet_capture_requests.yaml): List packet capture requests
- [POST /accounts/{account_id}/pcaps](operations/magic_pcap_collection_create_pcap_request.yaml): Create PCAP request
- [GET /accounts/{account_id}/pcaps/ownership](operations/magic_pcap_collection_list_pca_ps_bucket_ownership.yaml): List PCAPs Bucket Ownership
- [POST /accounts/{account_id}/pcaps/ownership](operations/magic_pcap_collection_add_buckets_for_full_packet_captures.yaml): Add buckets for full packet captures
- [POST /accounts/{account_id}/pcaps/ownership/validate](operations/magic_pcap_collection_validate_buckets_for_full_packet_captures.yaml): Validate buckets for full packet captures
- [DELETE /accounts/{account_id}/pcaps/ownership/{ownership_id}](operations/magic_pcap_collection_delete_buckets_for_full_packet_captures.yaml): Delete buckets for full packet captures
- [GET /accounts/{account_id}/pcaps/{pcap_id}](operations/magic_pcap_collection_get_pcap_request.yaml): Get PCAP request
- [GET /accounts/{account_id}/pcaps/{pcap_id}/download](operations/magic_pcap_collection_download_simple_pcap.yaml): Download Simple PCAP
- [PUT /accounts/{account_id}/pcaps/{pcap_id}/stop](operations/magic_pcap_collection_stop_full_pcap.yaml): Stop full PCAP

## Magic Site ACLs

- [Magic Site ACLs operations](tags/magic_site_acls.yaml) All 'Magic Site ACLs' operations in one file
- [GET /accounts/{account_id}/magic/sites/{site_id}/acls](operations/magic_site_acls_list_acls.yaml): List Site ACLs
- [POST /accounts/{account_id}/magic/sites/{site_id}/acls](operations/magic_site_acls_create_acl.yaml): Create a new Site ACL
- [GET /accounts/{account_id}/magic/sites/{site_id}/acls/{acl_id}](operations/magic_site_acls_acl_details.yaml): Site ACL Details
- [PUT /accounts/{account_id}/magic/sites/{site_id}/acls/{acl_id}](operations/magic_site_acls_update_acl.yaml): Update Site ACL
- [PATCH /accounts/{account_id}/magic/sites/{site_id}/acls/{acl_id}](operations/magic_site_acls_patch_acl.yaml): Patch Site ACL
- [DELETE /accounts/{account_id}/magic/sites/{site_id}/acls/{acl_id}](operations/magic_site_acls_delete_acl.yaml): Delete Site ACL

## Magic Site App Configs

- [Magic Site App Configs operations](tags/magic_site_app_configs.yaml) All 'Magic Site App Configs' operations in one file
- [GET /accounts/{account_id}/magic/sites/{site_id}/app_configs](operations/magic_site_app_configs_list_app_configs.yaml): List App Configs
- [POST /accounts/{account_id}/magic/sites/{site_id}/app_configs](operations/magic_site_app_configs_add_app_config.yaml): Create a new App Config
- [PUT /accounts/{account_id}/magic/sites/{site_id}/app_configs/{app_config_id}](operations/magic_site_app_configs_update_app_config.yaml): Update an App Config
- [PATCH /accounts/{account_id}/magic/sites/{site_id}/app_configs/{app_config_id}](operations/magic_site_app_configs_patch_app_config.yaml): Update an App Config
- [DELETE /accounts/{account_id}/magic/sites/{site_id}/app_configs/{app_config_id}](operations/magic_site_app_configs_delete_app_config.yaml): Delete App Config

## Magic Site LANs

- [Magic Site LANs operations](tags/magic_site_lans.yaml) All 'Magic Site LANs' operations in one file
- [GET /accounts/{account_id}/magic/sites/{site_id}/lans](operations/magic_site_lans_list_lans.yaml): List Site LANs
- [POST /accounts/{account_id}/magic/sites/{site_id}/lans](operations/magic_site_lans_create_lan.yaml): Create a new Site LAN
- [GET /accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}](operations/magic_site_lans_lan_details.yaml): Site LAN Details
- [PUT /accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}](operations/magic_site_lans_update_lan.yaml): Update Site LAN
- [PATCH /accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}](operations/magic_site_lans_patch_lan.yaml): Patch Site LAN
- [DELETE /accounts/{account_id}/magic/sites/{site_id}/lans/{lan_id}](operations/magic_site_lans_delete_lan.yaml): Delete Site LAN

## Magic Site WANs

- [Magic Site WANs operations](tags/magic_site_wans.yaml) All 'Magic Site WANs' operations in one file
- [GET /accounts/{account_id}/magic/sites/{site_id}/wans](operations/magic_site_wans_list_wans.yaml): List Site WANs
- [POST /accounts/{account_id}/magic/sites/{site_id}/wans](operations/magic_site_wans_create_wan.yaml): Create a new Site WAN
- [GET /accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}](operations/magic_site_wans_wan_details.yaml): Site WAN Details
- [PUT /accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}](operations/magic_site_wans_update_wan.yaml): Update Site WAN
- [PATCH /accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}](operations/magic_site_wans_patch_wan.yaml): Patch Site WAN
- [DELETE /accounts/{account_id}/magic/sites/{site_id}/wans/{wan_id}](operations/magic_site_wans_delete_wan.yaml): Delete Site WAN

## Magic Sites

- [Magic Sites operations](tags/magic_sites.yaml) All 'Magic Sites' operations in one file
- [GET /accounts/{account_id}/magic/sites](operations/magic_sites_list_sites.yaml): List Sites
- [POST /accounts/{account_id}/magic/sites](operations/magic_sites_create_site.yaml): Create a new Site
- [GET /accounts/{account_id}/magic/sites/{site_id}](operations/magic_sites_site_details.yaml): Site Details
- [PUT /accounts/{account_id}/magic/sites/{site_id}](operations/magic_sites_update_site.yaml): Update Site
- [PATCH /accounts/{account_id}/magic/sites/{site_id}](operations/magic_sites_patch_site.yaml): Patch Site
- [DELETE /accounts/{account_id}/magic/sites/{site_id}](operations/magic_sites_delete_site.yaml): Delete Site

## Magic Static Routes

- [Magic Static Routes operations](tags/magic_static_routes.yaml) All 'Magic Static Routes' operations in one file
- [GET /accounts/{account_id}/magic/routes](operations/magic_static_routes_list_routes.yaml): List Routes
- [POST /accounts/{account_id}/magic/routes](operations/magic_static_routes_create_routes.yaml): Create a Route
- [PUT /accounts/{account_id}/magic/routes](operations/magic_static_routes_update_many_routes.yaml): Update Many Routes
- [DELETE /accounts/{account_id}/magic/routes](operations/magic_static_routes_delete_many_routes.yaml): Delete Many Routes
- [GET /accounts/{account_id}/magic/routes/{route_id}](operations/magic_static_routes_route_details.yaml): Route Details
- [PUT /accounts/{account_id}/magic/routes/{route_id}](operations/magic_static_routes_update_route.yaml): Update Route
- [DELETE /accounts/{account_id}/magic/routes/{route_id}](operations/magic_static_routes_delete_route.yaml): Delete Route

## Managed Transforms

- [Managed Transforms operations](tags/managed_transforms.yaml) All 'Managed Transforms' operations in one file
- [GET /zones/{zone_id}/managed_headers](operations/listmanagedtransforms.yaml): List Managed Transforms
- [PATCH /zones/{zone_id}/managed_headers](operations/updatemanagedtransforms.yaml): Update Managed Transforms
- [DELETE /zones/{zone_id}/managed_headers](operations/deletemanagedtransforms.yaml): Delete Managed Transforms

## Miscategorization

- [Miscategorization operations](tags/miscategorization.yaml) All 'Miscategorization' operations in one file
- [POST /accounts/{account_id}/intel/miscategorization](operations/miscategorization_create_miscategorization.yaml): Create Miscategorization

## Notification Alert Types

- [Notification Alert Types operations](tags/notification_alert_types.yaml) All 'Notification Alert Types' operations in one file
- [GET /accounts/{account_id}/alerting/v3/available_alerts](operations/notification_alert_types_get_alert_types.yaml): Get Alert Types

## Notification History

- [Notification History operations](tags/notification_history.yaml) All 'Notification History' operations in one file
- [GET /accounts/{account_id}/alerting/v3/history](operations/notification_history_list_history.yaml): List History

## Notification Mechanism Eligibility

- [Notification Mechanism Eligibility operations](tags/notification_mechanism_eligibility.yaml) All 'Notification Mechanism Eligibility' operations in one file
- [GET /accounts/{account_id}/alerting/v3/destinations/eligible](operations/notification_mechanism_eligibility_get_delivery_mechanism_eligibility.yaml): Get delivery mechanism eligibility

## Notification destinations with PagerDuty

- [Notification destinations with PagerDuty operations](tags/notification_destinations_with_pagerduty.yaml) All 'Notification destinations with PagerDuty' operations in one file
- [GET /accounts/{account_id}/alerting/v3/destinations/pagerduty](operations/notification_destinations_with_pager_duty_list_pager_duty_services.yaml): List PagerDuty services
- [DELETE /accounts/{account_id}/alerting/v3/destinations/pagerduty](operations/notification_destinations_with_pager_duty_delete_pager_duty_services.yaml): Delete PagerDuty Services
- [POST /accounts/{account_id}/alerting/v3/destinations/pagerduty/connect](operations/notification_destinations_with_pager_duty_connect_pager_duty.yaml): Create PagerDuty integration token
- [GET /accounts/{account_id}/alerting/v3/destinations/pagerduty/connect/{token_id}](operations/notification_destinations_with_pager_duty_connect_pager_duty_token.yaml): Connect PagerDuty

## Notification policies

- [Notification policies operations](tags/notification_policies.yaml) All 'Notification policies' operations in one file
- [GET /accounts/{account_id}/alerting/v3/policies](operations/notification_policies_list_notification_policies.yaml): List Notification policies
- [POST /accounts/{account_id}/alerting/v3/policies](operations/notification_policies_create_a_notification_policy.yaml): Create a Notification policy
- [GET /accounts/{account_id}/alerting/v3/policies/{policy_id}](operations/notification_policies_get_a_notification_policy.yaml): Get a Notification policy
- [PUT /accounts/{account_id}/alerting/v3/policies/{policy_id}](operations/notification_policies_update_a_notification_policy.yaml): Update a Notification policy
- [DELETE /accounts/{account_id}/alerting/v3/policies/{policy_id}](operations/notification_policies_delete_a_notification_policy.yaml): Delete a Notification policy

## Notification webhooks

- [Notification webhooks operations](tags/notification_webhooks.yaml) All 'Notification webhooks' operations in one file
- [GET /accounts/{account_id}/alerting/v3/destinations/webhooks](operations/notification_webhooks_list_webhooks.yaml): List webhooks
- [POST /accounts/{account_id}/alerting/v3/destinations/webhooks](operations/notification_webhooks_create_a_webhook.yaml): Create a webhook
- [GET /accounts/{account_id}/alerting/v3/destinations/webhooks/{webhook_id}](operations/notification_webhooks_get_a_webhook.yaml): Get a webhook
- [PUT /accounts/{account_id}/alerting/v3/destinations/webhooks/{webhook_id}](operations/notification_webhooks_update_a_webhook.yaml): Update a webhook
- [DELETE /accounts/{account_id}/alerting/v3/destinations/webhooks/{webhook_id}](operations/notification_webhooks_delete_a_webhook.yaml): Delete a webhook

## Observatory

- [Observatory operations](tags/observatory.yaml) All 'Observatory' operations in one file
- [GET /zones/{zone_id}/speed_api/availabilities](operations/speed_get_availabilities.yaml): Get quota and availability
- [GET /zones/{zone_id}/speed_api/pages](operations/speed_list_pages.yaml): List tested webpages
- [GET /zones/{zone_id}/speed_api/pages/{url}/tests](operations/speed_list_test_history.yaml): List page test history
- [POST /zones/{zone_id}/speed_api/pages/{url}/tests](operations/speed_create_test.yaml): Start page test
- [DELETE /zones/{zone_id}/speed_api/pages/{url}/tests](operations/speed_delete_tests.yaml): Delete all page tests
- [GET /zones/{zone_id}/speed_api/pages/{url}/tests/{test_id}](operations/speed_get_test.yaml): Get a page test result
- [GET /zones/{zone_id}/speed_api/pages/{url}/trend](operations/speed_list_page_trend.yaml): List core web vital metrics trend
- [GET /zones/{zone_id}/speed_api/schedule/{url}](operations/speed_get_scheduled_test.yaml): Get a page test schedule
- [POST /zones/{zone_id}/speed_api/schedule/{url}](operations/speed_create_scheduled_test.yaml): Create scheduled page test
- [DELETE /zones/{zone_id}/speed_api/schedule/{url}](operations/speed_delete_test_schedule.yaml): Delete scheduled page test

## On-ramps

- [On-ramps operations](tags/on_ramps.yaml) All 'On-ramps' operations in one file
- [GET /accounts/{account_id}/magic/cloud/onramps](operations/onramps_list.yaml): List On-ramps
- [POST /accounts/{account_id}/magic/cloud/onramps](operations/onramps_create.yaml): Create On-ramp
- [GET /accounts/{account_id}/magic/cloud/onramps/magic_wan_address_space](operations/onramps_mwan_addr_space_read.yaml): Read Magic WAN Address Space
- [PUT /accounts/{account_id}/magic/cloud/onramps/magic_wan_address_space](operations/onramps_mwan_addr_space_update.yaml): Update Magic WAN Address Space
- [PATCH /accounts/{account_id}/magic/cloud/onramps/magic_wan_address_space](operations/onramps_mwan_addr_space_patch.yaml): Patch Magic WAN Address Space
- [GET /accounts/{account_id}/magic/cloud/onramps/{onramp_id}](operations/onramps_read.yaml): Read On-ramp
- [PUT /accounts/{account_id}/magic/cloud/onramps/{onramp_id}](operations/onramps_update.yaml): Update On-ramp
- [PATCH /accounts/{account_id}/magic/cloud/onramps/{onramp_id}](operations/onramps_patch.yaml): Patch On-ramp
- [DELETE /accounts/{account_id}/magic/cloud/onramps/{onramp_id}](operations/onramps_delete.yaml): Delete On-ramp
- [POST /accounts/{account_id}/magic/cloud/onramps/{onramp_id}/apply](operations/onramps_apply.yaml): Apply On-ramp
- [POST /accounts/{account_id}/magic/cloud/onramps/{onramp_id}/export](operations/onramps_export.yaml): Export as Terraform
- [POST /accounts/{account_id}/magic/cloud/onramps/{onramp_id}/plan](operations/onramps_plan.yaml): Plan On-ramp

## Origin CA

- [Origin CA operations](tags/origin_ca.yaml) All 'Origin CA' operations in one file
- [GET /certificates](operations/origin_ca_list_certificates.yaml): List Certificates
- [POST /certificates](operations/origin_ca_create_certificate.yaml): Create Certificate
- [GET /certificates/{certificate_id}](operations/origin_ca_get_certificate.yaml): Get Certificate
- [DELETE /certificates/{certificate_id}](operations/origin_ca_revoke_certificate.yaml): Revoke Certificate

## Origin Post-Quantum

- [Origin Post-Quantum operations](tags/origin_post_quantum.yaml) All 'Origin Post-Quantum' operations in one file
- [GET /zones/{zone_id}/cache/origin_post_quantum_encryption](operations/zone_cache_settings_get_origin_post_quantum_encryption_setting.yaml): Get Origin Post-Quantum Encryption setting
- [PUT /zones/{zone_id}/cache/origin_post_quantum_encryption](operations/zone_cache_settings_change_origin_post_quantum_encryption_setting.yaml): Change Origin Post-Quantum Encryption setting

## Page Rules

- [Page Rules operations](tags/page_rules.yaml) All 'Page Rules' operations in one file
- [GET /zones/{zone_id}/pagerules](operations/page_rules_list_page_rules.yaml): List Page Rules
- [POST /zones/{zone_id}/pagerules](operations/page_rules_create_a_page_rule.yaml): Create a Page Rule
- [GET /zones/{zone_id}/pagerules/{pagerule_id}](operations/page_rules_get_a_page_rule.yaml): Get a Page Rule
- [PUT /zones/{zone_id}/pagerules/{pagerule_id}](operations/page_rules_update_a_page_rule.yaml): Update a Page Rule
- [PATCH /zones/{zone_id}/pagerules/{pagerule_id}](operations/page_rules_edit_a_page_rule.yaml): Edit a Page Rule
- [DELETE /zones/{zone_id}/pagerules/{pagerule_id}](operations/page_rules_delete_a_page_rule.yaml): Delete a Page Rule

## Page Shield

- [Page Shield operations](tags/page_shield.yaml) All 'Page Shield' operations in one file
- [GET /zones/{zone_id}/page_shield](operations/page_shield_get_settings.yaml): Get Page Shield settings
- [PUT /zones/{zone_id}/page_shield](operations/page_shield_update_settings.yaml): Update Page Shield settings
- [GET /zones/{zone_id}/page_shield/connections](operations/page_shield_list_connections.yaml): List Page Shield connections
- [GET /zones/{zone_id}/page_shield/connections/{connection_id}](operations/page_shield_get_connection.yaml): Get a Page Shield connection
- [GET /zones/{zone_id}/page_shield/cookies](operations/page_shield_list_cookies.yaml): List Page Shield Cookies
- [GET /zones/{zone_id}/page_shield/cookies/{cookie_id}](operations/page_shield_get_cookie.yaml): Get a Page Shield cookie
- [GET /zones/{zone_id}/page_shield/policies](operations/page_shield_list_policies.yaml): List Page Shield policies
- [POST /zones/{zone_id}/page_shield/policies](operations/page_shield_create_policy.yaml): Create a Page Shield policy
- [GET /zones/{zone_id}/page_shield/policies/{policy_id}](operations/page_shield_get_policy.yaml): Get a Page Shield policy
- [PUT /zones/{zone_id}/page_shield/policies/{policy_id}](operations/page_shield_update_policy.yaml): Update a Page Shield policy
- [DELETE /zones/{zone_id}/page_shield/policies/{policy_id}](operations/page_shield_delete_policy.yaml): Delete a Page Shield policy
- [GET /zones/{zone_id}/page_shield/scripts](operations/page_shield_list_scripts.yaml): List Page Shield scripts
- [GET /zones/{zone_id}/page_shield/scripts/{script_id}](operations/page_shield_get_script.yaml): Get a Page Shield script

## Pages Build Cache

- [Pages Build Cache operations](tags/pages_build_cache.yaml) All 'Pages Build Cache' operations in one file
- [POST /accounts/{account_id}/pages/projects/{project_name}/purge_build_cache](operations/pages_purge_build_cache.yaml): Purge build cache

## Pages Deployment

- [Pages Deployment operations](tags/pages_deployment.yaml) All 'Pages Deployment' operations in one file
- [GET /accounts/{account_id}/pages/projects/{project_name}/deployments](operations/pages_deployment_get_deployments.yaml): Get deployments
- [POST /accounts/{account_id}/pages/projects/{project_name}/deployments](operations/pages_deployment_create_deployment.yaml): Create deployment
- [GET /accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}](operations/pages_deployment_get_deployment_info.yaml): Get deployment info
- [DELETE /accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}](operations/pages_deployment_delete_deployment.yaml): Delete deployment
- [GET /accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/history/logs](operations/pages_deployment_get_deployment_logs.yaml): Get deployment logs
- [POST /accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/retry](operations/pages_deployment_retry_deployment.yaml): Retry deployment
- [POST /accounts/{account_id}/pages/projects/{project_name}/deployments/{deployment_id}/rollback](operations/pages_deployment_rollback_deployment.yaml): Rollback deployment

## Pages Domains

- [Pages Domains operations](tags/pages_domains.yaml) All 'Pages Domains' operations in one file
- [GET /accounts/{account_id}/pages/projects/{project_name}/domains](operations/pages_domains_get_domains.yaml): Get domains
- [POST /accounts/{account_id}/pages/projects/{project_name}/domains](operations/pages_domains_add_domain.yaml): Add domain
- [GET /accounts/{account_id}/pages/projects/{project_name}/domains/{domain_name}](operations/pages_domains_get_domain.yaml): Get domain
- [PATCH /accounts/{account_id}/pages/projects/{project_name}/domains/{domain_name}](operations/pages_domains_patch_domain.yaml): Patch domain
- [DELETE /accounts/{account_id}/pages/projects/{project_name}/domains/{domain_name}](operations/pages_domains_delete_domain.yaml): Delete domain

## Pages Project

- [Pages Project operations](tags/pages_project.yaml) All 'Pages Project' operations in one file
- [GET /accounts/{account_id}/pages/projects](operations/pages_project_get_projects.yaml): Get projects
- [POST /accounts/{account_id}/pages/projects](operations/pages_project_create_project.yaml): Create project
- [GET /accounts/{account_id}/pages/projects/{project_name}](operations/pages_project_get_project.yaml): Get project
- [PATCH /accounts/{account_id}/pages/projects/{project_name}](operations/pages_project_update_project.yaml): Update project
- [DELETE /accounts/{account_id}/pages/projects/{project_name}](operations/pages_project_delete_project.yaml): Delete project

## Passive DNS by IP

- [Passive DNS by IP operations](tags/passive_dns_by_ip.yaml) All 'Passive DNS by IP' operations in one file
- [GET /accounts/{account_id}/intel/dns](operations/passive_dns_by_ip_get_passive_dns_by_ip.yaml): Get Passive DNS by IP

## Per-Hostname TLS Settings

- [Per-Hostname TLS Settings operations](tags/per_hostname_tls_settings.yaml) All 'Per-Hostname TLS Settings' operations in one file
- [GET /zones/{zone_id}/hostnames/settings/{setting_id}](operations/per_hostname_tls_settings_list.yaml): List TLS setting for hostnames
- [PUT /zones/{zone_id}/hostnames/settings/{setting_id}/{hostname}](operations/per_hostname_tls_settings_put.yaml): Edit TLS setting for hostname
- [DELETE /zones/{zone_id}/hostnames/settings/{setting_id}/{hostname}](operations/per_hostname_tls_settings_delete.yaml): Delete TLS setting for hostname

## Per-hostname Authenticated Origin Pull

- [Per-hostname Authenticated Origin Pull operations](tags/per_hostname_authenticated_origin_pull.yaml) All 'Per-hostname Authenticated Origin Pull' operations in one file
- [PUT /zones/{zone_id}/origin_tls_client_auth/hostnames](operations/per_hostname_authenticated_origin_pull_enable_or_disable_a_hostname_for_client_authentication.yaml): Enable or Disable a Hostname for Client Authentication
- [GET /zones/{zone_id}/origin_tls_client_auth/hostnames/certificates](operations/per_hostname_authenticated_origin_pull_list_certificates.yaml): List Certificates
- [POST /zones/{zone_id}/origin_tls_client_auth/hostnames/certificates](operations/per_hostname_authenticated_origin_pull_upload_a_hostname_client_certificate.yaml): Upload a Hostname Client Certificate
- [GET /zones/{zone_id}/origin_tls_client_auth/hostnames/certificates/{certificate_id}](operations/per_hostname_authenticated_origin_pull_get_the_hostname_client_certificate.yaml): Get the Hostname Client Certificate
- [DELETE /zones/{zone_id}/origin_tls_client_auth/hostnames/certificates/{certificate_id}](operations/per_hostname_authenticated_origin_pull_delete_hostname_client_certificate.yaml): Delete Hostname Client Certificate
- [GET /zones/{zone_id}/origin_tls_client_auth/hostnames/{hostname}](operations/per_hostname_authenticated_origin_pull_get_the_hostname_status_for_client_authentication.yaml): Get the Hostname Status for Client Authentication

## Physical Devices

- [Physical Devices operations](tags/physical_devices.yaml) All 'Physical Devices' operations in one file
- [GET /accounts/{account_id}/devices/physical-devices](operations/list_devices.yaml): List devices
- [GET /accounts/{account_id}/devices/physical-devices/{device_id}](operations/get_device.yaml): Get device
- [DELETE /accounts/{account_id}/devices/physical-devices/{device_id}](operations/delete_device.yaml): Delete device
- [POST /accounts/{account_id}/devices/physical-devices/{device_id}/revoke](operations/revoke_device.yaml): Revoke device registrations
- [DELETE /accounts/{account_id}/devices/registrations](operations/delete_registrations.yaml): Delete registrations

## Priority Intelligence Requirements (PIR)

- [Priority Intelligence Requirements (PIR) operations](tags/priority_intelligence_requirements_pir.yaml) All 'Priority Intelligence Requirements (PIR)' operations in one file
- [POST /accounts/{account_id}/cloudforce-one/requests/priority](operations/cloudforce_one_priority_list.yaml): List Priority Intelligence Requirements
- [POST /accounts/{account_id}/cloudforce-one/requests/priority/new](operations/cloudforce_one_priority_new.yaml): Create a New Priority Intelligence Requirement
- [GET /accounts/{account_id}/cloudforce-one/requests/priority/quota](operations/cloudforce_one_priority_quota.yaml): Get Priority Intelligence Requirement Quota
- [GET /accounts/{account_id}/cloudforce-one/requests/priority/{priority_id}](operations/cloudforce_one_priority_get.yaml): Get a Priority Intelligence Requirement
- [PUT /accounts/{account_id}/cloudforce-one/requests/priority/{priority_id}](operations/cloudforce_one_priority_update.yaml): Update a Priority Intelligence Requirement
- [DELETE /accounts/{account_id}/cloudforce-one/requests/priority/{priority_id}](operations/cloudforce_one_priority_delete.yaml): Delete a Priority Intelligence Requirement

## Query run

- [Query run operations](tags/query_run.yaml) All 'Query run' operations in one file
- [POST /accounts/{account_id}/workers/observability/telemetry/query](operations/telemetry_query.yaml): Run a query

## Queue

- [Queue operations](tags/queue.yaml) All 'Queue' operations in one file
- [GET /accounts/{account_id}/event_subscriptions/subscriptions](operations/subscriptions_list.yaml): List Event Subscriptions
- [POST /accounts/{account_id}/event_subscriptions/subscriptions](operations/subscriptions_create.yaml): Create Event Subscription
- [PATCH /accounts/{account_id}/event_subscriptions/subscriptions/{subscription_id}](operations/subscriptions_patch.yaml): Update Event Subscription
- [DELETE /accounts/{account_id}/event_subscriptions/subscriptions/{subscription_id}](operations/subscriptions_delete.yaml): Delete Event Subscription
- [GET /accounts/{account_id}/queues](operations/queues_list.yaml): List Queues
- [POST /accounts/{account_id}/queues](operations/queues_create.yaml): Create Queue
- [GET /accounts/{account_id}/queues/{queue_id}](operations/queues_get.yaml): Get Queue
- [PUT /accounts/{account_id}/queues/{queue_id}](operations/queues_update.yaml): Update Queue
- [PATCH /accounts/{account_id}/queues/{queue_id}](operations/queues_update_partial.yaml): Update Queue
- [DELETE /accounts/{account_id}/queues/{queue_id}](operations/queues_delete.yaml): Delete Queue
- [GET /accounts/{account_id}/queues/{queue_id}/consumers](operations/queues_list_consumers.yaml): List Queue Consumers
- [POST /accounts/{account_id}/queues/{queue_id}/consumers](operations/queues_create_consumer.yaml): Create a Queue Consumer
- [GET /accounts/{account_id}/queues/{queue_id}/consumers/{consumer_id}](operations/queues_get_consumer.yaml): Get Queue Consumer
- [PUT /accounts/{account_id}/queues/{queue_id}/consumers/{consumer_id}](operations/queues_update_consumer.yaml): Update Queue Consumer
- [DELETE /accounts/{account_id}/queues/{queue_id}/consumers/{consumer_id}](operations/queues_delete_consumer.yaml): Delete Queue Consumer
- [POST /accounts/{account_id}/queues/{queue_id}/messages](operations/queues_push_message.yaml): Push Message
- [POST /accounts/{account_id}/queues/{queue_id}/messages/ack](operations/queues_ack_messages.yaml): Acknowledge + Retry Queue Messages
- [POST /accounts/{account_id}/queues/{queue_id}/messages/batch](operations/queues_push_messages.yaml): Push Message Batch
- [POST /accounts/{account_id}/queues/{queue_id}/messages/pull](operations/queues_pull_messages.yaml): Pull Queue Messages
- [GET /accounts/{account_id}/queues/{queue_id}/purge](operations/queues_purge_get.yaml): Get Queue Purge Status
- [POST /accounts/{account_id}/queues/{queue_id}/purge](operations/queues_purge.yaml): Purge Queue

## R2 Account

- [R2 Account operations](tags/r2_account.yaml) All 'R2 Account' operations in one file
- [GET /accounts/{account_id}/r2/metrics](operations/r2_get_account_level_metrics.yaml): Get Account-Level Metrics

## R2 Bucket

- [R2 Bucket operations](tags/r2_bucket.yaml) All 'R2 Bucket' operations in one file
- [GET /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration](operations/r2_get_event_notification_configs.yaml): List Event Notification Rules
- [GET /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}](operations/r2_get_event_notification_config.yaml): Get Event Notification Rule
- [PUT /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}](operations/r2_put_event_notification_config.yaml): Create Event Notification Rule
- [DELETE /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}](operations/r2_event_notification_delete_config.yaml): Delete Event Notification Rules
- [GET /accounts/{account_id}/r2/buckets](operations/r2_list_buckets.yaml): List Buckets
- [POST /accounts/{account_id}/r2/buckets](operations/r2_create_bucket.yaml): Create Bucket
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}](operations/r2_get_bucket.yaml): Get Bucket
- [PATCH /accounts/{account_id}/r2/buckets/{bucket_name}](operations/r2_patch_bucket.yaml): Patch Bucket
- [DELETE /accounts/{account_id}/r2/buckets/{bucket_name}](operations/r2_delete_bucket.yaml): Delete Bucket
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/cors](operations/r2_get_bucket_cors_policy.yaml): Get Bucket CORS Policy
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/cors](operations/r2_put_bucket_cors_policy.yaml): Put Bucket CORS Policy
- [DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/cors](operations/r2_delete_bucket_cors_policy.yaml): Delete Bucket CORS Policy
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom](operations/r2_list_custom_domains.yaml): List Custom Domains of Bucket
- [POST /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom](operations/r2_add_custom_domain.yaml): Attach Custom Domain To Bucket
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}](operations/r2_get_custom_domain_settings.yaml): Get Custom Domain Settings
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}](operations/r2_edit_custom_domain_settings.yaml): Configure Custom Domain Settings
- [DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}](operations/r2_delete_custom_domain.yaml): Remove Custom Domain From Bucket
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/managed](operations/r2_get_bucket_public_policy.yaml): Get r2.dev Domain of Bucket
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/domains/managed](operations/r2_put_bucket_public_policy.yaml): Update r2.dev Domain of Bucket
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/lifecycle](operations/r2_get_bucket_lifecycle_configuration.yaml): Get Object Lifecycle Rules
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/lifecycle](operations/r2_put_bucket_lifecycle_configuration.yaml): Put Object Lifecycle Rules
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/lock](operations/r2_get_bucket_lock_configuration.yaml): Get Bucket Lock Rules
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/lock](operations/r2_put_bucket_lock_configuration.yaml): Put Bucket Lock Rules
- [GET /accounts/{account_id}/r2/buckets/{bucket_name}/sippy](operations/r2_get_bucket_sippy_config.yaml): Get Sippy Configuration
- [PUT /accounts/{account_id}/r2/buckets/{bucket_name}/sippy](operations/r2_put_bucket_sippy_config.yaml): Enable Sippy
- [DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/sippy](operations/r2_delete_bucket_sippy_config.yaml): Disable Sippy
- [POST /accounts/{account_id}/r2/temp-access-credentials](operations/r2_create_temp_access_credentials.yaml): Create Temporary Access Credentials

## R2 Super Slurper

- [R2 Super Slurper operations](tags/r2_super_slurper.yaml) All 'R2 Super Slurper' operations in one file
- [GET /accounts/{account_id}/slurper/jobs](operations/slurper_list_jobs.yaml): List jobs
- [POST /accounts/{account_id}/slurper/jobs](operations/slurper_create_job.yaml): Create a job
- [PUT /accounts/{account_id}/slurper/jobs/abortAll](operations/slurper_abort_all_jobs.yaml): Abort all jobs
- [GET /accounts/{account_id}/slurper/jobs/{job_id}](operations/slurper_get_job.yaml): Get job details
- [PUT /accounts/{account_id}/slurper/jobs/{job_id}/abort](operations/slurper_abort_job.yaml): Abort a job
- [GET /accounts/{account_id}/slurper/jobs/{job_id}/logs](operations/slurper_get_job_logs.yaml): Get job logs
- [PUT /accounts/{account_id}/slurper/jobs/{job_id}/pause](operations/slurper_pause_job.yaml): Pause a job
- [GET /accounts/{account_id}/slurper/jobs/{job_id}/progress](operations/slurper_get_job_progress.yaml): Get job progress
- [PUT /accounts/{account_id}/slurper/jobs/{job_id}/resume](operations/slurper_resume_job.yaml): Resume a job
- [PUT /accounts/{account_id}/slurper/source/connectivity-precheck](operations/slurper_check_source_connectivity.yaml): Check source connectivity
- [PUT /accounts/{account_id}/slurper/target/connectivity-precheck](operations/slurper_check_target_connectivity.yaml): Check target connectivity

## Radar AI Bots

- [Radar AI Bots operations](tags/radar_ai_bots.yaml) All 'Radar AI Bots' operations in one file
- [GET /radar/ai/bots/summary/user_agent](operations/radar_get_ai_bots_summary_by_user_agent.yaml): Get AI user agents summary
- [GET /radar/ai/bots/timeseries_groups/user_agent](operations/radar_get_ai_bots_timeseries_group_by_user_agent.yaml): Get AI user agents time series

## Radar AI Inference

- [Radar AI Inference operations](tags/radar_ai_inference.yaml) All 'Radar AI Inference' operations in one file
- [GET /radar/ai/inference/summary/model](operations/radar_get_ai_inference_summary_by_model.yaml): Get Workers AI models summary
- [GET /radar/ai/inference/summary/task](operations/radar_get_ai_inference_summary_by_task.yaml): Get Workers AI tasks summary
- [GET /radar/ai/inference/timeseries_groups/model](operations/radar_get_ai_inference_timeseries_group_by_model.yaml): Get Workers AI models time series
- [GET /radar/ai/inference/timeseries_groups/task](operations/radar_get_ai_inference_timeseries_group_by_task.yaml): Get Workers AI tasks time series

## Radar AS112

- [Radar AS112 operations](tags/radar_as112.yaml) All 'Radar AS112' operations in one file
- [GET /radar/as112/summary/dnssec](operations/radar_get_dns_as112_timeseries_by_dnssec.yaml): Get AS112 DNS queries by DNSSEC summary
- [GET /radar/as112/summary/edns](operations/radar_get_dns_as112_timeseries_by_edns.yaml): Get AS112 DNS queries by EDNS summary
- [GET /radar/as112/summary/ip_version](operations/radar_get_dns_as112_timeseries_by_ip_version.yaml): Get AS112 DNS queries by IP version summary
- [GET /radar/as112/summary/protocol](operations/radar_get_dns_as112_timeseries_by_protocol.yaml): Get AS112 DNS queries by DNS protocol summary
- [GET /radar/as112/summary/query_type](operations/radar_get_dns_as112_timeseries_by_query_type.yaml): Get AS112 DNS queries by type summary
- [GET /radar/as112/summary/response_codes](operations/radar_get_dns_as112_timeseries_by_response_codes.yaml): Get AS112 DNS queries by response code summary
- [GET /radar/as112/timeseries](operations/radar_get_dns_as112_timeseries.yaml): Get AS112 DNS queries time series
- [GET /radar/as112/timeseries_groups/dnssec](operations/radar_get_dns_as112_timeseries_group_by_dnssec.yaml): Get AS112 DNS queries by DNSSEC support time series
- [GET /radar/as112/timeseries_groups/edns](operations/radar_get_dns_as112_timeseries_group_by_edns.yaml): Get AS112 DNS queries by EDNS support summary
- [GET /radar/as112/timeseries_groups/ip_version](operations/radar_get_dns_as112_timeseries_group_by_ip_version.yaml): Get AS112 DNS queries by IP version time series
- [GET /radar/as112/timeseries_groups/protocol](operations/radar_get_dns_as112_timeseries_group_by_protocol.yaml): Get AS112 DNS queries by DNS protocol time series
- [GET /radar/as112/timeseries_groups/query_type](operations/radar_get_dns_as112_timeseries_group_by_query_type.yaml): Get AS112 DNS queries by type time series
- [GET /radar/as112/timeseries_groups/response_codes](operations/radar_get_dns_as112_timeseries_group_by_response_codes.yaml): Get AS112 DNS queries by response code time series
- [GET /radar/as112/top/locations](operations/radar_get_dns_as112_top_locations.yaml): Get top locations by AS112 DNS queries
- [GET /radar/as112/top/locations/dnssec/{dnssec}](operations/radar_get_dns_as112_top_locations_by_dnssec.yaml): Get top locations by AS112 DNS queries with DNSSEC support
- [GET /radar/as112/top/locations/edns/{edns}](operations/radar_get_dns_as112_top_locations_by_edns.yaml): Get top locations by AS112 DNS queries with EDNS support
- [GET /radar/as112/top/locations/ip_version/{ip_version}](operations/radar_get_dns_as112_top_locations_by_ip_version.yaml): Get top locations by AS112 DNS queries for an IP version

## Radar Annotations

- [Radar Annotations operations](tags/radar_annotations.yaml) All 'Radar Annotations' operations in one file
- [GET /radar/annotations](operations/radar_get_annotations.yaml): Get latest annotations
- [GET /radar/annotations/outages](operations/radar_get_annotations_outages.yaml): Get latest Internet outages and anomalies
- [GET /radar/annotations/outages/locations](operations/radar_get_annotations_outages_top.yaml): Get the number of outages by location

## Radar BGP

- [Radar BGP operations](tags/radar_bgp.yaml) All 'Radar BGP' operations in one file
- [GET /radar/bgp/hijacks/events](operations/radar_get_bgp_hijacks_events.yaml): Get BGP hijack events
- [GET /radar/bgp/ips/timeseries](operations/radar_get_bgp_ips_timeseries.yaml): Get announced IP address space time series
- [GET /radar/bgp/leaks/events](operations/radar_get_bgp_route_leak_events.yaml): Get BGP route leak events
- [GET /radar/bgp/routes/ases](operations/radar_get_bgp_routes_asns.yaml): List ASes from global routing tables
- [GET /radar/bgp/routes/moas](operations/radar_get_bgp_pfx2as_moas.yaml): Get Multi-Origin AS (MOAS) prefixes
- [GET /radar/bgp/routes/pfx2as](operations/radar_get_bgp_pfx2as.yaml): Get prefix-to-ASN mapping
- [GET /radar/bgp/routes/realtime](operations/radar_get_bgp_routes_realtime.yaml): Get real-time BGP routes for a prefix
- [GET /radar/bgp/routes/stats](operations/radar_get_bgp_routes_stats.yaml): Get BGP routing table stats 
- [GET /radar/bgp/timeseries](operations/radar_get_bgp_timeseries.yaml): Get BGP time series
- [GET /radar/bgp/top/ases](operations/radar_get_bgp_top_ases.yaml): Get top ASes by BGP updates
- [GET /radar/bgp/top/ases/prefixes](operations/radar_get_bgp_top_asns_by_prefixes.yaml): Get top ASes by prefix count
- [GET /radar/bgp/top/prefixes](operations/radar_get_bgp_top_prefixes.yaml): Get top prefixes by BGP updates

## Radar Bots

- [Radar Bots operations](tags/radar_bots.yaml) All 'Radar Bots' operations in one file
- [GET /radar/bots](operations/radar_get_bots.yaml): List bots
- [GET /radar/bots/summary/{dimension}](operations/radar_get_bots_summary.yaml): Get bots' HTTP requests distribution by dimension
- [GET /radar/bots/timeseries](operations/radar_get_bots_timeseries.yaml): Get bots HTTP requests time series
- [GET /radar/bots/timeseries_groups/{dimension}](operations/radar_get_bots_timeseries_group.yaml): Get time series distribution of bots HTTP requests by dimension.
- [GET /radar/bots/{bot_slug}](operations/radar_get_bot_details.yaml): Get bot details

## Radar DNS

- [Radar DNS operations](tags/radar_dns.yaml) All 'Radar DNS' operations in one file
- [GET /radar/dns/summary/cache_hit](operations/radar_get_dns_summary_by_cache_hit_status.yaml): Get DNS queries by cache status summary
- [GET /radar/dns/summary/dnssec](operations/radar_get_dns_summary_by_dnssec.yaml): Get DNS queries by DNSSEC support summary
- [GET /radar/dns/summary/dnssec_aware](operations/radar_get_dns_summary_by_dnssec_awareness.yaml): Get DNS queries by DNSSEC awareness summary
- [GET /radar/dns/summary/dnssec_e2e](operations/radar_get_dns_summary_by_dnssec_e2e_version.yaml): Get DNS queries by DNSSEC end-to-end summary
- [GET /radar/dns/summary/ip_version](operations/radar_get_dns_summary_by_ip_version.yaml): Get DNS queries by IP version summary
- [GET /radar/dns/summary/matching_answer](operations/radar_get_dns_summary_by_matching_answer_status.yaml): Get DNS queries by matching answer summary
- [GET /radar/dns/summary/protocol](operations/radar_get_dns_summary_by_protocol.yaml): Get DNS queries by protocol summary
- [GET /radar/dns/summary/query_type](operations/radar_get_dns_summary_by_query_type.yaml): Get DNS queries by type summary
- [GET /radar/dns/summary/response_code](operations/radar_get_dns_summary_by_response_code.yaml): Get DNS queries by response code summary
- [GET /radar/dns/summary/response_ttl](operations/radar_get_dns_summary_by_response_ttl.yaml): Get DNS queries by response TTL summary
- [GET /radar/dns/timeseries](operations/radar_get_dns_timeseries.yaml): Get DNS queries time series
- [GET /radar/dns/timeseries_groups/cache_hit](operations/radar_get_dns_timeseries_group_by_cache_hit_status.yaml): Get DNS queries by cache status time series
- [GET /radar/dns/timeseries_groups/dnssec](operations/radar_get_dns_timeseries_group_by_dnssec.yaml): Get DNS queries by DNSSEC support time series
- [GET /radar/dns/timeseries_groups/dnssec_aware](operations/radar_get_dns_timeseries_group_by_dnssec_awareness.yaml): Get DNS queries by DNSSEC awareness time series
- [GET /radar/dns/timeseries_groups/dnssec_e2e](operations/radar_get_dns_timeseries_group_by_dnssec_e2e_version.yaml): Get DNS queries by DNSSEC end-to-end time series
- [GET /radar/dns/timeseries_groups/ip_version](operations/radar_get_dns_timeseries_group_by_ip_version.yaml): Get DNS queries by IP version time series
- [GET /radar/dns/timeseries_groups/matching_answer](operations/radar_get_dns_timeseries_group_by_matching_answer_status.yaml): Get DNS queries by matching answer time series
- [GET /radar/dns/timeseries_groups/protocol](operations/radar_get_dns_timeseries_group_by_protocol.yaml): Get DNS queries by protocol time series
- [GET /radar/dns/timeseries_groups/query_type](operations/radar_get_dns_timeseries_group_by_query_type.yaml): Get DNS queries by type time series
- [GET /radar/dns/timeseries_groups/response_code](operations/radar_get_dns_timeseries_group_by_response_code.yaml): Get DNS queries by response code time series
- [GET /radar/dns/timeseries_groups/response_ttl](operations/radar_get_dns_timeseries_group_by_response_ttl.yaml): Get DNS queries by response TTL time series
- [GET /radar/dns/top/ases](operations/radar_get_dns_top_ases.yaml): Get top ASes by DNS queries
- [GET /radar/dns/top/locations](operations/radar_get_dns_top_locations.yaml): Get top locations by DNS queries

## Radar Datasets

- [Radar Datasets operations](tags/radar_datasets.yaml) All 'Radar Datasets' operations in one file
- [GET /radar/datasets](operations/radar_get_reports_datasets.yaml): List datasets
- [POST /radar/datasets/download](operations/radar_post_reports_dataset_download_url.yaml): Get dataset download URL
- [GET /radar/datasets/{alias}](operations/radar_get_reports_dataset_download.yaml): Get dataset CSV stream

## Radar Domains Ranking

- [Radar Domains Ranking operations](tags/radar_domains_ranking.yaml) All 'Radar Domains Ranking' operations in one file
- [GET /radar/ranking/domain/{domain}](operations/radar_get_ranking_domain_details.yaml): Get domain rank details
- [GET /radar/ranking/timeseries_groups](operations/radar_get_ranking_domain_timeseries.yaml): Get domains rank time series
- [GET /radar/ranking/top](operations/radar_get_ranking_top_domains.yaml): Get top or trending domains

## Radar Email Routing

- [Radar Email Routing operations](tags/radar_email_routing.yaml) All 'Radar Email Routing' operations in one file
- [GET /radar/email/routing/summary/arc](operations/radar_get_email_routing_summary_by_arc.yaml): Get email ARC validation summary
- [GET /radar/email/routing/summary/dkim](operations/radar_get_email_routing_summary_by_dkim.yaml): Get email DKIM validation summary
- [GET /radar/email/routing/summary/dmarc](operations/radar_get_email_routing_summary_by_dmarc.yaml): Get email DMARC validation summary
- [GET /radar/email/routing/summary/encrypted](operations/radar_get_email_routing_summary_by_encrypted.yaml): Get email encryption status summary
- [GET /radar/email/routing/summary/ip_version](operations/radar_get_email_routing_summary_by_ip_version.yaml): Get email IP version summary
- [GET /radar/email/routing/summary/spf](operations/radar_get_email_routing_summary_by_spf.yaml): Get email SPF validation summary
- [GET /radar/email/routing/timeseries_groups/arc](operations/radar_get_email_routing_timeseries_group_by_arc.yaml): Get email ARC validation time series
- [GET /radar/email/routing/timeseries_groups/dkim](operations/radar_get_email_routing_timeseries_group_by_dkim.yaml): Get email DKIM validation time series
- [GET /radar/email/routing/timeseries_groups/dmarc](operations/radar_get_email_routing_timeseries_group_by_dmarc.yaml): Get email DMARC validation time series
- [GET /radar/email/routing/timeseries_groups/encrypted](operations/radar_get_email_routing_timeseries_group_by_encrypted.yaml): Get email encryption status time series
- [GET /radar/email/routing/timeseries_groups/ip_version](operations/radar_get_email_routing_timeseries_group_by_ip_version.yaml): Get email IP version time series
- [GET /radar/email/routing/timeseries_groups/spf](operations/radar_get_email_routing_timeseries_group_by_spf.yaml): Get email SPF validation time series

## Radar Email Security

- [Radar Email Security operations](tags/radar_email_security.yaml) All 'Radar Email Security' operations in one file
- [GET /radar/email/security/summary/arc](operations/radar_get_email_security_summary_by_arc.yaml): Get email ARC validation summary
- [GET /radar/email/security/summary/dkim](operations/radar_get_email_security_summary_by_dkim.yaml): Get email DKIM validation summary
- [GET /radar/email/security/summary/dmarc](operations/radar_get_email_security_summary_by_dmarc.yaml): Get email DMARC validation summary
- [GET /radar/email/security/summary/malicious](operations/radar_get_email_security_summary_by_malicious.yaml): Get email malicious classification summary
- [GET /radar/email/security/summary/spam](operations/radar_get_email_security_summary_by_spam.yaml): Get email spam classification summary
- [GET /radar/email/security/summary/spf](operations/radar_get_email_security_summary_by_spf.yaml): Get email SPF validation summary
- [GET /radar/email/security/summary/spoof](operations/radar_get_email_security_summary_by_spoof.yaml): Get email spoof classification summary
- [GET /radar/email/security/summary/threat_category](operations/radar_get_email_security_summary_by_threat_category.yaml): Get email threat category summary
- [GET /radar/email/security/summary/tls_version](operations/radar_get_email_security_summary_by_tls_version.yaml): Get email TLS version summary
- [GET /radar/email/security/timeseries_groups/arc](operations/radar_get_email_security_timeseries_group_by_arc.yaml): Get email ARC validation time series
- [GET /radar/email/security/timeseries_groups/dkim](operations/radar_get_email_security_timeseries_group_by_dkim.yaml): Get email DKIM validation time series
- [GET /radar/email/security/timeseries_groups/dmarc](operations/radar_get_email_security_timeseries_group_by_dmarc.yaml): Get email DMARC validation time series
- [GET /radar/email/security/timeseries_groups/malicious](operations/radar_get_email_security_timeseries_group_by_malicious.yaml): Get email malicious classification time series
- [GET /radar/email/security/timeseries_groups/spam](operations/radar_get_email_security_timeseries_group_by_spam.yaml): Get email spam classification time series
- [GET /radar/email/security/timeseries_groups/spf](operations/radar_get_email_security_timeseries_group_by_spf.yaml): Get email SPF validation time series
- [GET /radar/email/security/timeseries_groups/spoof](operations/radar_get_email_security_timeseries_group_by_spoof.yaml): Get email spoof classification time series
- [GET /radar/email/security/timeseries_groups/threat_category](operations/radar_get_email_security_timeseries_group_by_threat_category.yaml): Get email threat category time series
- [GET /radar/email/security/timeseries_groups/tls_version](operations/radar_get_email_security_timeseries_group_by_tls_version.yaml): Get email TLS version time series
- [GET /radar/email/security/top/tlds](operations/radar_get_email_security_top_tlds_by_messages.yaml): Get top TLDs by email message volume
- [GET /radar/email/security/top/tlds/malicious/{malicious}](operations/radar_get_email_security_top_tlds_by_malicious.yaml): Get top TLDs by email malicious classification
- [GET /radar/email/security/top/tlds/spam/{spam}](operations/radar_get_email_security_top_tlds_by_spam.yaml): Get top TLDs by email spam classification
- [GET /radar/email/security/top/tlds/spoof/{spoof}](operations/radar_get_email_security_top_tlds_by_spoof.yaml): Get top TLDs by email spoof classification

## Radar Entities

- [Radar Entities operations](tags/radar_entities.yaml) All 'Radar Entities' operations in one file
- [GET /radar/entities/asns](operations/radar_get_entities_asn_list.yaml): List autonomous systems
- [GET /radar/entities/asns/ip](operations/radar_get_entities_asn_by_ip.yaml): Get AS details by IP address
- [GET /radar/entities/asns/{asn}](operations/radar_get_entities_asn_by_id.yaml): Get AS details by ASN
- [GET /radar/entities/asns/{asn}/rel](operations/radar_get_asns_rel.yaml): Get AS-level relationships by ASN
- [GET /radar/entities/ip](operations/radar_get_entities_ip.yaml): Get IP address details
- [GET /radar/entities/locations](operations/radar_get_entities_locations.yaml): List locations
- [GET /radar/entities/locations/{location}](operations/radar_get_entities_location_by_alpha2.yaml): Get location details

## Radar HTTP

- [Radar HTTP operations](tags/radar_http.yaml) All 'Radar HTTP' operations in one file
- [GET /radar/http/summary/bot_class](operations/radar_get_http_summary_by_bot_class.yaml): Get HTTP requests by bot class summary
- [GET /radar/http/summary/device_type](operations/radar_get_http_summary_by_device_type.yaml): Get HTTP requests by device type summary
- [GET /radar/http/summary/http_protocol](operations/radar_get_http_summary_by_http_protocol.yaml): Get HTTP requests by HTTP/HTTPS summary
- [GET /radar/http/summary/http_version](operations/radar_get_http_summary_by_http_version.yaml): Get HTTP requests by HTTP version summary
- [GET /radar/http/summary/ip_version](operations/radar_get_http_summary_by_ip_version.yaml): Get HTTP requests by IP version summary
- [GET /radar/http/summary/os](operations/radar_get_http_summary_by_operating_system.yaml): Get HTTP requests by OS summary
- [GET /radar/http/summary/post_quantum](operations/radar_get_http_summary_by_post_quantum.yaml): Get HTTP requests by post-quantum support summary
- [GET /radar/http/summary/tls_version](operations/radar_get_http_summary_by_tls_version.yaml): Get HTTP requests by TLS version summary
- [GET /radar/http/timeseries](operations/radar_get_http_timeseries.yaml): Get HTTP requests time series
- [GET /radar/http/timeseries_groups/bot_class](operations/radar_get_http_timeseries_group_by_bot_class.yaml): Get HTTP requests by bot class time series
- [GET /radar/http/timeseries_groups/browser](operations/radar_get_http_timeseries_group_by_browsers.yaml): Get HTTP requests by user agent time series
- [GET /radar/http/timeseries_groups/browser_family](operations/radar_get_http_timeseries_group_by_browser_families.yaml): Get HTTP requests by user agent family time series
- [GET /radar/http/timeseries_groups/device_type](operations/radar_get_http_timeseries_group_by_device_type.yaml): Get HTTP requests by device type time series
- [GET /radar/http/timeseries_groups/http_protocol](operations/radar_get_http_timeseries_group_by_http_protocol.yaml): Get HTTP requests by HTTP/HTTPS time series
- [GET /radar/http/timeseries_groups/http_version](operations/radar_get_http_timeseries_group_by_http_version.yaml): Get HTTP requests by HTTP version time series
- [GET /radar/http/timeseries_groups/ip_version](operations/radar_get_http_timeseries_group_by_ip_version.yaml): Get HTTP requests by IP version time series
- [GET /radar/http/timeseries_groups/os](operations/radar_get_http_timeseries_group_by_operating_system.yaml): Get HTTP requests by OS time series
- [GET /radar/http/timeseries_groups/post_quantum](operations/radar_get_http_timeseries_group_by_post_quantum.yaml): Get HTTP requests by post-quantum support time series
- [GET /radar/http/timeseries_groups/tls_version](operations/radar_get_http_timeseries_group_by_tls_version.yaml): Get HTTP requests by TLS version time series
- [GET /radar/http/top/ases](operations/radar_get_http_top_ases_by_http_requests.yaml): Get top ASes by HTTP requests
- [GET /radar/http/top/ases/bot_class/{bot_class}](operations/radar_get_http_top_ases_by_bot_class.yaml): Get top ASes by HTTP requests for a bot class
- [GET /radar/http/top/ases/browser_family/{browser_family}](operations/radar_get_http_top_ases_by_browser_family.yaml): Get top ASes by HTTP requests for a browser family
- [GET /radar/http/top/ases/device_type/{device_type}](operations/radar_get_http_top_ases_by_device_type.yaml): Get top ASes by HTTP requests for a device type
- [GET /radar/http/top/ases/http_protocol/{http_protocol}](operations/radar_get_http_top_ases_by_http_protocol.yaml): Get top ASes by HTTP requests for an HTTP protocol
- [GET /radar/http/top/ases/http_version/{http_version}](operations/radar_get_http_top_ases_by_http_version.yaml): Get top ASes by HTTP requests for an HTTP version
- [GET /radar/http/top/ases/ip_version/{ip_version}](operations/radar_get_http_top_ases_by_ip_version.yaml): Get top ASes by HTTP requests for an IP version
- [GET /radar/http/top/ases/os/{os}](operations/radar_get_http_top_ases_by_operating_system.yaml): Get top ASes by HTTP requests for an OS
- [GET /radar/http/top/ases/tls_version/{tls_version}](operations/radar_get_http_top_ases_by_tls_version.yaml): Get top ASes by HTTP requests for a TLS version
- [GET /radar/http/top/browser](operations/radar_get_http_top_browsers.yaml): Get top user agents by HTTP requests
- [GET /radar/http/top/browser_family](operations/radar_get_http_top_browser_families.yaml): Get top user agent families by HTTP requests
- [GET /radar/http/top/locations](operations/radar_get_http_top_locations_by_http_requests.yaml): Get top locations by HTTP requests
- [GET /radar/http/top/locations/bot_class/{bot_class}](operations/radar_get_http_top_locations_by_bot_class.yaml): Get top locations by HTTP requests for a bot class
- [GET /radar/http/top/locations/browser_family/{browser_family}](operations/radar_get_http_top_locations_by_browser_family.yaml): Get top locations by HTTP requests for a browser family
- [GET /radar/http/top/locations/device_type/{device_type}](operations/radar_get_http_top_locations_by_device_type.yaml): Get top locations by HTTP requests for a device type
- [GET /radar/http/top/locations/http_protocol/{http_protocol}](operations/radar_get_http_top_locations_by_http_protocol.yaml): Get top locations by HTTP requests for an HTTP protocol
- [GET /radar/http/top/locations/http_version/{http_version}](operations/radar_get_http_top_locations_by_http_version.yaml): Get top locations by HTTP requests for an HTTP version
- [GET /radar/http/top/locations/ip_version/{ip_version}](operations/radar_get_http_top_locations_by_ip_version.yaml): Get top locations by HTTP requests for an IP version
- [GET /radar/http/top/locations/os/{os}](operations/radar_get_http_top_locations_by_operating_system.yaml): Get top locations by HTTP requests for an OS
- [GET /radar/http/top/locations/tls_version/{tls_version}](operations/radar_get_http_top_locations_by_tls_version.yaml): Get top locations by HTTP requests for a TLS version

## Radar Internet Services Ranking

- [Radar Internet Services Ranking operations](tags/radar_internet_services_ranking.yaml) All 'Radar Internet Services Ranking' operations in one file
- [GET /radar/ranking/internet_services/categories](operations/radar_get_ranking_internet_services_categories.yaml): List Internet services categories
- [GET /radar/ranking/internet_services/timeseries_groups](operations/radar_get_ranking_internet_services_timeseries.yaml): Get Internet services rank time series
- [GET /radar/ranking/internet_services/top](operations/radar_get_ranking_top_internet_services.yaml): Get top Internet services

## Radar Layer 3 Attacks

- [Radar Layer 3 Attacks operations](tags/radar_layer_3_attacks.yaml) All 'Radar Layer 3 Attacks' operations in one file
- [GET /radar/attacks/layer3/summary/bitrate](operations/radar_get_attacks_layer3_summary_by_bitrate.yaml): Get layer 3 attacks by bitrate summary
- [GET /radar/attacks/layer3/summary/duration](operations/radar_get_attacks_layer3_summary_by_duration.yaml): Get layer 3 attacks by duration summary
- [GET /radar/attacks/layer3/summary/industry](operations/radar_get_attacks_layer3_summary_by_industry.yaml): Get layer 3 attacks by targeted industry summary
- [GET /radar/attacks/layer3/summary/ip_version](operations/radar_get_attacks_layer3_summary_by_ip_version.yaml): Get layer 3 attacks by IP version summary
- [GET /radar/attacks/layer3/summary/protocol](operations/radar_get_attacks_layer3_summary_by_protocol.yaml): Get layer 3 attacks by protocol summary
- [GET /radar/attacks/layer3/summary/vector](operations/radar_get_attacks_layer3_summary_by_vector.yaml): Get layer 3 attacks by vector summary
- [GET /radar/attacks/layer3/summary/vertical](operations/radar_get_attacks_layer3_summary_by_vertical.yaml): Get layer 3 attacks by targeted vertical summary
- [GET /radar/attacks/layer3/timeseries](operations/radar_get_attacks_layer3_timeseries_by_bytes.yaml): Get layer 3 attacks by bytes time series
- [GET /radar/attacks/layer3/timeseries_groups/bitrate](operations/radar_get_attacks_layer3_timeseries_group_by_bitrate.yaml): Get layer 3 attacks by bitrate time series
- [GET /radar/attacks/layer3/timeseries_groups/duration](operations/radar_get_attacks_layer3_timeseries_group_by_duration.yaml): Get layer 3 attacks by duration time series
- [GET /radar/attacks/layer3/timeseries_groups/industry](operations/radar_get_attacks_layer3_timeseries_group_by_industry.yaml): Get layer 3 attacks by target industries time series
- [GET /radar/attacks/layer3/timeseries_groups/ip_version](operations/radar_get_attacks_layer3_timeseries_group_by_ip_version.yaml): Get layer 3 attacks by IP version time series
- [GET /radar/attacks/layer3/timeseries_groups/protocol](operations/radar_get_attacks_layer3_timeseries_group_by_protocol.yaml): Get layer 3 attacks by protocol time series
- [GET /radar/attacks/layer3/timeseries_groups/vector](operations/radar_get_attacks_layer3_timeseries_group_by_vector.yaml): Get layer 3 attacks by vector time series
- [GET /radar/attacks/layer3/timeseries_groups/vertical](operations/radar_get_attacks_layer3_timeseries_group_by_vertical.yaml): Get layer 3 attacks by vertical time series
- [GET /radar/attacks/layer3/top/attacks](operations/radar_get_attacks_layer3_top_attacks.yaml): Get top layer 3 attack pairs (origin and target locations)
- [GET /radar/attacks/layer3/top/industry](operations/radar_get_attacks_layer3_top_industries.yaml): Get top industries targeted by layer 3 attacks
- [GET /radar/attacks/layer3/top/locations/origin](operations/radar_get_attacks_layer3_top_origin_locations.yaml): Get top origin locations of layer 3 attacks
- [GET /radar/attacks/layer3/top/locations/target](operations/radar_get_attacks_layer3_top_target_locations.yaml): Get top target locations of layer 3 attacks
- [GET /radar/attacks/layer3/top/vertical](operations/radar_get_attacks_layer3_top_verticals.yaml): Get top verticals targeted by layer 3 attacks

## Radar Layer 7 Attacks

- [Radar Layer 7 Attacks operations](tags/radar_layer_7_attacks.yaml) All 'Radar Layer 7 Attacks' operations in one file
- [GET /radar/attacks/layer7/summary/http_method](operations/radar_get_attacks_layer7_summary_by_http_method.yaml): Get layer 7 attacks by HTTP method summary
- [GET /radar/attacks/layer7/summary/http_version](operations/radar_get_attacks_layer7_summary_by_http_version.yaml): Get layer 7 attacks by HTTP version summary
- [GET /radar/attacks/layer7/summary/industry](operations/radar_get_attacks_layer7_summary_by_industry.yaml): Get layer 7 attacks by targeted industry summary
- [GET /radar/attacks/layer7/summary/ip_version](operations/radar_get_attacks_layer7_summary_by_ip_version.yaml): Get layer 7 attacks by IP version summary
- [GET /radar/attacks/layer7/summary/managed_rules](operations/radar_get_attacks_layer7_summary_by_managed_rules.yaml): Get layer 7 attacks by managed rules summary
- [GET /radar/attacks/layer7/summary/mitigation_product](operations/radar_get_attacks_layer7_summary_by_mitigation_product.yaml): Get layer 7 attacks by mitigation product summary
- [GET /radar/attacks/layer7/summary/vertical](operations/radar_get_attacks_layer7_summary_by_vertical.yaml): Get layer 7 attacks by targeted vertical summary
- [GET /radar/attacks/layer7/timeseries](operations/radar_get_attacks_layer7_timeseries.yaml): Get layer 7 attacks time series
- [GET /radar/attacks/layer7/timeseries_groups/http_method](operations/radar_get_attacks_layer7_timeseries_group_by_http_method.yaml): Get layer 7 attacks by HTTP method time series
- [GET /radar/attacks/layer7/timeseries_groups/http_version](operations/radar_get_attacks_layer7_timeseries_group_by_http_version.yaml): Get layer 7 attacks by HTTP version time series
- [GET /radar/attacks/layer7/timeseries_groups/industry](operations/radar_get_attacks_layer7_timeseries_group_by_industry.yaml): Get layer 7 attacks by target industries time series
- [GET /radar/attacks/layer7/timeseries_groups/ip_version](operations/radar_get_attacks_layer7_timeseries_group_by_ip_version.yaml): Get layer 7 attacks by IP version time series
- [GET /radar/attacks/layer7/timeseries_groups/managed_rules](operations/radar_get_attacks_layer7_timeseries_group_by_managed_rules.yaml): Get layer 7 attacks by managed rules time series
- [GET /radar/attacks/layer7/timeseries_groups/mitigation_product](operations/radar_get_attacks_layer7_timeseries_group_by_mitigation_product.yaml): Get layer 7 attacks by mitigation product time series
- [GET /radar/attacks/layer7/timeseries_groups/vertical](operations/radar_get_attacks_layer7_timeseries_group_by_vertical.yaml): Get layer 7 attacks by vertical time series
- [GET /radar/attacks/layer7/top/ases/origin](operations/radar_get_attacks_layer7_top_origin_as.yaml): Get top origin ASes of layer 7 attacks
- [GET /radar/attacks/layer7/top/attacks](operations/radar_get_attacks_layer7_top_attacks.yaml): Get top layer 7 attack pairs (origin and target locations)
- [GET /radar/attacks/layer7/top/industry](operations/radar_get_attacks_layer7_top_industries.yaml): Get top industries targeted by layer 7 attacks
- [GET /radar/attacks/layer7/top/locations/origin](operations/radar_get_attacks_layer7_top_origin_location.yaml): Get top origin locations of layer 7 attacks
- [GET /radar/attacks/layer7/top/locations/target](operations/radar_get_attacks_layer7_top_target_location.yaml): Get top target locations of layer 7 attacks
- [GET /radar/attacks/layer7/top/vertical](operations/radar_get_attacks_layer7_top_verticals.yaml): Get top verticals targeted by layer 7 attacks

## Radar Leaked Credential Checks

- [Radar Leaked Credential Checks operations](tags/radar_leaked_credential_checks.yaml) All 'Radar Leaked Credential Checks' operations in one file
- [GET /radar/leaked_credential_checks/summary/bot_class](operations/radar_get_leaked_credential_checks_summary_by_bot_class.yaml): Get HTTP authentication requests by bot class summary
- [GET /radar/leaked_credential_checks/summary/compromised](operations/radar_get_leaked_credential_checks_summary_by_compromised.yaml): Get HTTP authentication requests by compromised credential status summary
- [GET /radar/leaked_credential_checks/timeseries_groups/bot_class](operations/radar_get_leaked_credential_checks_timeseries_group_by_bot_class.yaml): Get HTTP authentication requests by bot class time series
- [GET /radar/leaked_credential_checks/timeseries_groups/compromised](operations/radar_get_leaked_credential_checks_timeseries_group_by_compromised.yaml): Get HTTP authentication requests by compromised credential status time series

## Radar NetFlows

- [Radar NetFlows operations](tags/radar_netflows.yaml) All 'Radar NetFlows' operations in one file
- [GET /radar/netflows/summary](operations/radar_get_netflows_summary.yaml): Get network traffic summary
- [GET /radar/netflows/timeseries](operations/radar_get_netflows_timeseries.yaml): Get network traffic time series
- [GET /radar/netflows/top/ases](operations/radar_get_netflows_top_ases.yaml): Get top ASes by network traffic
- [GET /radar/netflows/top/locations](operations/radar_get_netflows_top_locations.yaml): Get top locations by network traffic

## Radar Quality

- [Radar Quality operations](tags/radar_quality.yaml) All 'Radar Quality' operations in one file
- [GET /radar/quality/iqi/summary](operations/radar_get_quality_index_summary.yaml): Get Internet Quality Index (IQI) summary
- [GET /radar/quality/iqi/timeseries_groups](operations/radar_get_quality_index_timeseries_group.yaml): Get Internet Quality Index (IQI) time series
- [GET /radar/quality/speed/histogram](operations/radar_get_quality_speed_histogram.yaml): Get speed tests histogram
- [GET /radar/quality/speed/summary](operations/radar_get_quality_speed_summary.yaml): Get speed tests summary
- [GET /radar/quality/speed/top/ases](operations/radar_get_quality_speed_top_ases.yaml): Get top ASes by speed test results
- [GET /radar/quality/speed/top/locations](operations/radar_get_quality_speed_top_locations.yaml): Get top locations by speed test results

## Radar Robots.txt

- [Radar Robots.txt operations](tags/radar_robots_txt.yaml) All 'Radar Robots.txt' operations in one file
- [GET /radar/robots_txt/top/domain_categories](operations/radar_get_robots_txt_top_domain_categories_by_files_parsed.yaml): Get top domain categories by robots.txt files parsed
- [GET /radar/robots_txt/top/user_agents/directive](operations/radar_get_robots_txt_top_user_agents_by_directive.yaml): Get top user agents on robots.txt files

## Radar Search

- [Radar Search operations](tags/radar_search.yaml) All 'Radar Search' operations in one file
- [GET /radar/search/global](operations/radar_get_search_global.yaml): Search for locations, ASes, reports, and more

## Radar TCP Resets and Timeouts

- [Radar TCP Resets and Timeouts operations](tags/radar_tcp_resets_and_timeouts.yaml) All 'Radar TCP Resets and Timeouts' operations in one file
- [GET /radar/tcp_resets_timeouts/summary](operations/radar_get_tcp_resets_timeouts_summary.yaml): Get TCP resets and timeouts summary
- [GET /radar/tcp_resets_timeouts/timeseries_groups](operations/radar_get_tcp_resets_timeouts_timeseries_group.yaml): Get TCP resets and timeouts time series

## Radar Traffic Anomalies

- [Radar Traffic Anomalies operations](tags/radar_traffic_anomalies.yaml) All 'Radar Traffic Anomalies' operations in one file
- [GET /radar/traffic_anomalies](operations/radar_get_traffic_anomalies.yaml): Get latest Internet traffic anomalies
- [GET /radar/traffic_anomalies/locations](operations/radar_get_traffic_anomalies_top.yaml): Get top locations by total traffic anomalies

## Radar Verified Bots

- [Radar Verified Bots operations](tags/radar_verified_bots.yaml) All 'Radar Verified Bots' operations in one file
- [GET /radar/verified_bots/top/bots](operations/radar_get_verified_bots_top_by_http_requests.yaml): Get top verified bots by HTTP requests
- [GET /radar/verified_bots/top/categories](operations/radar_get_verified_bots_top_categories_by_http_requests.yaml): Get top verified bot categories by HTTP requests

## Radar Web Crawlers

- [Radar Web Crawlers operations](tags/radar_web_crawlers.yaml) All 'Radar Web Crawlers' operations in one file
- [GET /radar/bots/crawlers/summary/{dimension}](operations/radar_get_crawlers_summary.yaml): Get crawler HTTP request distribution by dimension
- [GET /radar/bots/crawlers/timeseries_groups/{dimension}](operations/radar_get_crawlers_timeseries_group.yaml): Get time series of crawler HTTP request distribution by dimension

## Rate limits for a zone

- [Rate limits for a zone operations](tags/rate_limits_for_a_zone.yaml) All 'Rate limits for a zone' operations in one file
- [GET /zones/{zone_id}/rate_limits](operations/rate_limits_for_a_zone_list_rate_limits.yaml): List rate limits
- [POST /zones/{zone_id}/rate_limits](operations/rate_limits_for_a_zone_create_a_rate_limit.yaml): Create a rate limit
- [GET /zones/{zone_id}/rate_limits/{rate_limit_id}](operations/rate_limits_for_a_zone_get_a_rate_limit.yaml): Get a rate limit
- [PUT /zones/{zone_id}/rate_limits/{rate_limit_id}](operations/rate_limits_for_a_zone_update_a_rate_limit.yaml): Update a rate limit
- [DELETE /zones/{zone_id}/rate_limits/{rate_limit_id}](operations/rate_limits_for_a_zone_delete_a_rate_limit.yaml): Delete a rate limit

## Registrar Domains

- [Registrar Domains operations](tags/registrar_domains.yaml) All 'Registrar Domains' operations in one file
- [GET /accounts/{account_id}/registrar/domains](operations/registrar_domains_list_domains.yaml): List domains
- [GET /accounts/{account_id}/registrar/domains/{domain_name}](operations/registrar_domains_get_domain.yaml): Get domain
- [PUT /accounts/{account_id}/registrar/domains/{domain_name}](operations/registrar_domains_update_domain.yaml): Update domain

## Registrations

- [Registrations operations](tags/registrations.yaml) All 'Registrations' operations in one file
- [GET /accounts/{account_id}/devices/registrations](operations/list_registrations.yaml): List registrations
- [POST /accounts/{account_id}/devices/registrations/revoke](operations/revoke_registrations.yaml): Revoke registrations
- [POST /accounts/{account_id}/devices/registrations/unrevoke](operations/unrevoke_registrations.yaml): Unrevoke registrations
- [GET /accounts/{account_id}/devices/registrations/{registration_id}](operations/get_registration.yaml): Get registration
- [DELETE /accounts/{account_id}/devices/registrations/{registration_id}](operations/delete_registration.yaml): Delete registration

## Request for Information (RFI)

- [Request for Information (RFI) operations](tags/request_for_information_rfi.yaml) All 'Request for Information (RFI)' operations in one file
- [POST /accounts/{account_id}/cloudforce-one/requests](operations/cloudforce_one_request_list.yaml): List Requests
- [GET /accounts/{account_id}/cloudforce-one/requests/constants](operations/cloudforce_one_request_constants.yaml): Get Request Priority, Status, and TLP constants
- [POST /accounts/{account_id}/cloudforce-one/requests/new](operations/cloudforce_one_request_new.yaml): Create a New Request.
- [GET /accounts/{account_id}/cloudforce-one/requests/quota](operations/cloudforce_one_request_quota.yaml): Get Request Quota
- [GET /accounts/{account_id}/cloudforce-one/requests/types](operations/cloudforce_one_request_types.yaml): Get Request Types
- [GET /accounts/{account_id}/cloudforce-one/requests/{request_id}](operations/cloudforce_one_request_get.yaml): Get a Request
- [PUT /accounts/{account_id}/cloudforce-one/requests/{request_id}](operations/cloudforce_one_request_update.yaml): Update a Request
- [DELETE /accounts/{account_id}/cloudforce-one/requests/{request_id}](operations/cloudforce_one_request_delete.yaml): Delete a Request
- [POST /accounts/{account_id}/cloudforce-one/requests/{request_id}/asset](operations/cloudforce_one_request_asset_list.yaml): List Request Assets
- [POST /accounts/{account_id}/cloudforce-one/requests/{request_id}/asset/new](operations/cloudforce_one_request_asset_new.yaml): Create a New Request Asset
- [GET /accounts/{account_id}/cloudforce-one/requests/{request_id}/asset/{asset_id}](operations/cloudforce_one_request_asset_get.yaml): Get a Request Asset
- [PUT /accounts/{account_id}/cloudforce-one/requests/{request_id}/asset/{asset_id}](operations/cloudforce_one_request_asset_update.yaml): Update a Request Asset
- [DELETE /accounts/{account_id}/cloudforce-one/requests/{request_id}/asset/{asset_id}](operations/cloudforce_one_request_asset_delete.yaml): Delete a Request Asset
- [POST /accounts/{account_id}/cloudforce-one/requests/{request_id}/message](operations/cloudforce_one_request_message_list.yaml): List Request Messages
- [POST /accounts/{account_id}/cloudforce-one/requests/{request_id}/message/new](operations/cloudforce_one_request_message_new.yaml): Create a New Request Message
- [PUT /accounts/{account_id}/cloudforce-one/requests/{request_id}/message/{message_id}](operations/cloudforce_one_request_message_update.yaml): Update a Request Message
- [DELETE /accounts/{account_id}/cloudforce-one/requests/{request_id}/message/{message_id}](operations/cloudforce_one_request_message_delete.yaml): Delete a Request Message

## Resource Sharing

- [Resource Sharing operations](tags/resource_sharing.yaml) All 'Resource Sharing' operations in one file
- [GET /accounts/{account_id}/shares](operations/shares_list.yaml): List account shares
- [POST /accounts/{account_id}/shares](operations/share_create.yaml): Create a new share
- [GET /accounts/{account_id}/shares/{share_id}](operations/shares_get_by_id.yaml): Get account share by ID
- [PUT /accounts/{account_id}/shares/{share_id}](operations/share_update.yaml): Update a share
- [DELETE /accounts/{account_id}/shares/{share_id}](operations/share_delete.yaml): Delete a share
- [GET /accounts/{account_id}/shares/{share_id}/recipients](operations/share_recipients_list.yaml): List share recipients by share ID
- [POST /accounts/{account_id}/shares/{share_id}/recipients](operations/share_recipient_create.yaml): Create a new share recipient
- [GET /accounts/{account_id}/shares/{share_id}/recipients/{recipient_id}](operations/share_recipients_get_by_id.yaml): Get share recipient by ID
- [DELETE /accounts/{account_id}/shares/{share_id}/recipients/{recipient_id}](operations/share_recipient_delete.yaml): Delete a share recipient
- [GET /accounts/{account_id}/shares/{share_id}/resources](operations/share_resources_list.yaml): List share resources by share ID
- [POST /accounts/{account_id}/shares/{share_id}/resources](operations/share_resource_create.yaml): Create a new share resource
- [GET /accounts/{account_id}/shares/{share_id}/resources/{resource_id}](operations/share_resources_get_by_id.yaml): Get share resource by ID
- [PUT /accounts/{account_id}/shares/{share_id}/resources/{resource_id}](operations/share_resource_update.yaml): Update a share resource
- [DELETE /accounts/{account_id}/shares/{share_id}/resources/{resource_id}](operations/share_resource_delete.yaml): Delete a share resource
- [GET /organizations/{organization_id}/shares](operations/organization_shares_list.yaml): List organization shares

## Resources

- [Resources operations](tags/resources.yaml) All 'Resources' operations in one file
- [GET /accounts/{account_id}/magic/cloud/resources](operations/resources_catalog_list.yaml): List Resources
- [GET /accounts/{account_id}/magic/cloud/resources/export](operations/resources_catalog_export.yaml): Export Resources
- [POST /accounts/{account_id}/magic/cloud/resources/policy-preview](operations/resources_catalog_policy_preview.yaml): Preview Rego Query
- [GET /accounts/{account_id}/magic/cloud/resources/{resource_id}](operations/resources_catalog_read.yaml): Read Resource

## SSL Verification

- [SSL Verification operations](tags/ssl_verification.yaml) All 'SSL Verification' operations in one file
- [GET /zones/{zone_id}/ssl/verification](operations/ssl_verification_ssl_verification_details.yaml): SSL Verification Details
- [PATCH /zones/{zone_id}/ssl/verification/{certificate_pack_id}](operations/ssl_verification_edit_ssl_certificate_pack_validation_method.yaml): Edit SSL Certificate Pack Validation Method

## SSL/TLS Mode Recommendation

- [SSL/TLS Mode Recommendation operations](tags/ssl_tls_mode_recommendation.yaml) All 'SSL/TLS Mode Recommendation' operations in one file
- [GET /zones/{zone_id}/ssl/recommendation](operations/ssl_tls_mode_recommendation_ssl_tls_recommendation.yaml): SSL/TLS Recommendation

## Scans

- [Scans operations](tags/scans.yaml) All 'Scans' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/scans/config](operations/get_configfetch.yaml): List Scan Configs
- [POST /accounts/{account_id}/cloudforce-one/scans/config](operations/post_configcreate.yaml): Create a new Scan Config
- [PATCH /accounts/{account_id}/cloudforce-one/scans/config/{config_id}](operations/post_configupdate.yaml): Update an existing Scan Config
- [DELETE /accounts/{account_id}/cloudforce-one/scans/config/{config_id}](operations/delete_deletescans.yaml): Delete a Scan Config
- [GET /accounts/{account_id}/cloudforce-one/scans/results/{config_id}](operations/get_getopenports.yaml): Get the Latest Scan Result

## Schema Validation

- [Schema Validation operations](tags/schema_validation.yaml) All 'Schema Validation' operations in one file
- [GET /zones/{zone_id}/schema_validation/schemas](operations/schema_validation_list_schemas_paginated.yaml): List all uploaded schemas
- [POST /zones/{zone_id}/schema_validation/schemas](operations/schema_validation_create_schema.yaml): Upload a schema
- [GET /zones/{zone_id}/schema_validation/schemas/hosts](operations/schema_validation_list_schema_hosts.yaml): List hosts covered by uploaded schemas
- [GET /zones/{zone_id}/schema_validation/schemas/{schema_id}](operations/schema_validation_get_schema.yaml): Get details of a schema
- [PATCH /zones/{zone_id}/schema_validation/schemas/{schema_id}](operations/schema_validation_edit_schema.yaml): Edit details of a schema to enable validation
- [DELETE /zones/{zone_id}/schema_validation/schemas/{schema_id}](operations/schema_validation_delete_schema.yaml): Delete a schema
- [GET /zones/{zone_id}/schema_validation/schemas/{schema_id}/operations](operations/schema_validation_extract_operations_from_schema.yaml): Retrieve all operations from the schema.

## Schema Validation Settings

- [Schema Validation Settings operations](tags/schema_validation_settings.yaml) All 'Schema Validation Settings' operations in one file
- [GET /zones/{zone_id}/schema_validation/settings](operations/schema_validation_get_settings.yaml): Get global schema validation settings
- [PUT /zones/{zone_id}/schema_validation/settings](operations/schema_validation_update_settings.yaml): Update global schema validation settings
- [PATCH /zones/{zone_id}/schema_validation/settings](operations/schema_validation_edit_settings.yaml): Edit global schema validation settings
- [GET /zones/{zone_id}/schema_validation/settings/operations](operations/schema_validation_list_per_operation_settings.yaml): List per-operation schema validation settings
- [PATCH /zones/{zone_id}/schema_validation/settings/operations](operations/schema_validation_bulk_edit_per_operation_settings.yaml): Bulk edit per-operation schema validation settings
- [GET /zones/{zone_id}/schema_validation/settings/operations/{operation_id}](operations/schema_validation_get_per_operation_setting.yaml): Get per-operation schema validation setting
- [PUT /zones/{zone_id}/schema_validation/settings/operations/{operation_id}](operations/schema_validation_update_per_operation_setting.yaml): Update per-operation schema validation setting
- [DELETE /zones/{zone_id}/schema_validation/settings/operations/{operation_id}](operations/schema_validation_delete_per_operation_setting.yaml): Delete per-operation schema validation setting

## Secondary DNS (ACL)

- [Secondary DNS (ACL) operations](tags/secondary_dns_acl.yaml) All 'Secondary DNS (ACL)' operations in one file
- [GET /accounts/{account_id}/secondary_dns/acls](operations/secondary_dns_acl_list_ac_ls.yaml): List ACLs
- [POST /accounts/{account_id}/secondary_dns/acls](operations/secondary_dns_acl_create_acl.yaml): Create ACL
- [GET /accounts/{account_id}/secondary_dns/acls/{acl_id}](operations/secondary_dns_acl_acl_details.yaml): ACL Details
- [PUT /accounts/{account_id}/secondary_dns/acls/{acl_id}](operations/secondary_dns_acl_update_acl.yaml): Update ACL
- [DELETE /accounts/{account_id}/secondary_dns/acls/{acl_id}](operations/secondary_dns_acl_delete_acl.yaml): Delete ACL

## Secondary DNS (Peer)

- [Secondary DNS (Peer) operations](tags/secondary_dns_peer.yaml) All 'Secondary DNS (Peer)' operations in one file
- [GET /accounts/{account_id}/secondary_dns/peers](operations/secondary_dns_peer_list_peers.yaml): List Peers
- [POST /accounts/{account_id}/secondary_dns/peers](operations/secondary_dns_peer_create_peer.yaml): Create Peer
- [GET /accounts/{account_id}/secondary_dns/peers/{peer_id}](operations/secondary_dns_peer_peer_details.yaml): Peer Details
- [PUT /accounts/{account_id}/secondary_dns/peers/{peer_id}](operations/secondary_dns_peer_update_peer.yaml): Update Peer
- [DELETE /accounts/{account_id}/secondary_dns/peers/{peer_id}](operations/secondary_dns_peer_delete_peer.yaml): Delete Peer

## Secondary DNS (Primary Zone)

- [Secondary DNS (Primary Zone) operations](tags/secondary_dns_primary_zone.yaml) All 'Secondary DNS (Primary Zone)' operations in one file
- [GET /zones/{zone_id}/secondary_dns/outgoing](operations/secondary_dns_primary_zone_primary_zone_configuration_details.yaml): Primary Zone Configuration Details
- [POST /zones/{zone_id}/secondary_dns/outgoing](operations/secondary_dns_primary_zone_create_primary_zone_configuration.yaml): Create Primary Zone Configuration
- [PUT /zones/{zone_id}/secondary_dns/outgoing](operations/secondary_dns_primary_zone_update_primary_zone_configuration.yaml): Update Primary Zone Configuration
- [DELETE /zones/{zone_id}/secondary_dns/outgoing](operations/secondary_dns_primary_zone_delete_primary_zone_configuration.yaml): Delete Primary Zone Configuration
- [POST /zones/{zone_id}/secondary_dns/outgoing/disable](operations/secondary_dns_primary_zone_disable_outgoing_zone_transfers.yaml): Disable Outgoing Zone Transfers
- [POST /zones/{zone_id}/secondary_dns/outgoing/enable](operations/secondary_dns_primary_zone_enable_outgoing_zone_transfers.yaml): Enable Outgoing Zone Transfers
- [POST /zones/{zone_id}/secondary_dns/outgoing/force_notify](operations/secondary_dns_primary_zone_force_dns_notify.yaml): Force DNS NOTIFY
- [GET /zones/{zone_id}/secondary_dns/outgoing/status](operations/secondary_dns_primary_zone_get_outgoing_zone_transfer_status.yaml): Get Outgoing Zone Transfer Status

## Secondary DNS (Secondary Zone)

- [Secondary DNS (Secondary Zone) operations](tags/secondary_dns_secondary_zone.yaml) All 'Secondary DNS (Secondary Zone)' operations in one file
- [POST /zones/{zone_id}/secondary_dns/force_axfr](operations/secondary_dns_secondary_zone_force_axfr.yaml): Force AXFR
- [GET /zones/{zone_id}/secondary_dns/incoming](operations/secondary_dns_secondary_zone_secondary_zone_configuration_details.yaml): Secondary Zone Configuration Details
- [POST /zones/{zone_id}/secondary_dns/incoming](operations/secondary_dns_secondary_zone_create_secondary_zone_configuration.yaml): Create Secondary Zone Configuration
- [PUT /zones/{zone_id}/secondary_dns/incoming](operations/secondary_dns_secondary_zone_update_secondary_zone_configuration.yaml): Update Secondary Zone Configuration
- [DELETE /zones/{zone_id}/secondary_dns/incoming](operations/secondary_dns_secondary_zone_delete_secondary_zone_configuration.yaml): Delete Secondary Zone Configuration

## Secondary DNS (TSIG)

- [Secondary DNS (TSIG) operations](tags/secondary_dns_tsig.yaml) All 'Secondary DNS (TSIG)' operations in one file
- [GET /accounts/{account_id}/secondary_dns/tsigs](operations/secondary_dns_tsig_list_tsi_gs.yaml): List TSIGs
- [POST /accounts/{account_id}/secondary_dns/tsigs](operations/secondary_dns_tsig_create_tsig.yaml): Create TSIG
- [GET /accounts/{account_id}/secondary_dns/tsigs/{tsig_id}](operations/secondary_dns_tsig_tsig_details.yaml): TSIG Details
- [PUT /accounts/{account_id}/secondary_dns/tsigs/{tsig_id}](operations/secondary_dns_tsig_update_tsig.yaml): Update TSIG
- [DELETE /accounts/{account_id}/secondary_dns/tsigs/{tsig_id}](operations/secondary_dns_tsig_delete_tsig.yaml): Delete TSIG

## Secrets Store

- [Secrets Store operations](tags/secrets_store.yaml) All 'Secrets Store' operations in one file
- [GET /accounts/{account_id}/secrets_store/quota](operations/secrets_store_quota.yaml): View secret usage
- [GET /accounts/{account_id}/secrets_store/stores](operations/secrets_store_list.yaml): List account stores
- [POST /accounts/{account_id}/secrets_store/stores](operations/secrets_store_create.yaml): Create a store
- [DELETE /accounts/{account_id}/secrets_store/stores/{store_id}](operations/secrets_store_delete_by_id.yaml): Delete a store
- [GET /accounts/{account_id}/secrets_store/stores/{store_id}/secrets](operations/secrets_store_secrets_list.yaml): List store secrets
- [POST /accounts/{account_id}/secrets_store/stores/{store_id}/secrets](operations/secrets_store_secret_create.yaml): Create a secret
- [DELETE /accounts/{account_id}/secrets_store/stores/{store_id}/secrets](operations/secrets_store_delete_bulk.yaml): Delete secrets
- [GET /accounts/{account_id}/secrets_store/stores/{store_id}/secrets/{secret_id}](operations/secrets_store_get_by_id.yaml): Get a secret by ID
- [PATCH /accounts/{account_id}/secrets_store/stores/{store_id}/secrets/{secret_id}](operations/secrets_store_patch_by_id.yaml): Patch a secret
- [DELETE /accounts/{account_id}/secrets_store/stores/{store_id}/secrets/{secret_id}](operations/secrets_store_secret_delete_by_id.yaml): Delete a secret
- [POST /accounts/{account_id}/secrets_store/stores/{store_id}/secrets/{secret_id}/duplicate](operations/secrets_store_duplicate_by_id.yaml): Duplicate Secret

## Security Center Insights

- [Security Center Insights operations](tags/security_center_insights.yaml) All 'Security Center Insights' operations in one file
- [GET /accounts/{account_id}/intel/attack-surface-report/issue-types](operations/get_security_center_issue_types.yaml): Get Security Center Issues Types
- [GET /accounts/{account_id}/intel/attack-surface-report/issues](operations/get_security_center_issues.yaml): Get Security Center Issues
- [GET /accounts/{account_id}/intel/attack-surface-report/issues/class](operations/get_security_center_issue_counts_by_class.yaml): Get Security Center Issue Counts by Class
- [GET /accounts/{account_id}/intel/attack-surface-report/issues/severity](operations/get_security_center_issue_counts_by_severity.yaml): Get Security Center Issue Counts by Severity
- [GET /accounts/{account_id}/intel/attack-surface-report/issues/type](operations/get_security_center_issue_counts_by_type.yaml): Get Security Center Issue Counts by Type
- [PUT /accounts/{account_id}/intel/attack-surface-report/{issue_id}/dismiss](operations/archive_security_center_insight_deprecated.yaml): Archive Security Center Insight
- [GET /accounts/{account_id}/security-center/insights](operations/get_security_center_insights.yaml): Get Security Center Insights
- [GET /accounts/{account_id}/security-center/insights/class](operations/get_security_center_insight_counts_by_class.yaml): Get Security Center Insight Counts by Class
- [GET /accounts/{account_id}/security-center/insights/severity](operations/get_security_center_insight_counts_by_severity.yaml): Get Security Center Insight Counts by Severity
- [GET /accounts/{account_id}/security-center/insights/type](operations/get_security_center_insight_counts_by_type.yaml): Get Security Center Insight Counts by Type
- [PUT /accounts/{account_id}/security-center/insights/{issue_id}/dismiss](operations/archive_security_center_insight.yaml): Archive Security Center Insight
- [GET /zones/{zone_id}/security-center/insights](operations/get_zone_security_center_insights.yaml): Get Zone Security Center Insights
- [GET /zones/{zone_id}/security-center/insights/class](operations/get_zone_security_center_insight_counts_by_class.yaml): Get Zone Security Center Insight Counts by Class
- [GET /zones/{zone_id}/security-center/insights/severity](operations/get_zone_security_center_insight_counts_by_severity.yaml): Get Zone Security Center Insight Counts by Severity
- [GET /zones/{zone_id}/security-center/insights/type](operations/get_zone_security_center_insight_counts_by_type.yaml): Get Zone Security Center Insight Counts by Type
- [PUT /zones/{zone_id}/security-center/insights/{issue_id}/dismiss](operations/archive_zone_security_center_insight.yaml): Archive Zone Security Center Insight

## Settings

- [Settings operations](tags/settings.yaml) All 'Settings' operations in one file
- [GET /accounts/{account_id}/cni/settings](operations/get_settings.yaml): Get the current settings for the active account
- [PUT /accounts/{account_id}/cni/settings](operations/update_settings.yaml): Update the current settings for the active account

## Sinkhole Config

- [Sinkhole Config operations](tags/sinkhole_config.yaml) All 'Sinkhole Config' operations in one file
- [GET /accounts/{account_id}/intel/sinkholes](operations/sinkhole_config_get_sinkholes.yaml): List sinkholes owned by this account

## Slots

- [Slots operations](tags/slots.yaml) All 'Slots' operations in one file
- [GET /accounts/{account_id}/cni/slots](operations/list_slots.yaml): Retrieve a list of all slots matching the specified parameters
- [GET /accounts/{account_id}/cni/slots/{slot}](operations/get_slot.yaml): Get information about the specified slot

## Smart Tiered Cache

- [Smart Tiered Cache operations](tags/smart_tiered_cache.yaml) All 'Smart Tiered Cache' operations in one file
- [GET /zones/{zone_id}/cache/tiered_cache_smart_topology_enable](operations/smart_tiered_cache_get_smart_tiered_cache_setting.yaml): Get Smart Tiered Cache setting
- [PATCH /zones/{zone_id}/cache/tiered_cache_smart_topology_enable](operations/smart_tiered_cache_patch_smart_tiered_cache_setting.yaml): Patch Smart Tiered Cache setting
- [DELETE /zones/{zone_id}/cache/tiered_cache_smart_topology_enable](operations/smart_tiered_cache_delete_smart_tiered_cache_setting.yaml): Delete Smart Tiered Cache setting

## Spectrum Analytics

- [Spectrum Analytics operations](tags/spectrum_analytics.yaml) All 'Spectrum Analytics' operations in one file
- [GET /zones/{zone_id}/spectrum/analytics/aggregate/current](operations/spectrum_aggregate_analytics_get_current_aggregated_analytics.yaml): Get current aggregated analytics
- [GET /zones/{zone_id}/spectrum/analytics/events/bytime](operations/spectrum_analytics_by_time_get_analytics_by_time.yaml): Get analytics by time
- [GET /zones/{zone_id}/spectrum/analytics/events/summary](operations/spectrum_analytics_summary_get_analytics_summary.yaml): Get analytics summary

## Spectrum Applications

- [Spectrum Applications operations](tags/spectrum_applications.yaml) All 'Spectrum Applications' operations in one file
- [GET /zones/{zone_id}/spectrum/apps](operations/spectrum_applications_list_spectrum_applications.yaml): List Spectrum applications
- [POST /zones/{zone_id}/spectrum/apps](operations/spectrum_applications_create_spectrum_application_using_a_name_for_the_origin.yaml): Create Spectrum application using a name for the origin
- [GET /zones/{zone_id}/spectrum/apps/{app_id}](operations/spectrum_applications_get_spectrum_application_configuration.yaml): Get Spectrum application configuration
- [PUT /zones/{zone_id}/spectrum/apps/{app_id}](operations/spectrum_applications_update_spectrum_application_configuration_using_a_name_for_the_origin.yaml): Update Spectrum application configuration using a name for the origin
- [DELETE /zones/{zone_id}/spectrum/apps/{app_id}](operations/spectrum_applications_delete_spectrum_application.yaml): Delete Spectrum application

## Stream Audio Tracks

- [Stream Audio Tracks operations](tags/stream_audio_tracks.yaml) All 'Stream Audio Tracks' operations in one file
- [GET /accounts/{account_id}/stream/{identifier}/audio](operations/list_audio_tracks.yaml): List additional audio tracks on a video
- [POST /accounts/{account_id}/stream/{identifier}/audio/copy](operations/add_audio_track.yaml): Add audio tracks to a video
- [PATCH /accounts/{account_id}/stream/{identifier}/audio/{audio_identifier}](operations/edit_audio_tracks.yaml): Edit additional audio tracks on a video
- [DELETE /accounts/{account_id}/stream/{identifier}/audio/{audio_identifier}](operations/delete_audio_tracks.yaml): Delete additional audio tracks on a video

## Stream Live Inputs

- [Stream Live Inputs operations](tags/stream_live_inputs.yaml) All 'Stream Live Inputs' operations in one file
- [GET /accounts/{account_id}/stream/live_inputs](operations/stream_live_inputs_list_live_inputs.yaml): List live inputs
- [POST /accounts/{account_id}/stream/live_inputs](operations/stream_live_inputs_create_a_live_input.yaml): Create a live input
- [GET /accounts/{account_id}/stream/live_inputs/{live_input_identifier}](operations/stream_live_inputs_retrieve_a_live_input.yaml): Retrieve a live input
- [PUT /accounts/{account_id}/stream/live_inputs/{live_input_identifier}](operations/stream_live_inputs_update_a_live_input.yaml): Update a live input
- [DELETE /accounts/{account_id}/stream/live_inputs/{live_input_identifier}](operations/stream_live_inputs_delete_a_live_input.yaml): Delete a live input
- [GET /accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs](operations/stream_live_inputs_list_all_outputs_associated_with_a_specified_live_input.yaml): List all outputs associated with a specified live input
- [POST /accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs](operations/stream_live_inputs_create_a_new_output_connected_to_a_live_input.yaml): Create a new output, connected to a live input
- [PUT /accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}](operations/stream_live_inputs_update_an_output.yaml): Update an output
- [DELETE /accounts/{account_id}/stream/live_inputs/{live_input_identifier}/outputs/{output_identifier}](operations/stream_live_inputs_delete_an_output.yaml): Delete an output

## Stream MP4 Downloads

- [Stream MP4 Downloads operations](tags/stream_mp4_downloads.yaml) All 'Stream MP4 Downloads' operations in one file
- [GET /accounts/{account_id}/stream/{identifier}/downloads](operations/stream_m_p_4_downloads_list_downloads.yaml): List downloads
- [POST /accounts/{account_id}/stream/{identifier}/downloads](operations/stream_m_p_4_downloads_create_downloads.yaml): Create downloads
- [DELETE /accounts/{account_id}/stream/{identifier}/downloads](operations/stream_m_p_4_downloads_delete_downloads.yaml): Delete downloads

## Stream Signing Keys

- [Stream Signing Keys operations](tags/stream_signing_keys.yaml) All 'Stream Signing Keys' operations in one file
- [GET /accounts/{account_id}/stream/keys](operations/stream_signing_keys_list_signing_keys.yaml): List signing keys
- [POST /accounts/{account_id}/stream/keys](operations/stream_signing_keys_create_signing_keys.yaml): Create signing keys
- [DELETE /accounts/{account_id}/stream/keys/{identifier}](operations/stream_signing_keys_delete_signing_keys.yaml): Delete signing keys

## Stream Subtitles/Captions

- [Stream Subtitles/Captions operations](tags/stream_subtitles_captions.yaml) All 'Stream Subtitles/Captions' operations in one file
- [GET /accounts/{account_id}/stream/{identifier}/captions](operations/stream_subtitles_captions_list_captions_or_subtitles.yaml): List captions or subtitles
- [GET /accounts/{account_id}/stream/{identifier}/captions/{language}](operations/stream_subtitles_captions_get_caption_or_subtitle_for_language.yaml): List captions or subtitles for a provided language
- [PUT /accounts/{account_id}/stream/{identifier}/captions/{language}](operations/stream_subtitles_captions_upload_captions_or_subtitles.yaml): Upload captions or subtitles
- [DELETE /accounts/{account_id}/stream/{identifier}/captions/{language}](operations/stream_subtitles_captions_delete_captions_or_subtitles.yaml): Delete captions or subtitles
- [POST /accounts/{account_id}/stream/{identifier}/captions/{language}/generate](operations/stream_subtitles_captions_generate_caption_or_subtitle_for_language.yaml): Generate captions or subtitles for a provided language via AI
- [GET /accounts/{account_id}/stream/{identifier}/captions/{language}/vtt](operations/stream_subtitles_captions_get_vtt_caption_or_subtitle.yaml): Return WebVTT captions for a provided language

## Stream Video Clipping

- [Stream Video Clipping operations](tags/stream_video_clipping.yaml) All 'Stream Video Clipping' operations in one file
- [POST /accounts/{account_id}/stream/clip](operations/stream_video_clipping_clip_videos_given_a_start_and_end_time.yaml): Clip videos given a start and end time

## Stream Videos

- [Stream Videos operations](tags/stream_videos.yaml) All 'Stream Videos' operations in one file
- [GET /accounts/{account_id}/stream](operations/stream_videos_list_videos.yaml): List videos
- [POST /accounts/{account_id}/stream](operations/stream_videos_initiate_video_uploads_using_tus.yaml): Initiate video uploads using TUS
- [POST /accounts/{account_id}/stream/copy](operations/stream_videos_upload_videos_from_a_url.yaml): Upload videos from a URL
- [POST /accounts/{account_id}/stream/direct_upload](operations/stream_videos_upload_videos_via_direct_upload_ur_ls.yaml): Upload videos via direct upload URLs
- [GET /accounts/{account_id}/stream/storage-usage](operations/stream_videos_storage_usage.yaml): Storage use
- [GET /accounts/{account_id}/stream/{identifier}](operations/stream_videos_retrieve_video_details.yaml): Retrieve video details
- [POST /accounts/{account_id}/stream/{identifier}](operations/stream_videos_update_video_details.yaml): Edit video details
- [DELETE /accounts/{account_id}/stream/{identifier}](operations/stream_videos_delete_video.yaml): Delete video
- [GET /accounts/{account_id}/stream/{identifier}/embed](operations/stream_videos_retreieve_embed_code_html.yaml): Retrieve embed Code HTML
- [POST /accounts/{account_id}/stream/{identifier}/token](operations/stream_videos_create_signed_url_tokens_for_videos.yaml): Create signed URL tokens for videos

## Stream Watermark Profile

- [Stream Watermark Profile operations](tags/stream_watermark_profile.yaml) All 'Stream Watermark Profile' operations in one file
- [GET /accounts/{account_id}/stream/watermarks](operations/stream_watermark_profile_list_watermark_profiles.yaml): List watermark profiles
- [POST /accounts/{account_id}/stream/watermarks](operations/stream_watermark_profile_create_watermark_profiles_via_basic_upload.yaml): Create watermark profiles via basic upload
- [GET /accounts/{account_id}/stream/watermarks/{identifier}](operations/stream_watermark_profile_watermark_profile_details.yaml): Watermark profile details
- [DELETE /accounts/{account_id}/stream/watermarks/{identifier}](operations/stream_watermark_profile_delete_watermark_profiles.yaml): Delete watermark profiles

## Stream Webhook

- [Stream Webhook operations](tags/stream_webhook.yaml) All 'Stream Webhook' operations in one file
- [GET /accounts/{account_id}/stream/webhook](operations/stream_webhook_view_webhooks.yaml): View webhooks
- [PUT /accounts/{account_id}/stream/webhook](operations/stream_webhook_create_webhooks.yaml): Create webhooks
- [DELETE /accounts/{account_id}/stream/webhook](operations/stream_webhook_delete_webhooks.yaml): Delete webhooks

## Tag

- [Tag operations](tags/tag.yaml) All 'Tag' operations in one file
- [POST /accounts/{account_id}/cloudforce-one/events/tags/create](operations/post_tagcreate.yaml): Creates a new tag

## Target Industry

- [Target Industry operations](tags/target_industry.yaml) All 'Target Industry' operations in one file
- [GET /accounts/{account_id}/cloudforce-one/events/targetIndustries](operations/get_targetindustrylist.yaml): Lists all target industries

## Tiered Caching

- [Tiered Caching operations](tags/tiered_caching.yaml) All 'Tiered Caching' operations in one file
- [GET /zones/{zone_id}/argo/tiered_caching](operations/tiered_caching_get_tiered_caching_setting.yaml): Get Tiered Caching setting
- [PATCH /zones/{zone_id}/argo/tiered_caching](operations/tiered_caching_patch_tiered_caching_setting.yaml): Patch Tiered Caching setting

## Total TLS

- [Total TLS operations](tags/total_tls.yaml) All 'Total TLS' operations in one file
- [GET /zones/{zone_id}/acm/total_tls](operations/total_tls_total_tls_settings_details.yaml): Total TLS Settings Details
- [POST /zones/{zone_id}/acm/total_tls](operations/total_tls_enable_or_disable_total_tls.yaml): Enable or Disable Total TLS

## Tunnel Routing

- [Tunnel Routing operations](tags/tunnel_routing.yaml) All 'Tunnel Routing' operations in one file
- [GET /accounts/{account_id}/teamnet/routes](operations/tunnel_route_list_tunnel_routes.yaml): List tunnel routes
- [POST /accounts/{account_id}/teamnet/routes](operations/tunnel_route_create_a_tunnel_route.yaml): Create a tunnel route
- [GET /accounts/{account_id}/teamnet/routes/ip/{ip}](operations/tunnel_route_get_tunnel_route_by_ip.yaml): Get tunnel route by IP
- [POST /accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}](operations/tunnel_route_create_a_tunnel_route_with_cidr.yaml): Create a tunnel route (CIDR Endpoint)
- [PATCH /accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}](operations/tunnel_route_update_a_tunnel_route_with_cidr.yaml): Update a tunnel route (CIDR Endpoint)
- [DELETE /accounts/{account_id}/teamnet/routes/network/{ip_network_encoded}](operations/tunnel_route_delete_a_tunnel_route_with_cidr.yaml): Delete a tunnel route (CIDR Endpoint)
- [GET /accounts/{account_id}/teamnet/routes/{route_id}](operations/tunnel_route_get_tunnel_route.yaml): Get tunnel route
- [PATCH /accounts/{account_id}/teamnet/routes/{route_id}](operations/tunnel_route_update_a_tunnel_route.yaml): Update a tunnel route
- [DELETE /accounts/{account_id}/teamnet/routes/{route_id}](operations/tunnel_route_delete_a_tunnel_route.yaml): Delete a tunnel route

## Tunnel Virtual Network

- [Tunnel Virtual Network operations](tags/tunnel_virtual_network.yaml) All 'Tunnel Virtual Network' operations in one file
- [GET /accounts/{account_id}/teamnet/virtual_networks](operations/tunnel_virtual_network_list_virtual_networks.yaml): List virtual networks
- [POST /accounts/{account_id}/teamnet/virtual_networks](operations/tunnel_virtual_network_create_a_virtual_network.yaml): Create a virtual network
- [GET /accounts/{account_id}/teamnet/virtual_networks/{virtual_network_id}](operations/tunnel_virtual_network_get.yaml): Get a virtual network
- [PATCH /accounts/{account_id}/teamnet/virtual_networks/{virtual_network_id}](operations/tunnel_virtual_network_update.yaml): Update a virtual network
- [DELETE /accounts/{account_id}/teamnet/virtual_networks/{virtual_network_id}](operations/tunnel_virtual_network_delete.yaml): Delete a virtual network

## Turnstile

- [Turnstile operations](tags/turnstile.yaml) All 'Turnstile' operations in one file
- [GET /accounts/{account_id}/challenges/widgets](operations/accounts_turnstile_widgets_list.yaml): List Turnstile Widgets
- [POST /accounts/{account_id}/challenges/widgets](operations/accounts_turnstile_widget_create.yaml): Create a Turnstile Widget
- [GET /accounts/{account_id}/challenges/widgets/{sitekey}](operations/accounts_turnstile_widget_get.yaml): Turnstile Widget Details
- [PUT /accounts/{account_id}/challenges/widgets/{sitekey}](operations/accounts_turnstile_widget_update.yaml): Update a Turnstile Widget
- [DELETE /accounts/{account_id}/challenges/widgets/{sitekey}](operations/accounts_turnstile_widget_delete.yaml): Delete a Turnstile Widget
- [POST /accounts/{account_id}/challenges/widgets/{sitekey}/rotate_secret](operations/accounts_turnstile_widget_rotate_secret.yaml): Rotate Secret for a Turnstile Widget

## URL Normalization

- [URL Normalization operations](tags/url_normalization.yaml) All 'URL Normalization' operations in one file
- [GET /zones/{zone_id}/url_normalization](operations/geturlnormalization.yaml): Get URL Normalization settings
- [PUT /zones/{zone_id}/url_normalization](operations/updateurlnormalization.yaml): Update URL Normalization settings
- [DELETE /zones/{zone_id}/url_normalization](operations/deleteurlnormalization.yaml): Delete URL Normalization settings

## URL Scanner

- [URL Scanner operations](tags/url_scanner.yaml) All 'URL Scanner' operations in one file
- [POST /accounts/{account_id}/urlscanner/v2/bulk](operations/urlscanner_create_scan_bulk_v2.yaml): Bulk create URL Scans
- [GET /accounts/{account_id}/urlscanner/v2/dom/{scan_id}](operations/urlscanner_get_scan_dom_v2.yaml): Get URL scan's DOM
- [GET /accounts/{account_id}/urlscanner/v2/har/{scan_id}](operations/urlscanner_get_scan_har_v2.yaml): Get URL scan's HAR
- [GET /accounts/{account_id}/urlscanner/v2/responses/{response_id}](operations/urlscanner_get_response_v2.yaml): Get raw response
- [GET /accounts/{account_id}/urlscanner/v2/result/{scan_id}](operations/urlscanner_get_scan_v2.yaml): Get URL scan
- [POST /accounts/{account_id}/urlscanner/v2/scan](operations/urlscanner_create_scan_v2.yaml): Create URL Scan
- [GET /accounts/{account_id}/urlscanner/v2/screenshots/{scan_id}.png](operations/urlscanner_get_scan_screenshot_v2.yaml): Get screenshot
- [GET /accounts/{account_id}/urlscanner/v2/search](operations/urlscanner_search_scans_v2.yaml): Search URL scans

## URL Scanner (Deprecated)

- [URL Scanner (Deprecated) operations](tags/url_scanner_deprecated.yaml) All 'URL Scanner (Deprecated)' operations in one file
- [GET /accounts/{account_id}/urlscanner/response/{response_id}](operations/urlscanner_get_response_text.yaml): Get raw response
- [GET /accounts/{account_id}/urlscanner/scan](operations/urlscanner_search_scans.yaml): Search URL scans
- [POST /accounts/{account_id}/urlscanner/scan](operations/urlscanner_create_scan.yaml): Create URL Scan
- [GET /accounts/{account_id}/urlscanner/scan/{scan_id}](operations/urlscanner_get_scan.yaml): Get URL scan
- [GET /accounts/{account_id}/urlscanner/scan/{scan_id}/har](operations/urlscanner_get_scan_har.yaml): Get URL scan's HAR
- [GET /accounts/{account_id}/urlscanner/scan/{scan_id}/screenshot](operations/urlscanner_get_scan_screenshot.yaml): Get screenshot

## Universal SSL Settings for a Zone

- [Universal SSL Settings for a Zone operations](tags/universal_ssl_settings_for_a_zone.yaml) All 'Universal SSL Settings for a Zone' operations in one file
- [GET /zones/{zone_id}/ssl/universal/settings](operations/universal_ssl_settings_for_a_zone_universal_ssl_settings_details.yaml): Universal SSL Settings Details
- [PATCH /zones/{zone_id}/ssl/universal/settings](operations/universal_ssl_settings_for_a_zone_edit_universal_ssl_settings.yaml): Edit Universal SSL Settings

## User

- [User operations](tags/user.yaml) All 'User' operations in one file
- [GET /user](operations/user_user_details.yaml): User Details
- [PATCH /user](operations/user_edit_user.yaml): Edit User

## User API Tokens

- [User API Tokens operations](tags/user_api_tokens.yaml) All 'User API Tokens' operations in one file
- [GET /user/tokens](operations/user_api_tokens_list_tokens.yaml): List Tokens
- [POST /user/tokens](operations/user_api_tokens_create_token.yaml): Create Token
- [GET /user/tokens/permission_groups](operations/permission_groups_list_permission_groups.yaml): List Token Permission Groups
- [GET /user/tokens/verify](operations/user_api_tokens_verify_token.yaml): Verify Token
- [GET /user/tokens/{token_id}](operations/user_api_tokens_token_details.yaml): Token Details
- [PUT /user/tokens/{token_id}](operations/user_api_tokens_update_token.yaml): Update Token
- [DELETE /user/tokens/{token_id}](operations/user_api_tokens_delete_token.yaml): Delete Token
- [PUT /user/tokens/{token_id}/value](operations/user_api_tokens_roll_token.yaml): Roll Token

## User Agent Blocking rules

- [User Agent Blocking rules operations](tags/user_agent_blocking_rules.yaml) All 'User Agent Blocking rules' operations in one file
- [GET /zones/{zone_id}/firewall/ua_rules](operations/user_agent_blocking_rules_list_user_agent_blocking_rules.yaml): List User Agent Blocking rules
- [POST /zones/{zone_id}/firewall/ua_rules](operations/user_agent_blocking_rules_create_a_user_agent_blocking_rule.yaml): Create a User Agent Blocking rule
- [GET /zones/{zone_id}/firewall/ua_rules/{ua_rule_id}](operations/user_agent_blocking_rules_get_a_user_agent_blocking_rule.yaml): Get a User Agent Blocking rule
- [PUT /zones/{zone_id}/firewall/ua_rules/{ua_rule_id}](operations/user_agent_blocking_rules_update_a_user_agent_blocking_rule.yaml): Update a User Agent Blocking rule
- [DELETE /zones/{zone_id}/firewall/ua_rules/{ua_rule_id}](operations/user_agent_blocking_rules_delete_a_user_agent_blocking_rule.yaml): Delete a User Agent Blocking rule

## User Billing History

- [User Billing History operations](tags/user_billing_history.yaml) All 'User Billing History' operations in one file
- [GET /user/billing/history](operations/user_billing_history_deprecated_billing_history_details.yaml): Billing History Details

## User Billing Profile

- [User Billing Profile operations](tags/user_billing_profile.yaml) All 'User Billing Profile' operations in one file
- [GET /user/billing/profile](operations/user_billing_profile_deprecated_billing_profile_details.yaml): Billing Profile Details

## User Subscription

- [User Subscription operations](tags/user_subscription.yaml) All 'User Subscription' operations in one file
- [GET /user/subscriptions](operations/user_subscription_get_user_subscriptions.yaml): Get User Subscriptions
- [PUT /user/subscriptions/{identifier}](operations/user_subscription_update_user_subscription.yaml): Update User Subscription
- [DELETE /user/subscriptions/{identifier}](operations/user_subscription_delete_user_subscription.yaml): Delete User Subscription

## User's Account Memberships

- [User's Account Memberships operations](tags/user_s_account_memberships.yaml) All 'User's Account Memberships' operations in one file
- [GET /memberships](operations/user_s_account_memberships_list_memberships.yaml): List Memberships
- [GET /memberships/{membership_id}](operations/user_s_account_memberships_membership_details.yaml): Membership Details
- [PUT /memberships/{membership_id}](operations/user_s_account_memberships_update_membership.yaml): Update Membership
- [DELETE /memberships/{membership_id}](operations/user_s_account_memberships_delete_membership.yaml): Delete Membership

## User's Invites

- [User's Invites operations](tags/user_s_invites.yaml) All 'User's Invites' operations in one file
- [GET /user/invites](operations/user_s_invites_list_invitations.yaml): List Invitations
- [GET /user/invites/{invite_id}](operations/user_s_invites_invitation_details.yaml): Invitation Details
- [PATCH /user/invites/{invite_id}](operations/user_s_invites_respond_to_invitation.yaml): Respond to Invitation

## User's Organizations

- [User's Organizations operations](tags/user_s_organizations.yaml) All 'User's Organizations' operations in one file
- [GET /user/organizations](operations/user_s_organizations_list_organizations.yaml): List Organizations
- [GET /user/organizations/{organization_id}](operations/user_s_organizations_organization_details.yaml): Organization Details
- [DELETE /user/organizations/{organization_id}](operations/user_s_organizations_leave_organization.yaml): Leave Organization

## Values

- [Values operations](tags/values.yaml) All 'Values' operations in one file
- [POST /accounts/{account_id}/workers/observability/telemetry/values](operations/telemetry_values_list.yaml): List values

## Vectorize

- [Vectorize operations](tags/vectorize.yaml) All 'Vectorize' operations in one file
- [GET /accounts/{account_id}/vectorize/v2/indexes](operations/vectorize_list_vectorize_indexes.yaml): List Vectorize Indexes
- [POST /accounts/{account_id}/vectorize/v2/indexes](operations/vectorize_create_vectorize_index.yaml): Create Vectorize Index
- [GET /accounts/{account_id}/vectorize/v2/indexes/{index_name}](operations/vectorize_get_vectorize_index.yaml): Get Vectorize Index
- [DELETE /accounts/{account_id}/vectorize/v2/indexes/{index_name}](operations/vectorize_delete_vectorize_index.yaml): Delete Vectorize Index
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/delete_by_ids](operations/vectorize_delete_vectors_by_id.yaml): Delete Vectors By Identifier
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/get_by_ids](operations/vectorize_get_vectors_by_id.yaml): Get Vectors By Identifier
- [GET /accounts/{account_id}/vectorize/v2/indexes/{index_name}/info](operations/vectorize_index_info.yaml): Get Vectorize Index Info
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/insert](operations/vectorize_insert_vector.yaml): Insert Vectors
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/metadata_index/create](operations/vectorize_create_metadata_index.yaml): Create Metadata Index
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/metadata_index/delete](operations/vectorize_delete_metadata_index.yaml): Delete Metadata Index
- [GET /accounts/{account_id}/vectorize/v2/indexes/{index_name}/metadata_index/list](operations/vectorize_list_metadata_indexes.yaml): List Metadata Indexes
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/query](operations/vectorize_query_vector.yaml): Query Vectors
- [POST /accounts/{account_id}/vectorize/v2/indexes/{index_name}/upsert](operations/vectorize_upsert_vector.yaml): Upsert Vectors

## Vectorize Beta (Deprecated)

- [Vectorize Beta (Deprecated) operations](tags/vectorize_beta_deprecated.yaml) All 'Vectorize Beta (Deprecated)' operations in one file
- [GET /accounts/{account_id}/vectorize/indexes](operations/vectorize_deprecated_list_vectorize_indexes.yaml): List Vectorize Indexes (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes](operations/vectorize_deprecated_create_vectorize_index.yaml): Create Vectorize Index (Deprecated)
- [GET /accounts/{account_id}/vectorize/indexes/{index_name}](operations/vectorize_deprecated_get_vectorize_index.yaml): Get Vectorize Index (Deprecated)
- [PUT /accounts/{account_id}/vectorize/indexes/{index_name}](operations/vectorize_deprecated_update_vectorize_index.yaml): Update Vectorize Index (Deprecated)
- [DELETE /accounts/{account_id}/vectorize/indexes/{index_name}](operations/vectorize_deprecated_delete_vectorize_index.yaml): Delete Vectorize Index (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes/{index_name}/delete-by-ids](operations/vectorize_deprecated_delete_vectors_by_id.yaml): Delete Vectors By Identifier (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes/{index_name}/get-by-ids](operations/vectorize_deprecated_get_vectors_by_id.yaml): Get Vectors By Identifier (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes/{index_name}/insert](operations/vectorize_deprecated_insert_vector.yaml): Insert Vectors (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes/{index_name}/query](operations/vectorize_deprecated_query_vector.yaml): Query Vectors (Deprecated)
- [POST /accounts/{account_id}/vectorize/indexes/{index_name}/upsert](operations/vectorize_deprecated_upsert_vector.yaml): Upsert Vectors (Deprecated)

## WAF overrides

- [WAF overrides operations](tags/waf_overrides.yaml) All 'WAF overrides' operations in one file
- [GET /zones/{zone_id}/firewall/waf/overrides](operations/waf_overrides_list_waf_overrides.yaml): List WAF overrides
- [POST /zones/{zone_id}/firewall/waf/overrides](operations/waf_overrides_create_a_waf_override.yaml): Create a WAF override
- [GET /zones/{zone_id}/firewall/waf/overrides/{overrides_id}](operations/waf_overrides_get_a_waf_override.yaml): Get a WAF override
- [PUT /zones/{zone_id}/firewall/waf/overrides/{overrides_id}](operations/waf_overrides_update_waf_override.yaml): Update WAF override
- [DELETE /zones/{zone_id}/firewall/waf/overrides/{overrides_id}](operations/waf_overrides_delete_a_waf_override.yaml): Delete a WAF override

## WAF packages

- [WAF packages operations](tags/waf_packages.yaml) All 'WAF packages' operations in one file
- [GET /zones/{zone_id}/firewall/waf/packages](operations/waf_packages_list_waf_packages.yaml): List WAF packages
- [GET /zones/{zone_id}/firewall/waf/packages/{package_id}](operations/waf_packages_get_a_waf_package.yaml): Get a WAF package
- [PATCH /zones/{zone_id}/firewall/waf/packages/{package_id}](operations/waf_packages_update_a_waf_package.yaml): Update a WAF package

## WAF rule groups

- [WAF rule groups operations](tags/waf_rule_groups.yaml) All 'WAF rule groups' operations in one file
- [GET /zones/{zone_id}/firewall/waf/packages/{package_id}/groups](operations/waf_rule_groups_list_waf_rule_groups.yaml): List WAF rule groups
- [GET /zones/{zone_id}/firewall/waf/packages/{package_id}/groups/{group_id}](operations/waf_rule_groups_get_a_waf_rule_group.yaml): Get a WAF rule group
- [PATCH /zones/{zone_id}/firewall/waf/packages/{package_id}/groups/{group_id}](operations/waf_rule_groups_update_a_waf_rule_group.yaml): Update a WAF rule group

## WAF rules

- [WAF rules operations](tags/waf_rules.yaml) All 'WAF rules' operations in one file
- [GET /zones/{zone_id}/firewall/waf/packages/{package_id}/rules](operations/waf_rules_list_waf_rules.yaml): List WAF rules
- [GET /zones/{zone_id}/firewall/waf/packages/{package_id}/rules/{rule_id}](operations/waf_rules_get_a_waf_rule.yaml): Get a WAF rule
- [PATCH /zones/{zone_id}/firewall/waf/packages/{package_id}/rules/{rule_id}](operations/waf_rules_update_a_waf_rule.yaml): Update a WAF rule

## WARP Change Events

- [WARP Change Events operations](tags/warp_change_events.yaml) All 'WARP Change Events' operations in one file
- [GET /accounts/{account_id}/dex/warp-change-events](operations/list_warp_change_events.yaml): List WARP change events.

## WHOIS Record

- [WHOIS Record operations](tags/whois_record.yaml) All 'WHOIS Record' operations in one file
- [GET /accounts/{account_id}/intel/whois](operations/whois_record_get_whois_record.yaml): Get WHOIS Record

## Waiting Room

- [Waiting Room operations](tags/waiting_room.yaml) All 'Waiting Room' operations in one file
- [GET /accounts/{account_id}/waiting_rooms](operations/waiting_room_list_waiting_rooms_account.yaml): List waiting rooms for account
- [GET /zones/{zone_id}/waiting_rooms](operations/waiting_room_list_waiting_rooms.yaml): List waiting rooms for zone
- [POST /zones/{zone_id}/waiting_rooms](operations/waiting_room_create_waiting_room.yaml): Create waiting room
- [POST /zones/{zone_id}/waiting_rooms/preview](operations/waiting_room_create_a_custom_waiting_room_page_preview.yaml): Create a custom waiting room page preview
- [GET /zones/{zone_id}/waiting_rooms/settings](operations/waiting_room_get_zone_settings.yaml): Get zone-level Waiting Room settings
- [PUT /zones/{zone_id}/waiting_rooms/settings](operations/waiting_room_update_zone_settings.yaml): Update zone-level Waiting Room settings
- [PATCH /zones/{zone_id}/waiting_rooms/settings](operations/waiting_room_patch_zone_settings.yaml): Patch zone-level Waiting Room settings
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}](operations/waiting_room_waiting_room_details.yaml): Waiting room details
- [PUT /zones/{zone_id}/waiting_rooms/{waiting_room_id}](operations/waiting_room_update_waiting_room.yaml): Update waiting room
- [PATCH /zones/{zone_id}/waiting_rooms/{waiting_room_id}](operations/waiting_room_patch_waiting_room.yaml): Patch waiting room
- [DELETE /zones/{zone_id}/waiting_rooms/{waiting_room_id}](operations/waiting_room_delete_waiting_room.yaml): Delete waiting room
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events](operations/waiting_room_list_events.yaml): List events
- [POST /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events](operations/waiting_room_create_event.yaml): Create event
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}](operations/waiting_room_event_details.yaml): Event details
- [PUT /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}](operations/waiting_room_update_event.yaml): Update event
- [PATCH /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}](operations/waiting_room_patch_event.yaml): Patch event
- [DELETE /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}](operations/waiting_room_delete_event.yaml): Delete event
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}/events/{event_id}/details](operations/waiting_room_preview_active_event_details.yaml): Preview active event details
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules](operations/waiting_room_list_waiting_room_rules.yaml): List Waiting Room Rules
- [POST /zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules](operations/waiting_room_create_waiting_room_rule.yaml): Create Waiting Room Rule
- [PUT /zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules](operations/waiting_room_replace_waiting_room_rules.yaml): Replace Waiting Room Rules
- [PATCH /zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules/{rule_id}](operations/waiting_room_patch_waiting_room_rule.yaml): Patch Waiting Room Rule
- [DELETE /zones/{zone_id}/waiting_rooms/{waiting_room_id}/rules/{rule_id}](operations/waiting_room_delete_waiting_room_rule.yaml): Delete Waiting Room Rule
- [GET /zones/{zone_id}/waiting_rooms/{waiting_room_id}/status](operations/waiting_room_get_waiting_room_status.yaml): Get waiting room status

## Web Analytics

- [Web Analytics operations](tags/web_analytics.yaml) All 'Web Analytics' operations in one file
- [POST /accounts/{account_id}/rum/site_info](operations/web_analytics_create_site.yaml): Create a Web Analytics site
- [GET /accounts/{account_id}/rum/site_info/list](operations/web_analytics_list_sites.yaml): List Web Analytics sites
- [GET /accounts/{account_id}/rum/site_info/{site_id}](operations/web_analytics_get_site.yaml): Get a Web Analytics site
- [PUT /accounts/{account_id}/rum/site_info/{site_id}](operations/web_analytics_update_site.yaml): Update a Web Analytics site
- [DELETE /accounts/{account_id}/rum/site_info/{site_id}](operations/web_analytics_delete_site.yaml): Delete a Web Analytics site
- [POST /accounts/{account_id}/rum/v2/{ruleset_id}/rule](operations/web_analytics_create_rule.yaml): Create a Web Analytics rule
- [PUT /accounts/{account_id}/rum/v2/{ruleset_id}/rule/{rule_id}](operations/web_analytics_update_rule.yaml): Update a Web Analytics rule
- [DELETE /accounts/{account_id}/rum/v2/{ruleset_id}/rule/{rule_id}](operations/web_analytics_delete_rule.yaml): Delete a Web Analytics rule
- [GET /accounts/{account_id}/rum/v2/{ruleset_id}/rules](operations/web_analytics_list_rules.yaml): List rules in Web Analytics ruleset
- [POST /accounts/{account_id}/rum/v2/{ruleset_id}/rules](operations/web_analytics_modify_rules.yaml): Update Web Analytics rules
- [GET /zones/{zone_id}/settings/rum](operations/web_analytics_get_rum_status.yaml): Get RUM status for a zone
- [PATCH /zones/{zone_id}/settings/rum](operations/web_analytics_toggle_rum.yaml): Toggle RUM on/off for a zone

## Web3 Hostname

- [Web3 Hostname operations](tags/web3_hostname.yaml) All 'Web3 Hostname' operations in one file
- [GET /zones/{zone_id}/web3/hostnames](operations/web3_hostname_list_web3_hostnames.yaml): List Web3 Hostnames
- [POST /zones/{zone_id}/web3/hostnames](operations/web3_hostname_create_web3_hostname.yaml): Create Web3 Hostname
- [GET /zones/{zone_id}/web3/hostnames/{identifier}](operations/web3_hostname_web3_hostname_details.yaml): Web3 Hostname Details
- [PATCH /zones/{zone_id}/web3/hostnames/{identifier}](operations/web3_hostname_edit_web3_hostname.yaml): Edit Web3 Hostname
- [DELETE /zones/{zone_id}/web3/hostnames/{identifier}](operations/web3_hostname_delete_web3_hostname.yaml): Delete Web3 Hostname
- [GET /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list](operations/web3_hostname_ipfs_universal_path_gateway_content_list_details.yaml): IPFS Universal Path Gateway Content List Details
- [PUT /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list](operations/web3_hostname_update_ipfs_universal_path_gateway_content_list.yaml): Update IPFS Universal Path Gateway Content List
- [GET /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries](operations/web3_hostname_list_ipfs_universal_path_gateway_content_list_entries.yaml): List IPFS Universal Path Gateway Content List Entries
- [POST /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries](operations/web3_hostname_create_ipfs_universal_path_gateway_content_list_entry.yaml): Create IPFS Universal Path Gateway Content List Entry
- [GET /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}](operations/web3_hostname_ipfs_universal_path_gateway_content_list_entry_details.yaml): IPFS Universal Path Gateway Content List Entry Details
- [PUT /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}](operations/web3_hostname_edit_ipfs_universal_path_gateway_content_list_entry.yaml): Edit IPFS Universal Path Gateway Content List Entry
- [DELETE /zones/{zone_id}/web3/hostnames/{identifier}/ipfs_universal_path/content_list/entries/{content_list_entry_identifier}](operations/web3_hostname_delete_ipfs_universal_path_gateway_content_list_entry.yaml): Delete IPFS Universal Path Gateway Content List Entry

## Worker Account Settings

- [Worker Account Settings operations](tags/worker_account_settings.yaml) All 'Worker Account Settings' operations in one file
- [GET /accounts/{account_id}/workers/account-settings](operations/worker_account_settings_fetch_worker_account_settings.yaml): Fetch Worker Account Settings
- [PUT /accounts/{account_id}/workers/account-settings](operations/worker_account_settings_create_worker_account_settings.yaml): Create Worker Account Settings

## Worker Cron Trigger

- [Worker Cron Trigger operations](tags/worker_cron_trigger.yaml) All 'Worker Cron Trigger' operations in one file
- [GET /accounts/{account_id}/workers/scripts/{script_name}/schedules](operations/worker_cron_trigger_get_cron_triggers.yaml): Get Cron Triggers
- [PUT /accounts/{account_id}/workers/scripts/{script_name}/schedules](operations/worker_cron_trigger_update_cron_triggers.yaml): Update Cron Triggers

## Worker Deployments

- [Worker Deployments operations](tags/worker_deployments.yaml) All 'Worker Deployments' operations in one file
- [GET /accounts/{account_id}/workers/scripts/{script_name}/deployments](operations/worker_deployments_list_deployments.yaml): List Deployments
- [POST /accounts/{account_id}/workers/scripts/{script_name}/deployments](operations/worker_deployments_create_deployment.yaml): Create Deployment
- [GET /accounts/{account_id}/workers/scripts/{script_name}/deployments/{deployment_id}](operations/worker_deployments_get_deployment.yaml): Get Deployment
- [DELETE /accounts/{account_id}/workers/scripts/{script_name}/deployments/{deployment_id}](operations/worker_deployments_delete_deployment.yaml): Delete Deployment

## Worker Domain

- [Worker Domain operations](tags/worker_domain.yaml) All 'Worker Domain' operations in one file
- [GET /accounts/{account_id}/workers/domains](operations/worker_domain_list_domains.yaml): List Domains
- [PUT /accounts/{account_id}/workers/domains](operations/worker_domain_attach_to_domain.yaml): Attach to Domain
- [GET /accounts/{account_id}/workers/domains/{domain_id}](operations/worker_domain_get_a_domain.yaml): Get a Domain
- [DELETE /accounts/{account_id}/workers/domains/{domain_id}](operations/worker_domain_detach_from_domain.yaml): Detach from Domain

## Worker Environment

- [Worker Environment operations](tags/worker_environment.yaml) All 'Worker Environment' operations in one file
- [GET /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content](operations/worker_environment_get_script_content.yaml): Get script content
- [PUT /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content](operations/worker_environment_put_script_content.yaml): Put script content
- [GET /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings](operations/worker_script_environment_get_settings.yaml): Get Script Settings
- [PATCH /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings](operations/worker_script_environment_patch_settings.yaml): Patch Script Settings

## Worker Routes

- [Worker Routes operations](tags/worker_routes.yaml) All 'Worker Routes' operations in one file
- [GET /zones/{zone_id}/workers/routes](operations/worker_routes_list_routes.yaml): List Routes
- [POST /zones/{zone_id}/workers/routes](operations/worker_routes_create_route.yaml): Create Route
- [GET /zones/{zone_id}/workers/routes/{route_id}](operations/worker_routes_get_route.yaml): Get Route
- [PUT /zones/{zone_id}/workers/routes/{route_id}](operations/worker_routes_update_route.yaml): Update Route
- [DELETE /zones/{zone_id}/workers/routes/{route_id}](operations/worker_routes_delete_route.yaml): Delete Route

## Worker Script

- [Worker Script operations](tags/worker_script.yaml) All 'Worker Script' operations in one file
- [POST /accounts/{account_id}/workers/assets/upload](operations/worker_assets_upload.yaml): Upload Assets
- [GET /accounts/{account_id}/workers/scripts](operations/worker_script_list_workers.yaml): List Workers
- [GET /accounts/{account_id}/workers/scripts/{script_name}](operations/worker_script_download_worker.yaml): Download Worker
- [PUT /accounts/{account_id}/workers/scripts/{script_name}](operations/worker_script_upload_worker_module.yaml): Upload Worker Module
- [DELETE /accounts/{account_id}/workers/scripts/{script_name}](operations/worker_script_delete_worker.yaml): Delete Worker
- [POST /accounts/{account_id}/workers/scripts/{script_name}/assets-upload-session](operations/worker_script_update_create_assets_upload_session.yaml): Create Assets Upload Session
- [PUT /accounts/{account_id}/workers/scripts/{script_name}/content](operations/worker_script_put_content.yaml): Put script content
- [GET /accounts/{account_id}/workers/scripts/{script_name}/content/v2](operations/worker_script_get_content.yaml): Get script content
- [GET /accounts/{account_id}/workers/scripts/{script_name}/script-settings](operations/worker_script_settings_get_settings.yaml): Get Script Settings
- [PATCH /accounts/{account_id}/workers/scripts/{script_name}/script-settings](operations/worker_script_settings_patch_settings.yaml): Patch Script Settings
- [GET /accounts/{account_id}/workers/scripts/{script_name}/secrets](operations/worker_list_script_secrets.yaml): List script secrets
- [PUT /accounts/{account_id}/workers/scripts/{script_name}/secrets](operations/worker_put_script_secret.yaml): Add script secret
- [GET /accounts/{account_id}/workers/scripts/{script_name}/secrets/{secret_name}](operations/worker_get_script_secret.yaml): Get secret binding
- [DELETE /accounts/{account_id}/workers/scripts/{script_name}/secrets/{secret_name}](operations/worker_delete_script_secret.yaml): Delete script secret
- [GET /accounts/{account_id}/workers/scripts/{script_name}/settings](operations/worker_script_get_settings.yaml): Get Settings
- [PATCH /accounts/{account_id}/workers/scripts/{script_name}/settings](operations/worker_script_patch_settings.yaml): Patch Settings
- [GET /accounts/{account_id}/workers/scripts/{script_name}/subdomain](operations/worker_script_get_subdomain.yaml): Get Worker subdomain
- [POST /accounts/{account_id}/workers/scripts/{script_name}/subdomain](operations/worker_script_post_subdomain.yaml): Post Worker subdomain
- [DELETE /accounts/{account_id}/workers/scripts/{script_name}/subdomain](operations/worker_script_delete_subdomain.yaml): Delete Worker subdomain
- [GET /accounts/{account_id}/workers/scripts/{script_name}/usage-model](operations/worker_script_fetch_usage_model.yaml): Fetch Usage Model
- [PUT /accounts/{account_id}/workers/scripts/{script_name}/usage-model](operations/worker_script_update_usage_model.yaml): Update Usage Model

## Worker Subdomain

- [Worker Subdomain operations](tags/worker_subdomain.yaml) All 'Worker Subdomain' operations in one file
- [GET /accounts/{account_id}/workers/subdomain](operations/worker_subdomain_get_subdomain.yaml): Get Subdomain
- [PUT /accounts/{account_id}/workers/subdomain](operations/worker_subdomain_create_subdomain.yaml): Create Subdomain

## Worker Tail Logs

- [Worker Tail Logs operations](tags/worker_tail_logs.yaml) All 'Worker Tail Logs' operations in one file
- [GET /accounts/{account_id}/workers/scripts/{script_name}/tails](operations/accounts_account_id_workers_scripts_script_name_tails_get.yaml): List Tails
- [POST /accounts/{account_id}/workers/scripts/{script_name}/tails](operations/worker_tail_logs_start_tail.yaml): Start Tail
- [DELETE /accounts/{account_id}/workers/scripts/{script_name}/tails/{id}](operations/worker_tail_logs_delete_tail.yaml): Delete Tail

## Worker Versions

- [Worker Versions operations](tags/worker_versions.yaml) All 'Worker Versions' operations in one file
- [GET /accounts/{account_id}/workers/scripts/{script_name}/versions](operations/worker_versions_list_versions.yaml): List Versions
- [POST /accounts/{account_id}/workers/scripts/{script_name}/versions](operations/worker_versions_upload_version.yaml): Upload Version
- [GET /accounts/{account_id}/workers/scripts/{script_name}/versions/{version_id}](operations/worker_versions_get_version_detail.yaml): Get Version Detail

## Workers AI

- [Workers AI operations](tags/workers_ai.yaml) All 'Workers AI' operations in one file
- [GET /accounts/{account_id}/ai/authors/search](operations/workers_ai_search_author.yaml): Author Search
- [GET /accounts/{account_id}/ai/models/schema](operations/workers_ai_get_model_schema.yaml): Get Model Schema
- [GET /accounts/{account_id}/ai/models/search](operations/workers_ai_search_model.yaml): Model Search
- [POST /accounts/{account_id}/ai/run/{model_name}](operations/workers_ai_post_run_model.yaml): Execute AI model
- [GET /accounts/{account_id}/ai/tasks/search](operations/workers_ai_search_task.yaml): Task Search
- [POST /accounts/{account_id}/ai/tomarkdown](operations/workers_ai_post_to_markdown.yaml): Convert Files into Markdown

## Workers AI Automatic Speech Recognition

- [Workers AI Automatic Speech Recognition operations](tags/workers_ai_automatic_speech_recognition.yaml) All 'Workers AI Automatic Speech Recognition' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/openai/whisper](operations/workers_ai_post_run_cf_openai_whisper.yaml): Execute @cf/openai/whisper model.
- [POST /accounts/{account_id}/ai/run/@cf/openai/whisper-large-v3-turbo](operations/workers_ai_post_run_cf_openai_whisper_large_v3_turbo.yaml): Execute @cf/openai/whisper-large-v3-turbo model.
- [POST /accounts/{account_id}/ai/run/@cf/openai/whisper-tiny-en](operations/workers_ai_post_run_cf_openai_whisper_tiny_en.yaml): Execute @cf/openai/whisper-tiny-en model.

## Workers AI Finetune

- [Workers AI Finetune operations](tags/workers_ai_finetune.yaml) All 'Workers AI Finetune' operations in one file
- [GET /accounts/{account_id}/ai/finetunes](operations/workers_ai_list_finetunes.yaml): List Finetunes
- [POST /accounts/{account_id}/ai/finetunes](operations/workers_ai_create_finetune.yaml): Create a new Finetune
- [GET /accounts/{account_id}/ai/finetunes/public](operations/workers_ai_list_public_finetunes.yaml): List Public Finetunes
- [POST /accounts/{account_id}/ai/finetunes/{finetune_id}/finetune-assets](operations/workers_ai_upload_finetune_asset.yaml): Upload a Finetune Asset

## Workers AI Object Detection

- [Workers AI Object Detection operations](tags/workers_ai_object_detection.yaml) All 'Workers AI Object Detection' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/facebook/detr-resnet-50](operations/workers_ai_post_run_cf_facebook_detr_resnet_50.yaml): Execute @cf/facebook/detr-resnet-50 model.

## Workers AI Summarization

- [Workers AI Summarization operations](tags/workers_ai_summarization.yaml) All 'Workers AI Summarization' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/facebook/bart-large-cnn](operations/workers_ai_post_run_cf_facebook_bart_large_cnn.yaml): Execute @cf/facebook/bart-large-cnn model.

## Workers AI Text Classification

- [Workers AI Text Classification operations](tags/workers_ai_text_classification.yaml) All 'Workers AI Text Classification' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/baai/bge-reranker-base](operations/workers_ai_post_run_cf_baai_bge_reranker_base.yaml): Execute @cf/baai/bge-reranker-base model.
- [POST /accounts/{account_id}/ai/run/@cf/huggingface/distilbert-sst-2-int8](operations/workers_ai_post_run_cf_huggingface_distilbert_sst_2_int8.yaml): Execute @cf/huggingface/distilbert-sst-2-int8 model.

## Workers AI Text Embeddings

- [Workers AI Text Embeddings operations](tags/workers_ai_text_embeddings.yaml) All 'Workers AI Text Embeddings' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/baai/bge-base-en-v1.5](operations/workers_ai_post_run_cf_baai_bge_base_en_v1_5.yaml): Execute @cf/baai/bge-base-en-v1.5 model.
- [POST /accounts/{account_id}/ai/run/@cf/baai/bge-large-en-v1.5](operations/workers_ai_post_run_cf_baai_bge_large_en_v1_5.yaml): Execute @cf/baai/bge-large-en-v1.5 model.
- [POST /accounts/{account_id}/ai/run/@cf/baai/bge-m3](operations/workers_ai_post_run_cf_baai_bge_m3.yaml): Execute @cf/baai/bge-m3 model.
- [POST /accounts/{account_id}/ai/run/@cf/baai/bge-small-en-v1.5](operations/workers_ai_post_run_cf_baai_bge_small_en_v1_5.yaml): Execute @cf/baai/bge-small-en-v1.5 model.

## Workers AI Text Generation

- [Workers AI Text Generation operations](tags/workers_ai_text_generation.yaml) All 'Workers AI Text Generation' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/deepseek-ai/deepseek-math-7b-instruct](operations/workers_ai_post_run_cf_deepseek_ai_deepseek_math_7b_instruct.yaml): Execute @cf/deepseek-ai/deepseek-math-7b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/deepseek-ai/deepseek-r1-distill-qwen-32b](operations/workers_ai_post_run_cf_deepseek_ai_deepseek_r1_distill_qwen_32b.yaml): Execute @cf/deepseek-ai/deepseek-r1-distill-qwen-32b model.
- [POST /accounts/{account_id}/ai/run/@cf/defog/sqlcoder-7b-2](operations/workers_ai_post_run_cf_defog_sqlcoder_7b_2.yaml): Execute @cf/defog/sqlcoder-7b-2 model.
- [POST /accounts/{account_id}/ai/run/@cf/fblgit/una-cybertron-7b-v2-bf16](operations/workers_ai_post_run_cf_fblgit_una_cybertron_7b_v2_bf16.yaml): Execute @cf/fblgit/una-cybertron-7b-v2-bf16 model.
- [POST /accounts/{account_id}/ai/run/@cf/google/gemma-2b-it-lora](operations/workers_ai_post_run_cf_google_gemma_2b_it_lora.yaml): Execute @cf/google/gemma-2b-it-lora model.
- [POST /accounts/{account_id}/ai/run/@cf/google/gemma-3-12b-it](operations/workers_ai_post_run_cf_google_gemma_3_12b_it.yaml): Execute @cf/google/gemma-3-12b-it model.
- [POST /accounts/{account_id}/ai/run/@cf/google/gemma-7b-it-lora](operations/workers_ai_post_run_cf_google_gemma_7b_it_lora.yaml): Execute @cf/google/gemma-7b-it-lora model.
- [POST /accounts/{account_id}/ai/run/@cf/meta-llama/llama-2-7b-chat-hf-lora](operations/workers_ai_post_run_cf_meta_llama_llama_2_7b_chat_hf_lora.yaml): Execute @cf/meta-llama/llama-2-7b-chat-hf-lora model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-2-7b-chat-fp16](operations/workers_ai_post_run_cf_meta_llama_2_7b_chat_fp16.yaml): Execute @cf/meta/llama-2-7b-chat-fp16 model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-2-7b-chat-int8](operations/workers_ai_post_run_cf_meta_llama_2_7b_chat_int8.yaml): Execute @cf/meta/llama-2-7b-chat-int8 model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3-8b-instruct](operations/workers_ai_post_run_cf_meta_llama_3_8b_instruct.yaml): Execute @cf/meta/llama-3-8b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3-8b-instruct-awq](operations/workers_ai_post_run_cf_meta_llama_3_8b_instruct_awq.yaml): Execute @cf/meta/llama-3-8b-instruct-awq model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-70b-instruct](operations/workers_ai_post_run_cf_meta_llama_3_1_70b_instruct.yaml): Execute @cf/meta/llama-3.1-70b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-70b-instruct-preview](operations/workers_ai_post_run_cf_meta_llama_3_1_70b_instruct_preview.yaml): Execute @cf/meta/llama-3.1-70b-instruct-preview model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-70b-preview](operations/workers_ai_post_run_cf_meta_llama_3_1_70b_preview.yaml): Execute @cf/meta/llama-3.1-70b-preview model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-8b-instruct-awq](operations/workers_ai_post_run_cf_meta_llama_3_1_8b_instruct_awq.yaml): Execute @cf/meta/llama-3.1-8b-instruct-awq model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-8b-instruct-fast](operations/workers_ai_post_run_cf_meta_llama_3_1_8b_instruct_fast.yaml): Execute @cf/meta/llama-3.1-8b-instruct-fast model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-8b-instruct-fp8](operations/workers_ai_post_run_cf_meta_llama_3_1_8b_instruct_fp8.yaml): Execute @cf/meta/llama-3.1-8b-instruct-fp8 model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.1-8b-preview](operations/workers_ai_post_run_cf_meta_llama_3_1_8b_preview.yaml): Execute @cf/meta/llama-3.1-8b-preview model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.2-11b-vision-instruct](operations/workers_ai_post_run_cf_meta_llama_3_2_11b_vision_instruct.yaml): Execute @cf/meta/llama-3.2-11b-vision-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.2-1b-instruct](operations/workers_ai_post_run_cf_meta_llama_3_2_1b_instruct.yaml): Execute @cf/meta/llama-3.2-1b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-3.2-3b-instruct](operations/workers_ai_post_run_cf_meta_llama_3_2_3b_instruct.yaml): Execute @cf/meta/llama-3.2-3b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-4-scout-17b-16e-instruct](operations/workers_ai_post_run_cf_meta_llama_4_scout_17b_16e_instruct.yaml): Execute @cf/meta/llama-4-scout-17b-16e-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/meta/llama-guard-3-8b](operations/workers_ai_post_run_cf_meta_llama_guard_3_8b.yaml): Execute @cf/meta/llama-guard-3-8b model.
- [POST /accounts/{account_id}/ai/run/@cf/microsoft/phi-2](operations/workers_ai_post_run_cf_microsoft_phi_2.yaml): Execute @cf/microsoft/phi-2 model.
- [POST /accounts/{account_id}/ai/run/@cf/mistral/mistral-7b-instruct-v0.1](operations/workers_ai_post_run_cf_mistral_mistral_7b_instruct_v0_1.yaml): Execute @cf/mistral/mistral-7b-instruct-v0.1 model.
- [POST /accounts/{account_id}/ai/run/@cf/mistral/mistral-7b-instruct-v0.2-lora](operations/workers_ai_post_run_cf_mistral_mistral_7b_instruct_v0_2_lora.yaml): Execute @cf/mistral/mistral-7b-instruct-v0.2-lora model.
- [POST /accounts/{account_id}/ai/run/@cf/mistralai/mistral-small-3.1-24b-instruct](operations/workers_ai_post_run_cf_mistralai_mistral_small_3_1_24b_instruct.yaml): Execute @cf/mistralai/mistral-small-3.1-24b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/openchat/openchat-3.5-0106](operations/workers_ai_post_run_cf_openchat_openchat_3_5_0106.yaml): Execute @cf/openchat/openchat-3.5-0106 model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-0.5b-chat](operations/workers_ai_post_run_cf_qwen_qwen1_5_0_5b_chat.yaml): Execute @cf/qwen/qwen1.5-0.5b-chat model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-1.8b-chat](operations/workers_ai_post_run_cf_qwen_qwen1_5_1_8b_chat.yaml): Execute @cf/qwen/qwen1.5-1.8b-chat model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-14b-chat-awq](operations/workers_ai_post_run_cf_qwen_qwen1_5_14b_chat_awq.yaml): Execute @cf/qwen/qwen1.5-14b-chat-awq model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwen1.5-7b-chat-awq](operations/workers_ai_post_run_cf_qwen_qwen1_5_7b_chat_awq.yaml): Execute @cf/qwen/qwen1.5-7b-chat-awq model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwen2.5-coder-32b-instruct](operations/workers_ai_post_run_cf_qwen_qwen2_5_coder_32b_instruct.yaml): Execute @cf/qwen/qwen2.5-coder-32b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/qwen/qwq-32b](operations/workers_ai_post_run_cf_qwen_qwq_32b.yaml): Execute @cf/qwen/qwq-32b model.
- [POST /accounts/{account_id}/ai/run/@cf/thebloke/discolm-german-7b-v1-awq](operations/workers_ai_post_run_cf_thebloke_discolm_german_7b_v1_awq.yaml): Execute @cf/thebloke/discolm-german-7b-v1-awq model.
- [POST /accounts/{account_id}/ai/run/@cf/tiiuae/falcon-7b-instruct](operations/workers_ai_post_run_cf_tiiuae_falcon_7b_instruct.yaml): Execute @cf/tiiuae/falcon-7b-instruct model.
- [POST /accounts/{account_id}/ai/run/@cf/tinyllama/tinyllama-1.1b-chat-v1.0](operations/workers_ai_post_run_cf_tinyllama_tinyllama_1_1b_chat_v1_0.yaml): Execute @cf/tinyllama/tinyllama-1.1b-chat-v1.0 model.
- [POST /accounts/{account_id}/ai/run/@hf/google/gemma-7b-it](operations/workers_ai_post_run_hf_google_gemma_7b_it.yaml): Execute @hf/google/gemma-7b-it model.
- [POST /accounts/{account_id}/ai/run/@hf/meta-llama/meta-llama-3-8b-instruct](operations/workers_ai_post_run_hf_meta_llama_meta_llama_3_8b_instruct.yaml): Execute @hf/meta-llama/meta-llama-3-8b-instruct model.
- [POST /accounts/{account_id}/ai/run/@hf/mistral/mistral-7b-instruct-v0.2](operations/workers_ai_post_run_hf_mistral_mistral_7b_instruct_v0_2.yaml): Execute @hf/mistral/mistral-7b-instruct-v0.2 model.
- [POST /accounts/{account_id}/ai/run/@hf/mistralai/mistral-7b-instruct-v0.2](operations/workers_ai_post_run_hf_mistralai_mistral_7b_instruct_v0_2.yaml): Execute @hf/mistralai/mistral-7b-instruct-v0.2 model.
- [POST /accounts/{account_id}/ai/run/@hf/nexusflow/starling-lm-7b-beta](operations/workers_ai_post_run_hf_nexusflow_starling_lm_7b_beta.yaml): Execute @hf/nexusflow/starling-lm-7b-beta model.
- [POST /accounts/{account_id}/ai/run/@hf/nousresearch/hermes-2-pro-mistral-7b](operations/workers_ai_post_run_hf_nousresearch_hermes_2_pro_mistral_7b.yaml): Execute @hf/nousresearch/hermes-2-pro-mistral-7b model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/deepseek-coder-6.7b-base-awq](operations/workers_ai_post_run_hf_thebloke_deepseek_coder_6_7b_base_awq.yaml): Execute @hf/thebloke/deepseek-coder-6.7b-base-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/deepseek-coder-6.7b-instruct-awq](operations/workers_ai_post_run_hf_thebloke_deepseek_coder_6_7b_instruct_awq.yaml): Execute @hf/thebloke/deepseek-coder-6.7b-instruct-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/llama-2-13b-chat-awq](operations/workers_ai_post_run_hf_thebloke_llama_2_13b_chat_awq.yaml): Execute @hf/thebloke/llama-2-13b-chat-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/llamaguard-7b-awq](operations/workers_ai_post_run_hf_thebloke_llamaguard_7b_awq.yaml): Execute @hf/thebloke/llamaguard-7b-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/mistral-7b-instruct-v0.1-awq](operations/workers_ai_post_run_hf_thebloke_mistral_7b_instruct_v0_1_awq.yaml): Execute @hf/thebloke/mistral-7b-instruct-v0.1-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/neural-chat-7b-v3-1-awq](operations/workers_ai_post_run_hf_thebloke_neural_chat_7b_v3_1_awq.yaml): Execute @hf/thebloke/neural-chat-7b-v3-1-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/openhermes-2.5-mistral-7b-awq](operations/workers_ai_post_run_hf_thebloke_openhermes_2_5_mistral_7b_awq.yaml): Execute @hf/thebloke/openhermes-2.5-mistral-7b-awq model.
- [POST /accounts/{account_id}/ai/run/@hf/thebloke/zephyr-7b-beta-awq](operations/workers_ai_post_run_hf_thebloke_zephyr_7b_beta_awq.yaml): Execute @hf/thebloke/zephyr-7b-beta-awq model.

## Workers AI Text To Image

- [Workers AI Text To Image operations](tags/workers_ai_text_to_image.yaml) All 'Workers AI Text To Image' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/black-forest-labs/flux-1-schnell](operations/workers_ai_post_run_cf_black_forest_labs_flux_1_schnell.yaml): Execute @cf/black-forest-labs/flux-1-schnell model.
- [POST /accounts/{account_id}/ai/run/@cf/bytedance/stable-diffusion-xl-lightning](operations/workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning.yaml): Execute @cf/bytedance/stable-diffusion-xl-lightning model.
- [POST /accounts/{account_id}/ai/run/@cf/lykon/dreamshaper-8-lcm](operations/workers_ai_post_run_cf_lykon_dreamshaper_8_lcm.yaml): Execute @cf/lykon/dreamshaper-8-lcm model.
- [POST /accounts/{account_id}/ai/run/@cf/runwayml/stable-diffusion-v1-5-img2img](operations/workers_ai_post_run_cf_runwayml_stable_diffusion_v1_5_img2img.yaml): Execute @cf/runwayml/stable-diffusion-v1-5-img2img model.
- [POST /accounts/{account_id}/ai/run/@cf/runwayml/stable-diffusion-v1-5-inpainting](operations/workers_ai_post_run_cf_runwayml_stable_diffusion_v1_5_inpainting.yaml): Execute @cf/runwayml/stable-diffusion-v1-5-inpainting model.
- [POST /accounts/{account_id}/ai/run/@cf/stabilityai/stable-diffusion-xl-base-1.0](operations/workers_ai_post_run_cf_stabilityai_stable_diffusion_xl_base_1_0.yaml): Execute @cf/stabilityai/stable-diffusion-xl-base-1.0 model.

## Workers AI Text To Speech

- [Workers AI Text To Speech operations](tags/workers_ai_text_to_speech.yaml) All 'Workers AI Text To Speech' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/myshell-ai/melotts](operations/workers_ai_post_run_cf_myshell_ai_melotts.yaml): Execute @cf/myshell-ai/melotts model.

## Workers AI Translation

- [Workers AI Translation operations](tags/workers_ai_translation.yaml) All 'Workers AI Translation' operations in one file
- [POST /accounts/{account_id}/ai/run/@cf/meta/m2m100-1.2b](operations/workers_ai_post_run_cf_meta_m2m100_1_2b.yaml): Execute @cf/meta/m2m100-1.2b model.

## Workers KV Namespace

- [Workers KV Namespace operations](tags/workers_kv_namespace.yaml) All 'Workers KV Namespace' operations in one file
- [GET /accounts/{account_id}/storage/kv/namespaces](operations/workers_kv_namespace_list_namespaces.yaml): List Namespaces
- [POST /accounts/{account_id}/storage/kv/namespaces](operations/workers_kv_namespace_create_a_namespace.yaml): Create a Namespace
- [GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}](operations/workers_kv_namespace_get_a_namespace.yaml): Get a Namespace
- [PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}](operations/workers_kv_namespace_rename_a_namespace.yaml): Rename a Namespace
- [DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}](operations/workers_kv_namespace_remove_a_namespace.yaml): Remove a Namespace
- [PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk](operations/workers_kv_namespace_write_multiple_key_value_pairs.yaml): Write multiple key-value pairs
- [DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk](operations/workers_kv_namespace_delete_multiple_key_value_pairs_deprecated.yaml): Delete multiple key-value pairs
- [POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/delete](operations/workers_kv_namespace_delete_multiple_key_value_pairs.yaml): Delete multiple key-value pairs
- [POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/get](operations/workers_kv_namespace_get_multiple_key_value_pairs.yaml): Get multiple key-value pairs
- [GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/keys](operations/workers_kv_namespace_list_a_namespace_s_keys.yaml): List a Namespace's Keys
- [GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/metadata/{key_name}](operations/workers_kv_namespace_read_the_metadata_for_a_key.yaml): Read the metadata for a key
- [GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}](operations/workers_kv_namespace_read_key_value_pair.yaml): Read key-value pair
- [PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}](operations/workers_kv_namespace_write_key_value_pair_with_metadata.yaml): Write key-value pair with optional metadata
- [DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}](operations/workers_kv_namespace_delete_key_value_pair.yaml): Delete key-value pair

## Workers for Platforms

- [Workers for Platforms operations](tags/workers_for_platforms.yaml) All 'Workers for Platforms' operations in one file
- [GET /accounts/{account_id}/workers/dispatch/namespaces](operations/namespace_worker_list.yaml): List dispatch namespaces
- [POST /accounts/{account_id}/workers/dispatch/namespaces](operations/namespace_worker_create.yaml): Create dispatch namespace
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}](operations/namespace_worker_get_namespace.yaml): Get dispatch namespace
- [DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}](operations/namespace_worker_delete_namespace.yaml): Delete dispatch namespace
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}](operations/namespace_worker_script_worker_details.yaml): Worker Details
- [PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}](operations/namespace_worker_script_upload_worker_module.yaml): Upload Worker Module
- [DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}](operations/namespace_worker_script_delete_worker.yaml): Delete Worker
- [POST /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/assets-upload-session](operations/namespace_worker_script_update_create_assets_upload_session.yaml): Create Assets Upload Session
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/bindings](operations/namespace_worker_get_script_bindings.yaml): Get Script Bindings
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content](operations/namespace_worker_get_script_content.yaml): Get Script Content
- [PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content](operations/namespace_worker_put_script_content.yaml): Put Script Content
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets](operations/namespace_worker_list_script_secrets.yaml): List Script Secrets
- [PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets](operations/namespace_worker_put_script_secrets.yaml): Add script secret
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets/{secret_name}](operations/namespace_worker_get_script_secrets.yaml): Get secret binding
- [DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets/{secret_name}](operations/namespace_worker_delete_script_secret.yaml): Delete script secret
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings](operations/namespace_worker_get_script_settings.yaml): Get Script Settings
- [PATCH /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings](operations/namespace_worker_patch_script_settings.yaml): Patch Script Settings
- [GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags](operations/namespace_worker_get_script_tags.yaml): Get Script Tags
- [PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags](operations/namespace_worker_put_script_tags.yaml): Put Script Tags
- [PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}](operations/namespace_worker_put_script_tag.yaml): Put Script Tag
- [DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}](operations/namespace_worker_delete_script_tag.yaml): Delete Script Tag

## Workflows

- [Workflows operations](tags/workflows.yaml) All 'Workflows' operations in one file
- [GET /accounts/{account_id}/workflows](operations/wor_list_workflows.yaml): List all Workflows
- [GET /accounts/{account_id}/workflows/{workflow_name}](operations/wor_get_workflow_details.yaml): Get Workflow details
- [PUT /accounts/{account_id}/workflows/{workflow_name}](operations/wor_create_or_modify_workflow.yaml): Create/modify Workflow
- [DELETE /accounts/{account_id}/workflows/{workflow_name}](operations/wor_delete_workflow.yaml): Deletes a Workflow
- [GET /accounts/{account_id}/workflows/{workflow_name}/instances](operations/wor_list_workflow_instances.yaml): List of workflow instances
- [POST /accounts/{account_id}/workflows/{workflow_name}/instances](operations/wor_create_new_workflow_instance.yaml): Create a new workflow instance
- [POST /accounts/{account_id}/workflows/{workflow_name}/instances/batch](operations/wor_batch_create_workflow_instance.yaml): Batch create new Workflow instances
- [POST /accounts/{account_id}/workflows/{workflow_name}/instances/batch/terminate](operations/wor_batch_terminate_workflow_instances.yaml): Batch terminate instances of a workflow
- [GET /accounts/{account_id}/workflows/{workflow_name}/instances/terminate](operations/wor_status_terminate_workflow_instances.yaml): Get status of the job responsible for terminate all instances of a workflow
- [GET /accounts/{account_id}/workflows/{workflow_name}/instances/{instance_id}](operations/wor_describe_workflow_instance.yaml): Get logs and status from instance
- [POST /accounts/{account_id}/workflows/{workflow_name}/instances/{instance_id}/events/{event_type}](operations/wor_send_event_workflow_instance.yaml): Send event to instance
- [PATCH /accounts/{account_id}/workflows/{workflow_name}/instances/{instance_id}/status](operations/wor_change_status_workflow_instance.yaml): Change status of instance
- [GET /accounts/{account_id}/workflows/{workflow_name}/versions](operations/wor_list_workflow_versions.yaml): List deployed Workflow versions
- [GET /accounts/{account_id}/workflows/{workflow_name}/versions/{version_id}](operations/wor_describe_workflow_versions.yaml): Get Workflow version details

## Zaraz

- [Zaraz operations](tags/zaraz.yaml) All 'Zaraz' operations in one file
- [GET /zones/{zone_id}/settings/zaraz/config](operations/get_zones_zone_identifier_zaraz_config.yaml): Get Zaraz configuration
- [PUT /zones/{zone_id}/settings/zaraz/config](operations/put_zones_zone_identifier_zaraz_config.yaml): Update Zaraz configuration
- [GET /zones/{zone_id}/settings/zaraz/default](operations/get_zones_zone_identifier_zaraz_default.yaml): Get default Zaraz configuration
- [GET /zones/{zone_id}/settings/zaraz/export](operations/get_zones_zone_identifier_zaraz_export.yaml): Export Zaraz configuration
- [GET /zones/{zone_id}/settings/zaraz/history](operations/get_zones_zone_identifier_zaraz_history.yaml): List Zaraz historical configuration records
- [PUT /zones/{zone_id}/settings/zaraz/history](operations/put_zones_zone_identifier_zaraz_history.yaml): Restore Zaraz historical configuration by ID
- [GET /zones/{zone_id}/settings/zaraz/history/configs](operations/get_zones_zone_identifier_zaraz_config_history.yaml): Get Zaraz historical configurations by ID(s)
- [POST /zones/{zone_id}/settings/zaraz/publish](operations/post_zones_zone_identifier_zaraz_publish.yaml): Publish Zaraz preview configuration
- [GET /zones/{zone_id}/settings/zaraz/workflow](operations/get_zones_zone_identifier_zaraz_workflow.yaml): Get Zaraz workflow
- [PUT /zones/{zone_id}/settings/zaraz/workflow](operations/put_zones_zone_identifier_zaraz_workflow.yaml): Update Zaraz workflow

## Zero Trust Connectivity Settings

- [Zero Trust Connectivity Settings operations](tags/zero_trust_connectivity_settings.yaml) All 'Zero Trust Connectivity Settings' operations in one file
- [GET /accounts/{account_id}/zerotrust/connectivity_settings](operations/zero_trust_accounts_get_connectivity_settings.yaml): Get Zero Trust Connectivity Settings
- [PATCH /accounts/{account_id}/zerotrust/connectivity_settings](operations/zero_trust_accounts_patch_connectivity_settings.yaml): Updates the Zero Trust Connectivity Settings

## Zero Trust Gateway application and application type mappings

- [Zero Trust Gateway application and application type mappings operations](tags/zero_trust_gateway_application_and_application_type_mappings.yaml) All 'Zero Trust Gateway application and application type mappings' operations in one file
- [GET /accounts/{account_id}/gateway/app_types](operations/zero_trust_gateway_application_and_application_type_mappings_list_application_and_application_type_mappings.yaml): List application and application type mappings

## Zero Trust Gateway categories

- [Zero Trust Gateway categories operations](tags/zero_trust_gateway_categories.yaml) All 'Zero Trust Gateway categories' operations in one file
- [GET /accounts/{account_id}/gateway/categories](operations/zero_trust_gateway_categories_list_categories.yaml): List categories

## Zero Trust Gateway locations

- [Zero Trust Gateway locations operations](tags/zero_trust_gateway_locations.yaml) All 'Zero Trust Gateway locations' operations in one file
- [GET /accounts/{account_id}/gateway/locations](operations/zero_trust_gateway_locations_list_zero_trust_gateway_locations.yaml): List Zero Trust Gateway locations
- [POST /accounts/{account_id}/gateway/locations](operations/zero_trust_gateway_locations_create_zero_trust_gateway_location.yaml): Create a Zero Trust Gateway location
- [GET /accounts/{account_id}/gateway/locations/{location_id}](operations/zero_trust_gateway_locations_zero_trust_gateway_location_details.yaml): Get Zero Trust Gateway location details
- [PUT /accounts/{account_id}/gateway/locations/{location_id}](operations/zero_trust_gateway_locations_update_zero_trust_gateway_location.yaml): Update a Zero Trust Gateway location
- [DELETE /accounts/{account_id}/gateway/locations/{location_id}](operations/zero_trust_gateway_locations_delete_zero_trust_gateway_location.yaml): Delete a Zero Trust Gateway location

## Zero Trust Gateway proxy endpoints

- [Zero Trust Gateway proxy endpoints operations](tags/zero_trust_gateway_proxy_endpoints.yaml) All 'Zero Trust Gateway proxy endpoints' operations in one file
- [GET /accounts/{account_id}/gateway/proxy_endpoints](operations/zero_trust_gateway_proxy_endpoints_list_proxy_endpoints.yaml): List proxy endpoints
- [POST /accounts/{account_id}/gateway/proxy_endpoints](operations/zero_trust_gateway_proxy_endpoints_create_proxy_endpoint.yaml): Create a proxy endpoint
- [GET /accounts/{account_id}/gateway/proxy_endpoints/{proxy_endpoint_id}](operations/zero_trust_gateway_proxy_endpoints_proxy_endpoint_details.yaml): Get a proxy endpoint
- [PATCH /accounts/{account_id}/gateway/proxy_endpoints/{proxy_endpoint_id}](operations/zero_trust_gateway_proxy_endpoints_update_proxy_endpoint.yaml): Update a proxy endpoint
- [DELETE /accounts/{account_id}/gateway/proxy_endpoints/{proxy_endpoint_id}](operations/zero_trust_gateway_proxy_endpoints_delete_proxy_endpoint.yaml): Delete a proxy endpoint

## Zero Trust Gateway rules

- [Zero Trust Gateway rules operations](tags/zero_trust_gateway_rules.yaml) All 'Zero Trust Gateway rules' operations in one file
- [GET /accounts/{account_id}/gateway/rules](operations/zero_trust_gateway_rules_list_zero_trust_gateway_rules.yaml): List Zero Trust Gateway rules
- [POST /accounts/{account_id}/gateway/rules](operations/zero_trust_gateway_rules_create_zero_trust_gateway_rule.yaml): Create a Zero Trust Gateway rule
- [GET /accounts/{account_id}/gateway/rules/{rule_id}](operations/zero_trust_gateway_rules_zero_trust_gateway_rule_details.yaml): Get Zero Trust Gateway rule details
- [PUT /accounts/{account_id}/gateway/rules/{rule_id}](operations/zero_trust_gateway_rules_update_zero_trust_gateway_rule.yaml): Update a Zero Trust Gateway rule
- [DELETE /accounts/{account_id}/gateway/rules/{rule_id}](operations/zero_trust_gateway_rules_delete_zero_trust_gateway_rule.yaml): Delete a Zero Trust Gateway rule
- [POST /accounts/{account_id}/gateway/rules/{rule_id}/reset_expiration](operations/zero_trust_gateway_rules_reset_expiration_zero_trust_gateway_rule.yaml): Reset the expiration of a Zero Trust Gateway Rule

## Zero Trust Risk Scoring

- [Zero Trust Risk Scoring operations](tags/zero_trust_risk_scoring.yaml) All 'Zero Trust Risk Scoring' operations in one file
- [GET /accounts/{account_id}/zt_risk_scoring/behaviors](operations/dlp_risk_score_behaviors_get.yaml): Get all behaviors and associated configuration
- [PUT /accounts/{account_id}/zt_risk_scoring/behaviors](operations/dlp_risk_score_behaviors_put.yaml): Update configuration for risk behaviors
- [GET /accounts/{account_id}/zt_risk_scoring/summary](operations/dlp_risk_score_summary_get.yaml): Get risk score info for all users in the account
- [GET /accounts/{account_id}/zt_risk_scoring/{user_id}](operations/dlp_risk_score_summary_get_for_user.yaml): Get risk event/score information for a specific user
- [POST /accounts/{account_id}/zt_risk_scoring/{user_id}/reset](operations/dlp_risk_score_reset_post.yaml): Clear the risk score for a particular user

## Zero Trust Risk Scoring Integrations

- [Zero Trust Risk Scoring Integrations operations](tags/zero_trust_risk_scoring_integrations.yaml) All 'Zero Trust Risk Scoring Integrations' operations in one file
- [GET /accounts/{account_id}/zt_risk_scoring/integrations](operations/dlp_zt_risk_score_integration_list.yaml): List all risk score integrations for the account.
- [POST /accounts/{account_id}/zt_risk_scoring/integrations](operations/dlp_zt_risk_score_integration_create.yaml): Create new risk score integration.
- [GET /accounts/{account_id}/zt_risk_scoring/integrations/reference_id/{reference_id}](operations/dlp_zt_risk_score_integration_get_by_reference_id.yaml): Get risk score integration by reference id.
- [GET /accounts/{account_id}/zt_risk_scoring/integrations/{integration_id}](operations/dlp_zt_risk_score_integration_get.yaml): Get risk score integration by id.
- [PUT /accounts/{account_id}/zt_risk_scoring/integrations/{integration_id}](operations/dlp_zt_risk_score_integration_update.yaml): Update a risk score integration.
- [DELETE /accounts/{account_id}/zt_risk_scoring/integrations/{integration_id}](operations/dlp_zt_risk_score_integration_delete.yaml): Delete a risk score integration.

## Zero Trust SSH Settings

- [Zero Trust SSH Settings operations](tags/zero_trust_ssh_settings.yaml) All 'Zero Trust SSH Settings' operations in one file
- [GET /accounts/{account_id}/gateway/audit_ssh_settings](operations/zero_trust_get_audit_ssh_settings.yaml): Get Zero Trust SSH settings
- [PUT /accounts/{account_id}/gateway/audit_ssh_settings](operations/zero_trust_update_audit_ssh_settings.yaml): Update Zero Trust SSH settings
- [POST /accounts/{account_id}/gateway/audit_ssh_settings/rotate_seed](operations/zero_trust_rotate_ssh_account_seed.yaml): Rotate Zero Trust SSH Account Seed

## Zero Trust Subnets

- [Zero Trust Subnets operations](tags/zero_trust_subnets.yaml) All 'Zero Trust Subnets' operations in one file
- [GET /accounts/{account_id}/zerotrust/subnets](operations/zero_trust_networks_subnets_list.yaml): List Subnets
- [PATCH /accounts/{account_id}/zerotrust/subnets/cloudflare_source/{address_family}](operations/zero_trust_networks_subnet_update_cloudflare_source.yaml): Update Cloudflare Source Subnet

## Zero Trust accounts

- [Zero Trust accounts operations](tags/zero_trust_accounts.yaml) All 'Zero Trust accounts' operations in one file
- [GET /accounts/{account_id}/devices/settings](operations/zero_trust_accounts_get_device_settings_for_zero_trust_account.yaml): Get device settings for a Zero Trust account
- [PUT /accounts/{account_id}/devices/settings](operations/zero_trust_accounts_update_device_settings_for_the_zero_trust_account.yaml): Update device settings for a Zero Trust account
- [PATCH /accounts/{account_id}/devices/settings](operations/zero_trust_accounts_patch_device_settings_for_the_zero_trust_account.yaml): Patch device settings for a Zero Trust account
- [DELETE /accounts/{account_id}/devices/settings](operations/zero_trust_accounts_delete_device_settings_for_zero_trust_account.yaml): Reset device settings for a Zero Trust account with defaults. This turns off all proxying.
- [GET /accounts/{account_id}/gateway](operations/zero_trust_accounts_get_zero_trust_account_information.yaml): Get Zero Trust account information
- [POST /accounts/{account_id}/gateway](operations/zero_trust_accounts_create_zero_trust_account.yaml): Create Zero Trust account
- [GET /accounts/{account_id}/gateway/configuration](operations/zero_trust_accounts_get_zero_trust_account_configuration.yaml): Get Zero Trust account configuration
- [PUT /accounts/{account_id}/gateway/configuration](operations/zero_trust_accounts_update_zero_trust_account_configuration.yaml): Update Zero Trust account configuration
- [PATCH /accounts/{account_id}/gateway/configuration](operations/zero_trust_accounts_patch_zero_trust_account_configuration.yaml): Patch Zero Trust account configuration
- [GET /accounts/{account_id}/gateway/configuration/custom_certificate](operations/zero_trust_accounts_get_zero_trust_certificate_configuration.yaml): Get Zero Trust certificate configuration
- [GET /accounts/{account_id}/gateway/logging](operations/zero_trust_accounts_get_logging_settings_for_the_zero_trust_account.yaml): Get logging settings for the Zero Trust account
- [PUT /accounts/{account_id}/gateway/logging](operations/zero_trust_accounts_update_logging_settings_for_the_zero_trust_account.yaml): Update Zero Trust account logging settings

## Zero Trust certificates

- [Zero Trust certificates operations](tags/zero_trust_certificates.yaml) All 'Zero Trust certificates' operations in one file
- [GET /accounts/{account_id}/gateway/certificates](operations/zero_trust_certificates_list_zero_trust_certificates.yaml): List Zero Trust certificates
- [POST /accounts/{account_id}/gateway/certificates](operations/zero_trust_certificates_create_zero_trust_certificate.yaml): Create Zero Trust certificate
- [GET /accounts/{account_id}/gateway/certificates/{certificate_id}](operations/zero_trust_certificates_zero_trust_certificate_details.yaml): Get Zero Trust certificate details
- [DELETE /accounts/{account_id}/gateway/certificates/{certificate_id}](operations/zero_trust_certificates_delete_zero_trust_certificate.yaml): Delete Zero Trust certificate
- [POST /accounts/{account_id}/gateway/certificates/{certificate_id}/activate](operations/zero_trust_certificates_activate_zero_trust_certificate.yaml): Activate a Zero Trust certificate
- [POST /accounts/{account_id}/gateway/certificates/{certificate_id}/deactivate](operations/zero_trust_certificates_deactivate_zero_trust_certificate.yaml): Deactivate a Zero Trust certificate

## Zero Trust lists

- [Zero Trust lists operations](tags/zero_trust_lists.yaml) All 'Zero Trust lists' operations in one file
- [GET /accounts/{account_id}/gateway/lists](operations/zero_trust_lists_list_zero_trust_lists.yaml): List Zero Trust lists
- [POST /accounts/{account_id}/gateway/lists](operations/zero_trust_lists_create_zero_trust_list.yaml): Create Zero Trust list
- [GET /accounts/{account_id}/gateway/lists/{list_id}](operations/zero_trust_lists_zero_trust_list_details.yaml): Get Zero Trust list details
- [PUT /accounts/{account_id}/gateway/lists/{list_id}](operations/zero_trust_lists_update_zero_trust_list.yaml): Update Zero Trust list
- [PATCH /accounts/{account_id}/gateway/lists/{list_id}](operations/zero_trust_lists_patch_zero_trust_list.yaml): Patch Zero Trust list
- [DELETE /accounts/{account_id}/gateway/lists/{list_id}](operations/zero_trust_lists_delete_zero_trust_list.yaml): Delete Zero Trust list
- [GET /accounts/{account_id}/gateway/lists/{list_id}/items](operations/zero_trust_lists_zero_trust_list_items.yaml): Get Zero Trust list items

## Zero Trust organization

- [Zero Trust organization operations](tags/zero_trust_organization.yaml) All 'Zero Trust organization' operations in one file
- [GET /accounts/{account_id}/access/organizations](operations/zero_trust_organization_get_your_zero_trust_organization.yaml): Get your Zero Trust organization
- [POST /accounts/{account_id}/access/organizations](operations/zero_trust_organization_create_your_zero_trust_organization.yaml): Create your Zero Trust organization
- [PUT /accounts/{account_id}/access/organizations](operations/zero_trust_organization_update_your_zero_trust_organization.yaml): Update your Zero Trust organization
- [GET /accounts/{account_id}/access/organizations/doh](operations/zero_trust_organization_get_your_zero_trust_organization_doh_settings.yaml): Get your Zero Trust organization DoH settings
- [PUT /accounts/{account_id}/access/organizations/doh](operations/zero_trust_organization_update_your_zero_trust_organization_doh_settings.yaml): Update your Zero Trust organization DoH settings
- [POST /accounts/{account_id}/access/organizations/revoke_user](operations/zero_trust_organization_revoke_all_access_tokens_for_a_user.yaml): Revoke all Access tokens for a user

## Zero Trust seats

- [Zero Trust seats operations](tags/zero_trust_seats.yaml) All 'Zero Trust seats' operations in one file
- [PATCH /accounts/{account_id}/access/seats](operations/zero_trust_seats_update_a_user_seat.yaml): Update a user seat

## Zero Trust users

- [Zero Trust users operations](tags/zero_trust_users.yaml) All 'Zero Trust users' operations in one file
- [GET /accounts/{account_id}/access/users](operations/zero_trust_users_get_users.yaml): Get users
- [GET /accounts/{account_id}/access/users/{user_id}/active_sessions](operations/zero_trust_users_get_active_sessions.yaml): Get active sessions
- [GET /accounts/{account_id}/access/users/{user_id}/active_sessions/{nonce}](operations/zero_trust_users_get_active_session.yaml): Get single active session
- [GET /accounts/{account_id}/access/users/{user_id}/failed_logins](operations/zero_trust_users_get_failed_logins.yaml): Get failed logins
- [GET /accounts/{account_id}/access/users/{user_id}/last_seen_identity](operations/zero_trust_users_get_last_seen_identity.yaml): Get last seen identity

## Zone

- [Zone operations](tags/zone.yaml) All 'Zone' operations in one file
- [GET /zones](operations/zones_get.yaml): List Zones
- [POST /zones](operations/zones_post.yaml): Create Zone
- [GET /zones/{zone_id}](operations/zones_0_get.yaml): Zone Details
- [PATCH /zones/{zone_id}](operations/zones_0_patch.yaml): Edit Zone
- [DELETE /zones/{zone_id}](operations/zones_0_delete.yaml): Delete Zone
- [PUT /zones/{zone_id}/activation_check](operations/put_zones_zone_id_activation_check.yaml): Rerun the Activation Check
- [POST /zones/{zone_id}/purge_cache](operations/zone_purge.yaml): Purge Cached Content

## Zone Analytics (Deprecated)

- [Zone Analytics (Deprecated) operations](tags/zone_analytics_deprecated.yaml) All 'Zone Analytics (Deprecated)' operations in one file
- [GET /zones/{zone_identifier}/analytics/colos](operations/zone_analytics_deprecated_get_analytics_by_co_locations.yaml): Get analytics by Co-locations
- [GET /zones/{zone_identifier}/analytics/dashboard](operations/zone_analytics_deprecated_get_dashboard.yaml): Get dashboard

## Zone Cache Settings

- [Zone Cache Settings operations](tags/zone_cache_settings.yaml) All 'Zone Cache Settings' operations in one file
- [GET /zones/{zone_id}/cache/cache_reserve](operations/zone_cache_settings_get_cache_reserve_setting.yaml): Get Cache Reserve setting
- [PATCH /zones/{zone_id}/cache/cache_reserve](operations/zone_cache_settings_change_cache_reserve_setting.yaml): Change Cache Reserve setting
- [GET /zones/{zone_id}/cache/cache_reserve_clear](operations/zone_cache_settings_get_cache_reserve_clear.yaml): Get Cache Reserve Clear
- [POST /zones/{zone_id}/cache/cache_reserve_clear](operations/zone_cache_settings_start_cache_reserve_clear.yaml): Start Cache Reserve Clear
- [GET /zones/{zone_id}/cache/regional_tiered_cache](operations/zone_cache_settings_get_regional_tiered_cache_setting.yaml): Get Regional Tiered Cache setting
- [PATCH /zones/{zone_id}/cache/regional_tiered_cache](operations/zone_cache_settings_change_regional_tiered_cache_setting.yaml): Change Regional Tiered Cache setting
- [GET /zones/{zone_id}/cache/variants](operations/zone_cache_settings_get_variants_setting.yaml): Get variants setting
- [PATCH /zones/{zone_id}/cache/variants](operations/zone_cache_settings_change_variants_setting.yaml): Change variants setting
- [DELETE /zones/{zone_id}/cache/variants](operations/zone_cache_settings_delete_variants_setting.yaml): Delete variants setting

## Zone Cloud Connector Rules GET

- [Zone Cloud Connector Rules GET operations](tags/zone_cloud_connector_rules_get.yaml) All 'Zone Cloud Connector Rules GET' operations in one file
- [GET /zones/{zone_id}/cloud_connector/rules](operations/zone_cloud_connector_rules.yaml): Rules

## Zone Cloud Connector Rules PUT

- [Zone Cloud Connector Rules PUT operations](tags/zone_cloud_connector_rules_put.yaml) All 'Zone Cloud Connector Rules PUT' operations in one file
- [PUT /zones/{zone_id}/cloud_connector/rules](operations/zone_cloud_conenctor_rules_put.yaml): Put Rules

## Zone Holds

- [Zone Holds operations](tags/zone_holds.yaml) All 'Zone Holds' operations in one file
- [GET /zones/{zone_id}/hold](operations/zones_0_hold_get.yaml): Get Zone Hold
- [POST /zones/{zone_id}/hold](operations/zones_0_hold_post.yaml): Create Zone Hold
- [PATCH /zones/{zone_id}/hold](operations/zones_0_hold_patch.yaml): Update Zone Hold
- [DELETE /zones/{zone_id}/hold](operations/zones_0_hold_delete.yaml): Remove Zone Hold

## Zone Lockdown

- [Zone Lockdown operations](tags/zone_lockdown.yaml) All 'Zone Lockdown' operations in one file
- [GET /zones/{zone_id}/firewall/lockdowns](operations/zone_lockdown_list_zone_lockdown_rules.yaml): List Zone Lockdown rules
- [POST /zones/{zone_id}/firewall/lockdowns](operations/zone_lockdown_create_a_zone_lockdown_rule.yaml): Create a Zone Lockdown rule
- [GET /zones/{zone_id}/firewall/lockdowns/{lock_downs_id}](operations/zone_lockdown_get_a_zone_lockdown_rule.yaml): Get a Zone Lockdown rule
- [PUT /zones/{zone_id}/firewall/lockdowns/{lock_downs_id}](operations/zone_lockdown_update_a_zone_lockdown_rule.yaml): Update a Zone Lockdown rule
- [DELETE /zones/{zone_id}/firewall/lockdowns/{lock_downs_id}](operations/zone_lockdown_delete_a_zone_lockdown_rule.yaml): Delete a Zone Lockdown rule

## Zone Rate Plan

- [Zone Rate Plan operations](tags/zone_rate_plan.yaml) All 'Zone Rate Plan' operations in one file
- [GET /zones/{zone_id}/available_plans](operations/zone_rate_plan_list_available_plans.yaml): List Available Plans
- [GET /zones/{zone_id}/available_plans/{plan_identifier}](operations/zone_rate_plan_available_plan_details.yaml): Available Plan Details
- [GET /zones/{zone_id}/available_rate_plans](operations/zone_rate_plan_list_available_rate_plans.yaml): List Available Rate Plans

## Zone Rulesets

- [Zone Rulesets operations](tags/zone_rulesets.yaml) All 'Zone Rulesets' operations in one file
- [GET /zones/{zone_id}/rulesets](operations/listzonerulesets.yaml): List zone rulesets
- [POST /zones/{zone_id}/rulesets](operations/createzoneruleset.yaml): Create a zone ruleset
- [GET /zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint](operations/getzoneentrypointruleset.yaml): Get a zone entry point ruleset
- [PUT /zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint](operations/updatezoneentrypointruleset.yaml): Update a zone entry point ruleset
- [GET /zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions](operations/listzoneentrypointrulesetversions.yaml): List a zone entry point ruleset's versions
- [GET /zones/{zone_id}/rulesets/phases/{ruleset_phase}/entrypoint/versions/{ruleset_version}](operations/getzoneentrypointrulesetversion.yaml): Get a zone entry point ruleset version
- [GET /zones/{zone_id}/rulesets/{ruleset_id}](operations/getzoneruleset.yaml): Get a zone ruleset
- [PUT /zones/{zone_id}/rulesets/{ruleset_id}](operations/updatezoneruleset.yaml): Update a zone ruleset
- [DELETE /zones/{zone_id}/rulesets/{ruleset_id}](operations/deletezoneruleset.yaml): Delete a zone ruleset
- [POST /zones/{zone_id}/rulesets/{ruleset_id}/rules](operations/createzonerulesetrule.yaml): Create a zone ruleset rule
- [PATCH /zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}](operations/updatezonerulesetrule.yaml): Update a zone ruleset rule
- [DELETE /zones/{zone_id}/rulesets/{ruleset_id}/rules/{rule_id}](operations/deletezonerulesetrule.yaml): Delete a zone ruleset rule
- [GET /zones/{zone_id}/rulesets/{ruleset_id}/versions](operations/listzonerulesetversions.yaml): List a zone ruleset's versions
- [GET /zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}](operations/getzonerulesetversion.yaml): Get a zone ruleset version
- [DELETE /zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}](operations/deletezonerulesetversion.yaml): Delete a zone ruleset version
- [GET /zones/{zone_id}/rulesets/{ruleset_id}/versions/{ruleset_version}/by_tag/{rule_tag}](operations/listzonerulesetversionrulesbytag.yaml): List a zone ruleset version's rules by tag

## Zone Settings

- [Zone Settings operations](tags/zone_settings.yaml) All 'Zone Settings' operations in one file
- [GET /zones/{zone_id}/settings](operations/zone_settings_get_all_zone_settings.yaml): Get all zone settings
- [PATCH /zones/{zone_id}/settings](operations/zone_settings_edit_zone_settings_info.yaml): Edit multiple zone settings
- [GET /zones/{zone_id}/settings/aegis](operations/zone_cache_settings_get_aegis_setting.yaml): Get aegis setting
- [PATCH /zones/{zone_id}/settings/aegis](operations/zone_cache_settings_change_aegis_setting.yaml): Change aegis setting
- [GET /zones/{zone_id}/settings/fonts](operations/zone_settings_get_fonts_setting.yaml): Get Cloudflare Fonts setting
- [PATCH /zones/{zone_id}/settings/fonts](operations/zone_settings_change_fonts_setting.yaml): Change Cloudflare Fonts setting
- [GET /zones/{zone_id}/settings/origin_h2_max_streams](operations/zone_cache_settings_get_origin_h2_max_streams_setting.yaml): Get Origin H2 Max Streams Setting
- [PATCH /zones/{zone_id}/settings/origin_h2_max_streams](operations/zone_cache_settings_change_origin_h2_max_streams_setting.yaml): Change Origin H2 Max Streams Setting
- [GET /zones/{zone_id}/settings/origin_max_http_version](operations/zone_cache_settings_get_origin_max_http_version_setting.yaml): Get Origin Max HTTP Version Setting
- [PATCH /zones/{zone_id}/settings/origin_max_http_version](operations/zone_cache_settings_change_origin_max_http_version_setting.yaml): Change Origin Max HTTP Version Setting
- [GET /zones/{zone_id}/settings/speed_brain](operations/zone_settings_get_speed_brain_setting.yaml): Get Cloudflare Speed Brain setting
- [PATCH /zones/{zone_id}/settings/speed_brain](operations/zone_settings_change_speed_brain_setting.yaml): Change Cloudflare Speed Brain setting
- [GET /zones/{zone_id}/settings/{setting_id}](operations/zone_settings_get_single_setting.yaml): Get zone setting
- [PATCH /zones/{zone_id}/settings/{setting_id}](operations/zone_settings_edit_single_setting.yaml): Edit zone setting

## Zone Snippets

- [Zone Snippets operations](tags/zone_snippets.yaml) All 'Zone Snippets' operations in one file
- [GET /zones/{zone_id}/snippets](operations/listzonesnippets.yaml): List zone snippets
- [GET /zones/{zone_id}/snippets/snippet_rules](operations/listzonesnippetrules.yaml): List zone snippet rules
- [PUT /zones/{zone_id}/snippets/snippet_rules](operations/updatezonesnippetrules.yaml): Update zone snippet rules
- [DELETE /zones/{zone_id}/snippets/snippet_rules](operations/deletezonesnippetrules.yaml): Delete zone snippet rules
- [GET /zones/{zone_id}/snippets/{snippet_name}](operations/getzonesnippet.yaml): Get a zone snippet
- [PUT /zones/{zone_id}/snippets/{snippet_name}](operations/updatezonesnippet.yaml): Update a zone snippet
- [DELETE /zones/{zone_id}/snippets/{snippet_name}](operations/deletezonesnippet.yaml): Delete a zone snippet
- [GET /zones/{zone_id}/snippets/{snippet_name}/content](operations/getzonesnippetcontent.yaml): Get a zone snippet content

## Zone Subscription

- [Zone Subscription operations](tags/zone_subscription.yaml) All 'Zone Subscription' operations in one file
- [GET /zones/{zone_id}/subscription](operations/zone_subscription_zone_subscription_details.yaml): Zone Subscription Details
- [POST /zones/{zone_id}/subscription](operations/zone_subscription_create_zone_subscription.yaml): Create Zone Subscription
- [PUT /zones/{zone_id}/subscription](operations/zone_subscription_update_zone_subscription.yaml): Update Zone Subscription

## Zone-Level Access applications

- [Zone-Level Access applications operations](tags/zone_level_access_applications.yaml) All 'Zone-Level Access applications' operations in one file
- [GET /zones/{zone_id}/access/apps](operations/zone_level_access_applications_list_access_applications.yaml): List Access Applications
- [POST /zones/{zone_id}/access/apps](operations/zone_level_access_applications_add_a_bookmark_application.yaml): Add an Access application
- [GET /zones/{zone_id}/access/apps/{app_id}](operations/zone_level_access_applications_get_an_access_application.yaml): Get an Access application
- [PUT /zones/{zone_id}/access/apps/{app_id}](operations/zone_level_access_applications_update_a_bookmark_application.yaml): Update an Access application
- [DELETE /zones/{zone_id}/access/apps/{app_id}](operations/zone_level_access_applications_delete_an_access_application.yaml): Delete an Access application
- [POST /zones/{zone_id}/access/apps/{app_id}/revoke_tokens](operations/zone_level_access_applications_revoke_service_tokens.yaml): Revoke application tokens
- [PUT /zones/{zone_id}/access/apps/{app_id}/settings](operations/zone_level_access_applications_put_update_access_application_settings.yaml): Update application settings
- [PATCH /zones/{zone_id}/access/apps/{app_id}/settings](operations/zone_level_access_applications_patch_update_access_application_settings.yaml): Update application settings
- [GET /zones/{zone_id}/access/apps/{app_id}/user_policy_checks](operations/zone_level_access_applications_test_access_policies.yaml): Test Access policies

## Zone-Level Access groups

- [Zone-Level Access groups operations](tags/zone_level_access_groups.yaml) All 'Zone-Level Access groups' operations in one file
- [GET /zones/{zone_id}/access/groups](operations/zone_level_access_groups_list_access_groups.yaml): List Access groups
- [POST /zones/{zone_id}/access/groups](operations/zone_level_access_groups_create_an_access_group.yaml): Create an Access group
- [GET /zones/{zone_id}/access/groups/{group_id}](operations/zone_level_access_groups_get_an_access_group.yaml): Get an Access group
- [PUT /zones/{zone_id}/access/groups/{group_id}](operations/zone_level_access_groups_update_an_access_group.yaml): Update an Access group
- [DELETE /zones/{zone_id}/access/groups/{group_id}](operations/zone_level_access_groups_delete_an_access_group.yaml): Delete an Access group

## Zone-Level Access identity providers

- [Zone-Level Access identity providers operations](tags/zone_level_access_identity_providers.yaml) All 'Zone-Level Access identity providers' operations in one file
- [GET /zones/{zone_id}/access/identity_providers](operations/zone_level_access_identity_providers_list_access_identity_providers.yaml): List Access identity providers
- [POST /zones/{zone_id}/access/identity_providers](operations/zone_level_access_identity_providers_add_an_access_identity_provider.yaml): Add an Access identity provider
- [GET /zones/{zone_id}/access/identity_providers/{identity_provider_id}](operations/zone_level_access_identity_providers_get_an_access_identity_provider.yaml): Get an Access identity provider
- [PUT /zones/{zone_id}/access/identity_providers/{identity_provider_id}](operations/zone_level_access_identity_providers_update_an_access_identity_provider.yaml): Update an Access identity provider
- [DELETE /zones/{zone_id}/access/identity_providers/{identity_provider_id}](operations/zone_level_access_identity_providers_delete_an_access_identity_provider.yaml): Delete an Access identity provider

## Zone-Level Access mTLS authentication

- [Zone-Level Access mTLS authentication operations](tags/zone_level_access_mtls_authentication.yaml) All 'Zone-Level Access mTLS authentication' operations in one file
- [GET /zones/{zone_id}/access/certificates](operations/zone_level_access_mtls_authentication_list_mtls_certificates.yaml): List mTLS certificates
- [POST /zones/{zone_id}/access/certificates](operations/zone_level_access_mtls_authentication_add_an_mtls_certificate.yaml): Add an mTLS certificate
- [GET /zones/{zone_id}/access/certificates/settings](operations/zone_level_access_mtls_authentication_list_mtls_certificates_hostname_settings.yaml): List all mTLS hostname settings
- [PUT /zones/{zone_id}/access/certificates/settings](operations/zone_level_access_mtls_authentication_update_an_mtls_certificate_settings.yaml): Update an mTLS certificate's hostname settings
- [GET /zones/{zone_id}/access/certificates/{certificate_id}](operations/zone_level_access_mtls_authentication_get_an_mtls_certificate.yaml): Get an mTLS certificate
- [PUT /zones/{zone_id}/access/certificates/{certificate_id}](operations/zone_level_access_mtls_authentication_update_an_mtls_certificate.yaml): Update an mTLS certificate
- [DELETE /zones/{zone_id}/access/certificates/{certificate_id}](operations/zone_level_access_mtls_authentication_delete_an_mtls_certificate.yaml): Delete an mTLS certificate

## Zone-Level Access policies

- [Zone-Level Access policies operations](tags/zone_level_access_policies.yaml) All 'Zone-Level Access policies' operations in one file
- [GET /zones/{zone_id}/access/apps/{app_id}/policies](operations/zone_level_access_policies_list_access_policies.yaml): List Access policies
- [POST /zones/{zone_id}/access/apps/{app_id}/policies](operations/zone_level_access_policies_create_an_access_policy.yaml): Create an Access policy
- [GET /zones/{zone_id}/access/apps/{app_id}/policies/{policy_id}](operations/zone_level_access_policies_get_an_access_policy.yaml): Get an Access policy
- [PUT /zones/{zone_id}/access/apps/{app_id}/policies/{policy_id}](operations/zone_level_access_policies_update_an_access_policy.yaml): Update an Access policy
- [DELETE /zones/{zone_id}/access/apps/{app_id}/policies/{policy_id}](operations/zone_level_access_policies_delete_an_access_policy.yaml): Delete an Access policy

## Zone-Level Access service tokens

- [Zone-Level Access service tokens operations](tags/zone_level_access_service_tokens.yaml) All 'Zone-Level Access service tokens' operations in one file
- [GET /zones/{zone_id}/access/service_tokens](operations/zone_level_access_service_tokens_list_service_tokens.yaml): List service tokens
- [POST /zones/{zone_id}/access/service_tokens](operations/zone_level_access_service_tokens_create_a_service_token.yaml): Create a service token
- [GET /zones/{zone_id}/access/service_tokens/{service_token_id}](operations/zone_level_access_service_tokens_get_a_service_token.yaml): Get a service token
- [PUT /zones/{zone_id}/access/service_tokens/{service_token_id}](operations/zone_level_access_service_tokens_update_a_service_token.yaml): Update a service token
- [DELETE /zones/{zone_id}/access/service_tokens/{service_token_id}](operations/zone_level_access_service_tokens_delete_a_service_token.yaml): Delete a service token

## Zone-Level Access short-lived certificate CAs

- [Zone-Level Access short-lived certificate CAs operations](tags/zone_level_access_short_lived_certificate_cas.yaml) All 'Zone-Level Access short-lived certificate CAs' operations in one file
- [GET /zones/{zone_id}/access/apps/ca](operations/zone_level_access_short_lived_certificate_c_as_list_short_lived_certificate_c_as.yaml): List short-lived certificate CAs
- [GET /zones/{zone_id}/access/apps/{app_id}/ca](operations/zone_level_access_short_lived_certificate_c_as_get_a_short_lived_certificate_ca.yaml): Get a short-lived certificate CA
- [POST /zones/{zone_id}/access/apps/{app_id}/ca](operations/zone_level_access_short_lived_certificate_c_as_create_a_short_lived_certificate_ca.yaml): Create a short-lived certificate CA
- [DELETE /zones/{zone_id}/access/apps/{app_id}/ca](operations/zone_level_access_short_lived_certificate_c_as_delete_a_short_lived_certificate_ca.yaml): Delete a short-lived certificate CA

## Zone-Level Authenticated Origin Pulls

- [Zone-Level Authenticated Origin Pulls operations](tags/zone_level_authenticated_origin_pulls.yaml) All 'Zone-Level Authenticated Origin Pulls' operations in one file
- [GET /zones/{zone_id}/origin_tls_client_auth](operations/zone_level_authenticated_origin_pulls_list_certificates.yaml): List Certificates
- [POST /zones/{zone_id}/origin_tls_client_auth](operations/zone_level_authenticated_origin_pulls_upload_certificate.yaml): Upload Certificate
- [GET /zones/{zone_id}/origin_tls_client_auth/settings](operations/zone_level_authenticated_origin_pulls_get_enablement_setting_for_zone.yaml): Get Enablement Setting for Zone
- [PUT /zones/{zone_id}/origin_tls_client_auth/settings](operations/zone_level_authenticated_origin_pulls_set_enablement_for_zone.yaml): Set Enablement for Zone
- [GET /zones/{zone_id}/origin_tls_client_auth/{certificate_id}](operations/zone_level_authenticated_origin_pulls_get_certificate_details.yaml): Get Certificate Details
- [DELETE /zones/{zone_id}/origin_tls_client_auth/{certificate_id}](operations/zone_level_authenticated_origin_pulls_delete_certificate.yaml): Delete Certificate

## Zone-Level Zero Trust organization

- [Zone-Level Zero Trust organization operations](tags/zone_level_zero_trust_organization.yaml) All 'Zone-Level Zero Trust organization' operations in one file
- [GET /zones/{zone_id}/access/organizations](operations/zone_level_zero_trust_organization_get_your_zero_trust_organization.yaml): Get your Zero Trust organization
- [POST /zones/{zone_id}/access/organizations](operations/zone_level_zero_trust_organization_create_your_zero_trust_organization.yaml): Create your Zero Trust organization
- [PUT /zones/{zone_id}/access/organizations](operations/zone_level_zero_trust_organization_update_your_zero_trust_organization.yaml): Update your Zero Trust organization
- [POST /zones/{zone_id}/access/organizations/revoke_user](operations/zone_level_zero_trust_organization_revoke_all_access_tokens_for_a_user.yaml): Revoke all Access tokens for a user

## brand_protection

- [brand_protection operations](tags/brand_protection.yaml) All 'brand_protection' operations in one file
- [GET /accounts/{account_id}/brand-protection/alerts](operations/accounts_account_id_brand_protection_alerts_get.yaml): Read all alerts on submitted domains
- [PATCH /accounts/{account_id}/brand-protection/alerts](operations/accounts_account_id_brand_protection_alerts_patch.yaml): Update alerts on submitted domains by ID
- [PATCH /accounts/{account_id}/brand-protection/alerts/clear](operations/accounts_account_id_brand_protection_alerts_clear_patch.yaml): Update verification statuses of tracked URLs to awaiting by ID
- [PATCH /accounts/{account_id}/brand-protection/alerts/refute](operations/accounts_account_id_brand_protection_alerts_refute_patch.yaml): Update verification statuses of tracked URLs to disproven by ID
- [PATCH /accounts/{account_id}/brand-protection/alerts/verify](operations/accounts_account_id_brand_protection_alerts_verify_patch.yaml): Update verification statuses of tracked URLs to confirmed by ID
- [GET /accounts/{account_id}/brand-protection/brands](operations/accounts_account_id_brand_protection_brands_get.yaml): Read all brands
- [POST /accounts/{account_id}/brand-protection/brands](operations/accounts_account_id_brand_protection_brands_post.yaml): Create new brands
- [DELETE /accounts/{account_id}/brand-protection/brands](operations/accounts_account_id_brand_protection_brands_delete.yaml): Delete brands by ID
- [GET /accounts/{account_id}/brand-protection/brands/patterns](operations/accounts_account_id_brand_protection_brands_patterns_get.yaml): Read patterns for brands by ID
- [POST /accounts/{account_id}/brand-protection/brands/patterns](operations/accounts_account_id_brand_protection_brands_patterns_post.yaml): Create new patterns for brands by ID
- [DELETE /accounts/{account_id}/brand-protection/brands/patterns](operations/accounts_account_id_brand_protection_brands_patterns_delete.yaml): Delete patterns for brands by ID
- [PATCH /accounts/{account_id}/brand-protection/clear](operations/accounts_account_id_brand_protection_clear_patch.yaml): Update verification statuses of submitted URLs to awaiting by ID
- [GET /accounts/{account_id}/brand-protection/domain-info](operations/accounts_account_id_brand_protection_domain_info_get.yaml): Read submitted domains by ID
- [GET /accounts/{account_id}/brand-protection/recent-submissions](operations/accounts_account_id_brand_protection_recent_submissions_get.yaml): Read recent URL submissions
- [PATCH /accounts/{account_id}/brand-protection/refute](operations/accounts_account_id_brand_protection_refute_patch.yaml): Update verification statuses of submitted URLs to disproven by ID
- [GET /accounts/{account_id}/brand-protection/submission-info](operations/accounts_account_id_brand_protection_submission_info_get.yaml): Read URL submissions by ID
- [POST /accounts/{account_id}/brand-protection/submit](operations/accounts_account_id_brand_protection_submit_post.yaml): Create new URL submissions
- [GET /accounts/{account_id}/brand-protection/tracked-domains](operations/accounts_account_id_brand_protection_tracked_domains_get.yaml): Read submitted domains by pattern
- [GET /accounts/{account_id}/brand-protection/url-info](operations/accounts_account_id_brand_protection_url_info_get.yaml): Read submitted URLs by ID
- [PATCH /accounts/{account_id}/brand-protection/verify](operations/accounts_account_id_brand_protection_verify_patch.yaml): Update verification statuses of submitted URLs to confirmed by ID
- [POST /internal/submit](operations/internal_submit_post.yaml): Internal route for testing URL submissions
- [GET /live](operations/live_get.yaml): Run liveness checks
- [GET /ready](operations/ready_get.yaml): Run readiness checks

## brapi

- [brapi operations](tags/brapi.yaml) All 'brapi' operations in one file
- [POST /accounts/{account_id}/browser-rendering/content](operations/brapi_post_content.yaml): Get HTML content.
- [POST /accounts/{account_id}/browser-rendering/json](operations/brapi_post_json.yaml): Get json.
- [POST /accounts/{account_id}/browser-rendering/links](operations/brapi_post_links.yaml): Get Links.
- [POST /accounts/{account_id}/browser-rendering/markdown](operations/brapi_post_markdown.yaml): Get markdown.
- [POST /accounts/{account_id}/browser-rendering/pdf](operations/brapi_post_pdf.yaml): Get PDF.
- [POST /accounts/{account_id}/browser-rendering/scrape](operations/brapi_post_scrape.yaml): Scrape elements.
- [POST /accounts/{account_id}/browser-rendering/screenshot](operations/brapi_post_screenshot.yaml): Get screenshot.
- [POST /accounts/{account_id}/browser-rendering/snapshot](operations/brapi_post_snapshot.yaml): Get HTML content and screenshot.

## domain_search

- [domain_search operations](tags/domain_search.yaml) All 'domain_search' operations in one file
- [GET /accounts/{account_id}/brand-protection/matches](operations/accounts_account_id_brand_protection_matches_get.yaml): Read matches for string queries by ID
- [GET /accounts/{account_id}/brand-protection/matches/download](operations/accounts_account_id_brand_protection_matches_download_get.yaml): Download matches for string queries by ID
- [GET /accounts/{account_id}/brand-protection/queries](operations/accounts_account_id_brand_protection_queries_get.yaml): Read string queries by ID
- [POST /accounts/{account_id}/brand-protection/queries](operations/accounts_account_id_brand_protection_queries_post.yaml): Create new saved string queries
- [PATCH /accounts/{account_id}/brand-protection/queries](operations/accounts_account_id_brand_protection_queries_patch.yaml): Update saved string queries by ID
- [DELETE /accounts/{account_id}/brand-protection/queries](operations/accounts_account_id_brand_protection_queries_delete.yaml): Delete saved string queries by ID
- [POST /accounts/{account_id}/brand-protection/search](operations/accounts_account_id_brand_protection_search_post.yaml): Create new string queries
- [GET /accounts/{account_id}/brand-protection/total-queries](operations/accounts_account_id_brand_protection_total_queries_get.yaml): Read the total number of saved string queries

## logo_match

- [logo_match operations](tags/logo_match.yaml) All 'logo_match' operations in one file
- [GET /accounts/{account_id}/brand-protection/logo-matches](operations/accounts_account_id_brand_protection_logo_matches_get.yaml): Read matches for logo queries by ID
- [GET /accounts/{account_id}/brand-protection/logo-matches/download](operations/accounts_account_id_brand_protection_logo_matches_download_get.yaml): Download matches for logo queries by ID
- [GET /accounts/{account_id}/brand-protection/logos](operations/accounts_account_id_brand_protection_logos_get.yaml): Read all saved logo queries
- [POST /accounts/{account_id}/brand-protection/logos](operations/accounts_account_id_brand_protection_logos_post.yaml): Create new saved logo queries from image files
- [GET /accounts/{account_id}/brand-protection/logos/{logo_id}](operations/accounts_account_id_brand_protection_logos_logo_id_get.yaml): Read saved logo queries by ID
- [DELETE /accounts/{account_id}/brand-protection/logos/{logo_id}](operations/accounts_account_id_brand_protection_logos_logo_id_delete.yaml): Delete saved logo queries by ID
- [POST /accounts/{account_id}/brand-protection/scan-logo](operations/accounts_account_id_brand_protection_scan_logo_post.yaml): Create new logo queries from image files
- [POST /accounts/{account_id}/brand-protection/scan-page](operations/accounts_account_id_brand_protection_scan_page_post.yaml): Create new logo queries from URLs
- [GET /signed-url](operations/signed_url_get.yaml): Internal route for testing signed URLs

## mTLS Certificate Management

- [mTLS Certificate Management operations](tags/mtls_certificate_management.yaml) All 'mTLS Certificate Management' operations in one file
- [GET /accounts/{account_id}/mtls_certificates](operations/m_tls_certificate_management_list_m_tls_certificates.yaml): List mTLS certificates
- [POST /accounts/{account_id}/mtls_certificates](operations/m_tls_certificate_management_upload_m_tls_certificate.yaml): Upload mTLS certificate
- [GET /accounts/{account_id}/mtls_certificates/{mtls_certificate_id}](operations/m_tls_certificate_management_get_m_tls_certificate.yaml): Get mTLS certificate
- [DELETE /accounts/{account_id}/mtls_certificates/{mtls_certificate_id}](operations/m_tls_certificate_management_delete_m_tls_certificate.yaml): Delete mTLS certificate
- [GET /accounts/{account_id}/mtls_certificates/{mtls_certificate_id}/associations](operations/m_tls_certificate_management_list_m_tls_certificate_associations.yaml): List mTLS certificate associations

## security.txt

- [security.txt operations](tags/security_txt.yaml) All 'security.txt' operations in one file
- [GET /zones/{zone_id}/security-center/securitytxt](operations/get_security_txt.yaml): Get security.txt
- [PUT /zones/{zone_id}/security-center/securitytxt](operations/update_security_txt.yaml): Update security.txt
- [DELETE /zones/{zone_id}/security-center/securitytxt](operations/delete_security_txt.yaml): Delete security.txt

## tseng-abuse-complaint-processor_other

- [tseng-abuse-complaint-processor_other operations](tags/tseng_abuse_complaint_processor_other.yaml) All 'tseng-abuse-complaint-processor_other' operations in one file
- [POST /accounts/{account_id}/abuse-reports/{report_type}](operations/submitabusereport.yaml): Submit the Abuse Report of a particular type

## warp-teams-device-api_other

- [warp-teams-device-api_other operations](tags/warp_teams_device_api_other.yaml) All 'warp-teams-device-api_other' operations in one file
- [GET /accounts/{account_id}/devices/registrations/{registration_id}/override_codes](operations/get_registration_override_codes.yaml): Get override codes

## workers_pipelines_other

- [workers_pipelines_other operations](tags/workers_pipelines_other.yaml) All 'workers_pipelines_other' operations in one file
- [GET /accounts/{account_id}/pipelines](operations/getv4accountsbyaccount_idpipelines.yaml): List Pipelines
- [POST /accounts/{account_id}/pipelines](operations/postv4accountsbyaccount_idpipelines.yaml): Create Pipeline
- [GET /accounts/{account_id}/pipelines/{pipeline_name}](operations/getv4accountsbyaccount_idpipelinesbypipeline_name.yaml): Get Pipeline
- [PUT /accounts/{account_id}/pipelines/{pipeline_name}](operations/putv4accountsbyaccount_idpipelinesbypipeline_name.yaml): Update Pipeline
- [DELETE /accounts/{account_id}/pipelines/{pipeline_name}](operations/deletev4accountsbyaccount_idpipelinesbypipeline_name.yaml): Delete Pipeline


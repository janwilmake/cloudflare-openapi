openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /accounts/{account_id}/images/v1:
    get:
      deprecated: true
      description: >-
        List up to 100 images with one request. Use the optional parameters
        below to get a specific range of images.
      operationId: cloudflare-images-list-images
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
        - in: query
          name: page
          schema:
            default: 1
            description: Page number of paginated results.
            minimum: 1
            type: number
        - in: query
          name: per_page
          schema:
            default: 1000
            description: Number of items per page.
            maximum: 10000
            minimum: 10
            type: number
        - in: query
          name: creator
          schema:
            description: >-
              Internal user ID set within the creator field. Setting to empty
              string "" will return images where creator field is not set
            nullable: true
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_images_list_response'
          description: List images response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_images_list_response'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: List images response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: List images
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Read
        - Images Write
    post:
      description: >
        Upload an image with up to 10 Megabytes using a single HTTP POST
        (multipart/form-data) request.

        An image can be uploaded by sending an image file or passing an
        accessible to an API url.
      operationId: cloudflare-images-upload-an-image-via-url
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/images_image_basic_upload'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_image_response_single'
          description: Upload an image response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_image_response_single'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Upload an image response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Upload an image
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Write
  /accounts/{account_id}/images/v1/stats:
    get:
      description: Fetch usage statistics details for Cloudflare Images.
      operationId: cloudflare-images-images-usage-statistics
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_images_stats_response'
          description: Images usage statistics response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_images_stats_response'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Images usage statistics response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Images usage statistics
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Read
        - Images Write
  /accounts/{account_id}/images/v1/{image_id}:
    get:
      description: Fetch details for a single image.
      operationId: cloudflare-images-image-details
      parameters:
        - in: path
          name: image_id
          required: true
          schema:
            $ref: '#/components/schemas/images_image_identifier'
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_image_response_single'
          description: Image details response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_image_response_single'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Image details response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Image details
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Read
        - Images Write
    patch:
      description: >-
        Update image access control. On access control change, all copies of the
        image are purged from cache.
      operationId: cloudflare-images-update-image
      parameters:
        - in: path
          name: image_id
          required: true
          schema:
            $ref: '#/components/schemas/images_image_identifier'
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/images_image_patch_request'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_image_response_single'
          description: Update image response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_image_response_single'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Update image response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Update image
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Write
    delete:
      description: >-
        Delete an image on Cloudflare Images. On success, all copies of the
        image are deleted and purged from cache.
      operationId: cloudflare-images-delete-image
      parameters:
        - in: path
          name: image_id
          required: true
          schema:
            $ref: '#/components/schemas/images_image_identifier'
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      requestBody:
        content:
          application/json: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_deleted_response'
          description: Delete image response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_deleted_response'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Delete image response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Delete image
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Write
  /accounts/{account_id}/images/v1/{image_id}/blob:
    get:
      description: >-
        Fetch base image. For most images this will be the originally uploaded
        file. For larger images it can be a near-lossless version of the
        original.
      operationId: cloudflare-images-base-image
      parameters:
        - in: path
          name: image_id
          required: true
          schema:
            $ref: '#/components/schemas/images_image_identifier'
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Base image response. Returns uploaded image data.
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_image_response_blob'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Base image response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Base image
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Read
        - Images Write
  /accounts/{account_id}/images/v2:
    get:
      description: >
        List up to 10000 images with one request. Use the optional parameters
        below to get a specific range of images.

        Endpoint returns continuation_token if more images are present.
      operationId: cloudflare-images-list-images-v2
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
        - in: query
          name: continuation_token
          schema:
            description: >-
              Continuation token for a next page. List images V2 returns
              continuation_token
            nullable: true
            type: string
        - in: query
          name: per_page
          schema:
            default: 1000
            description: Number of items per page.
            maximum: 10000
            minimum: 10
            type: number
        - in: query
          name: sort_order
          schema:
            default: desc
            description: Sorting order by upload time.
            enum:
              - asc
              - desc
            type: string
        - in: query
          name: creator
          schema:
            description: >-
              Internal user ID set within the creator field. Setting to empty
              string "" will return images where creator field is not set
            nullable: true
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_images_list_response_v2'
          description: List images response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/images_images_list_response_v2'
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: List images response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: List images V2
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Read
        - Images Write
  /accounts/{account_id}/images/v2/direct_upload:
    post:
      description: >-
        Direct uploads allow users to upload images without API keys. A common
        use case are web apps, client-side applications, or mobile devices where
        users upload content directly to Cloudflare Images. This method creates
        a draft record for a future image. It returns an upload URL and an image
        identifier. To verify if the image itself has been uploaded, send an
        image details request
        (accounts/:account_identifier/images/v1/:identifier), and check that the
        `draft: true` property is not present.
      operationId: cloudflare-images-create-authenticated-direct-upload-url-v-2
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/images_account_identifier'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/images_image_direct_upload_request_v2'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/images_image_direct_upload_response_v2'
          description: Create authenticated direct upload URL V2 response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/images_image_direct_upload_response_v2
                  - $ref: '#/components/schemas/images_api-response-common-failure'
          description: Create authenticated direct upload URL V2 response failure
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Create authenticated direct upload URL V2
      tags:
        - Cloudflare Images
      x-api-token-group:
        - Images Write
components:
  schemas:
    images_account_identifier:
      description: Account identifier tag.
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      readOnly: true
      type: string
      x-auditable: true
    images_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/images_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/images_messages'
          example: []
        result:
          enum:
            - null
          nullable: true
          type: object
        success:
          description: Whether the API call was successful
          enum:
            - false
          example: false
          type: boolean
          x-auditable: true
      required:
        - success
        - errors
        - messages
        - result
      type: object
    images_deleted_response:
      allOf:
        - $ref: '#/components/schemas/images_api-response-single'
        - properties:
            result:
              example: {}
              type: object
    images_image_basic_upload:
      properties:
        creator:
          description: Can set the creator field with an internal user ID.
          maxLength: 1024
          type: string
        file:
          description: An image binary data. Only needed when type is uploading a file.
          format: binary
          type: string
          x-auditable: true
        id:
          description: An optional custom unique identifier for your image.
          type: string
          x-auditable: true
        metadata:
          description: >-
            User modifiable key-value store. Can use used for keeping references
            to another system of record for managing images.
          type: object
        requireSignedURLs:
          default: false
          description: >-
            Indicates whether the image requires a signature token for the
            access.
          example: true
          type: boolean
          x-auditable: true
        url:
          description: >-
            A URL to fetch an image from origin. Only needed when type is
            uploading from a URL.
          example: https://example.com/path/to/logo.png
          type: string
          x-auditable: true
      type: object
    images_image_direct_upload_request_v2:
      properties:
        creator:
          description: Can set the creator field with an internal user ID.
          type: string
        expiry:
          default: Now + 30 minutes
          description: >-
            The date after which the upload will not be accepted. Minimum: Now +
            2 minutes. Maximum: Now + 6 hours.
          example: '2021-01-02T02:20:00Z'
          format: date-time
          type: string
          x-auditable: true
        id:
          description: >-
            Optional Image Custom ID. Up to 1024 chars. Can include any number
            of subpaths, and utf8 characters. Cannot start nor end with a /
            (forward slash). Cannot be a UUID.
          example: this/is/my-customid
          maxLength: 1024
          type: string
          x-auditable: true
        metadata:
          description: >-
            User modifiable key-value store. Can be used for keeping references
            to another system of record, for managing images.
          type: object
        requireSignedURLs:
          default: false
          description: >-
            Indicates whether the image requires a signature token to be
            accessed.
          example: true
          type: boolean
          x-auditable: true
      type: object
    images_image_direct_upload_response_v2:
      allOf:
        - $ref: '#/components/schemas/images_api-response-single'
        - properties:
            result:
              properties:
                id:
                  description: Image unique identifier.
                  example: e22e9e6b-c02b-42fd-c405-6c32af5fe600
                  maxLength: 32
                  readOnly: true
                  type: string
                  x-auditable: true
                uploadURL:
                  description: >-
                    The URL the unauthenticated upload can be performed to using
                    a single HTTP POST (multipart/form-data) request.
                  example: >-
                    https://upload.imagedelivery.net/FxUufywByo0m2v3xhKSiU8/e22e9e6b-c02b-42fd-c405-6c32af5fe600
                  type: string
                  x-auditable: true
    images_image_identifier:
      description: Image unique identifier.
      example: 107b9558-dd06-4bbd-5fef-9c2c16bb7900
      maxLength: 32
      readOnly: true
      type: string
      x-auditable: true
    images_image_patch_request:
      properties:
        creator:
          description: Can set the creator field with an internal user ID.
          type: string
        metadata:
          description: >-
            User modifiable key-value store. Can be used for keeping references
            to another system of record for managing images. No change if not
            specified.
          type: object
        requireSignedURLs:
          description: >-
            Indicates whether the image can be accessed using only its UID. If
            set to `true`, a signed token needs to be generated with a signing
            key to view the image. Returns a new UID on a change. No change if
            not specified.
          example: true
          type: boolean
          x-auditable: true
      type: object
    images_image_response_blob:
      anyOf:
        - type: string
        - type: object
      example: <image blob data>
    images_image_response_single:
      allOf:
        - $ref: '#/components/schemas/images_api-response-single'
        - properties:
            result:
              $ref: '#/components/schemas/images_image'
    images_images_list_response:
      allOf:
        - $ref: '#/components/schemas/images_api-response-common'
        - properties:
            result:
              properties:
                images:
                  items:
                    $ref: '#/components/schemas/images_image'
                  type: array
              type: object
    images_images_list_response_v2:
      allOf:
        - $ref: '#/components/schemas/images_api-response-collection-v2'
        - properties:
            result:
              properties:
                images:
                  items:
                    $ref: '#/components/schemas/images_image'
                  type: array
              type: object
    images_images_stats_response:
      allOf:
        - $ref: '#/components/schemas/images_api-response-single'
        - properties:
            result:
              $ref: '#/components/schemas/images_images_stats'

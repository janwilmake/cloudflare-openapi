openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /accounts/{account_id}/cni/interconnects:
    get:
      operationId: list_interconnects
      parameters:
        - description: If specified, only show interconnects located at the given site
          in: query
          name: site
          schema:
            nullable: true
            type: string
        - description: If specified, only show interconnects of the given type
          in: query
          name: type
          schema:
            nullable: true
            type: string
        - in: query
          name: cursor
          schema:
            format: int32
            nullable: true
            type: integer
        - in: query
          name: limit
          schema:
            minimum: 0
            nullable: true
            type: integer
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_InterconnectList'
          description: List of matching interconnect objects
        '400':
          description: Bad request
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: List existing interconnects
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
    post:
      operationId: create_interconnect
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nsc_InterconnectCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_Interconnect'
          description: Information about the new interconnect
        '400':
          description: Bad request
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Create a new interconnect
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic Transit Write
  /accounts/{account_id}/cni/interconnects/{icon}:
    get:
      operationId: get_interconnect
      parameters:
        - description: Interconnect name to retrieve information about
          in: path
          name: icon
          required: true
          schema:
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_Interconnect'
          description: Information about the specified interconnect
        '400':
          description: Bad request
        '404':
          description: Interconnect not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get information about an interconnect object
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
    delete:
      operationId: delete_interconnect
      parameters:
        - description: Interconnect name to retrieve information about
          in: path
          name: icon
          required: true
          schema:
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          description: Successfully deleted interconnect
        '400':
          description: Bad request
        '404':
          description: Interconnect not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Delete an interconnect object
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic Transit Write
  /accounts/{account_id}/cni/interconnects/{icon}/loa:
    get:
      operationId: get_interconnect_loa
      parameters:
        - description: Interconnect name to retrieve information about
          in: path
          name: icon
          required: true
          schema:
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          description: Generated LOA in PDF format
        '400':
          description: Bad request
        '404':
          description: Interconnect not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Generate the Letter of Authorization (LOA) for a given interconnect
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
  /accounts/{account_id}/cni/interconnects/{icon}/status:
    get:
      operationId: get_interconnect_status
      parameters:
        - description: Interconnect name to retrieve information about
          in: path
          name: icon
          required: true
          schema:
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_StatusInfo'
          description: Current interconnect status
        '400':
          description: Bad request
        '404':
          description: Interconnect not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get the current status of an interconnect object
      tags:
        - Interconnects
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
components:
  schemas:
    nsc_AccountTag:
      description: Customer account tag
      type: string
    nsc_Interconnect:
      discriminator:
        mapping:
          direct: '#/components/schemas/nsc_Interconnect_Physical_Body'
          gcp_partner: '#/components/schemas/nsc_Interconnect_GcpPartner_Body'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/nsc_Interconnect_Physical_Body'
        - $ref: '#/components/schemas/nsc_Interconnect_GcpPartner_Body'
      type: object
    nsc_InterconnectCreate:
      discriminator:
        mapping:
          direct: '#/components/schemas/nsc_InterconnectCreate_Physical_Body'
          gcp_partner: '#/components/schemas/nsc_InterconnectCreate_GcpPartner_Body'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/nsc_InterconnectCreate_Physical_Body'
        - $ref: '#/components/schemas/nsc_InterconnectCreate_GcpPartner_Body'
      type: object
    nsc_InterconnectList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/nsc_Interconnect'
          type: array
        next:
          format: int32
          nullable: true
          type: integer
      required:
        - items
      type: object
    nsc_StatusInfo:
      discriminator:
        propertyName: state
      oneOf:
        - properties:
            state:
              enum:
                - Pending
              type: string
          required:
            - state
          type: object
        - properties:
            reason:
              description: Diagnostic information, if available
              nullable: true
              type: string
            state:
              enum:
                - Down
              type: string
          required:
            - state
          type: object
        - properties:
            reason:
              description: Diagnostic information, if available
              nullable: true
              type: string
            state:
              enum:
                - Unhealthy
              type: string
          required:
            - state
          type: object
        - properties:
            state:
              enum:
                - Healthy
              type: string
          required:
            - state
          type: object
      type: object

openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /zones:
    get:
      description: >
        Lists, searches, sorts, and filters your zones. Listing zones across
        more than 500 accounts

        is currently not allowed.
      operationId: zones-get
      parameters:
        - examples:
            Basic Query:
              summary: Simple Query
              value: example.com
            Contains Query:
              summary: Contains Query
              value: contains:.org
            Ends With Query:
              summary: Ends With Query
              value: ends_with:arpa
            Starts With Query:
              summary: Starts With Query
              value: starts_with:dev
          in: query
          name: name
          schema:
            description: >
              A domain name. Optional filter operators can be provided to extend
              refine the search:
                * `equal` (default)
                * `not_equal`
                * `starts_with`
                * `ends_with`
                * `contains`
                * `starts_with_case_sensitive`
                * `ends_with_case_sensitive`
                * `contains_case_sensitive`
            maxLength: 253
            type: string
        - in: query
          name: status
          schema:
            description: Specify a zone status to filter by.
            enum:
              - initializing
              - pending
              - active
              - moved
            type: string
        - in: query
          name: account.id
          schema:
            description: Filter by an account ID.
            type: string
        - examples:
            Basic Query:
              summary: Simple Query
              value: Dev Account
            Contains Query:
              summary: Contains Query
              value: contains:Test
          in: query
          name: account.name
          schema:
            description: >
              An account Name. Optional filter operators can be provided to
              extend refine the search:
                * `equal` (default)
                * `not_equal`
                * `starts_with`
                * `ends_with`
                * `contains`
                * `starts_with_case_sensitive`
                * `ends_with_case_sensitive`
                * `contains_case_sensitive`
            maxLength: 253
            type: string
        - in: query
          name: page
          schema:
            default: 1
            description: Page number of paginated results.
            minimum: 1
            type: number
        - in: query
          name: per_page
          schema:
            default: 20
            description: Number of zones per page.
            maximum: 50
            minimum: 5
            type: number
        - in: query
          name: order
          schema:
            description: Field to order zones by.
            enum:
              - name
              - status
              - account.id
              - account.name
              - plan.id
            example: status
            type: string
        - in: query
          name: direction
          schema:
            description: Direction to order zones.
            enum:
              - asc
              - desc
            example: desc
            type: string
        - in: query
          name: match
          schema:
            default: all
            description: Whether to match all search requirements or at least one (any).
            enum:
              - any
              - all
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/zones_api-response-common'
                  - properties:
                      result_info:
                        $ref: '#/components/schemas/zones_result_info'
                  - properties:
                      result:
                        items:
                          $ref: '#/components/schemas/zones_zone'
                        type: array
          description: List Zones response.
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-common-failure'
          description: List Zones response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: List Zones
      tags:
        - Zone
    post:
      operationId: zones-post
      requestBody:
        content:
          application/json:
            schema:
              properties:
                account:
                  properties:
                    id:
                      $ref: '#/components/schemas/zones_identifier'
                  type: object
                name:
                  $ref: '#/components/schemas/zones_name'
                type:
                  $ref: '#/components/schemas/zones_type'
              required:
                - name
                - account
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/zones_api-response-common'
                  - properties:
                      result:
                        $ref: '#/components/schemas/zones_zone'
                    type: object
          description: Create Zone response.
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-common-failure'
          description: Create Zone response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Create Zone
      tags:
        - Zone
      x-api-token-group:
        - Zone Zone Edit
        - Zone DNS Edit
  /zones/{zone_id}:
    get:
      operationId: zones-0-get
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/zones_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/zones_api-response-common'
                  - properties:
                      result:
                        $ref: '#/components/schemas/zones_zone'
                    type: object
          description: Zone Details response.
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-common-failure'
          description: Zone Details response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Zone Details
      tags:
        - Zone
      x-api-token-group:
        - Trust and Safety Write
        - Trust and Safety Read
        - 'Zero Trust: PII Read'
        - Zaraz Edit
        - Zaraz Read
        - Zaraz Admin
        - 'Access: Apps and Policies Revoke'
        - 'Access: Apps and Policies Write'
        - 'Access: Apps and Policies Read'
        - 'Access: Apps and Policies Revoke'
        - 'Access: Mutual TLS Certificates Write'
        - 'Access: Organizations, Identity Providers, and Groups Write'
        - Zone Settings Write
        - Zone Settings Read
        - Zone Read
        - DNS Read
        - Workers Scripts Write
        - Workers Scripts Read
        - Zone Write
        - Workers Routes Write
        - Workers Routes Read
        - Stream Write
        - Stream Read
        - SSL and Certificates Write
        - SSL and Certificates Read
        - Logs Write
        - Logs Read
        - Cache Purge
        - Page Rules Write
        - Page Rules Read
        - Load Balancers Write
        - Load Balancers Read
        - Firewall Services Write
        - Firewall Services Read
        - DNS Write
        - Apps Write
        - Analytics Read
        - 'Access: Apps and Policies Write'
        - 'Access: Apps and Policies Read'
      x-cfPermissionsRequired:
        enum:
          - '#zone:read'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
    patch:
      description: Edits a zone. Only one zone property can be changed at a time.
      operationId: zones-0-patch
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/zones_identifier'
      requestBody:
        content:
          application/json:
            schema:
              example:
                paused: true
              properties:
                paused:
                  $ref: '#/components/schemas/zones_paused'
                plan:
                  description: >
                    (Deprecated) Please use the `/zones/{zone_id}/subscription`
                    API

                    to update a zone's plan. Changing this value will
                    create/cancel

                    associated subscriptions. To view available plans for this
                    zone,

                    see Zone Plans.
                  properties:
                    id:
                      $ref: '#/components/schemas/zones_identifier'
                  type: object
                type:
                  description: >
                    A full zone implies that DNS is hosted with Cloudflare. A
                    partial

                    zone is typically a partner-hosted zone or a CNAME setup.
                    This

                    parameter is only available to Enterprise customers or if it
                    has

                    been explicitly enabled on a zone.
                  enum:
                    - full
                    - partial
                    - secondary
                    - internal
                  example: full
                  type: string
                vanity_name_servers:
                  $ref: '#/components/schemas/zones_vanity_name_servers'
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/zones_api-response-common'
                  - properties:
                      result:
                        $ref: '#/components/schemas/zones_zone'
                    type: object
          description: Edit Zone response.
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-common-failure'
          description: Edit Zone response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Edit Zone
      tags:
        - Zone
      x-api-token-group:
        - Zone Write
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
    delete:
      description: Deletes an existing zone.
      operationId: zones-0-delete
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/zones_identifier'
      requestBody:
        content:
          application/json: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-single-id'
          description: Delete Zone response.
        4XX:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zones_api-response-common-failure'
          description: Delete Zone response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Delete Zone
      tags:
        - Zone
      x-api-token-group:
        - Zone Write
      x-cfPermissionsRequired:
        enum:
          - '#zone:edit'
      x-cfPlanAvailability:
        business: true
        enterprise: true
        free: true
        pro: true
  /zones/{zone_id}/activation_check:
    put:
      description: |-
        Triggeres a new activation check for a PENDING Zone. This can be
        triggered every 5 min for paygo/ent customers, every hour for FREE
        Zones.
      operationId: put-zones-zone_id-activation_check
      parameters:
        - description: Zone ID
          in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/zone-activation_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/zone-activation_api-response-single'
                  - properties:
                      result:
                        properties:
                          id:
                            $ref: '#/components/schemas/zone-activation_identifier'
                        type: object
                    type: object
          description: Successful Response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/zone-activation_api-response-common-failure
          description: Client Error
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Rerun the Activation Check
      tags:
        - Zone
      x-api-token-group:
        - Zone Write
  /zones/{zone_id}/purge_cache:
    post:
      description: >
        ### Purge All Cached Content

        Removes ALL files from Cloudflare's cache. All tiers can purge
        everything.

        ```

        {"purge_everything": true}

        ```


        ### Purge Cached Content by URL

        Granularly removes one or more files from Cloudflare's cache by
        specifying URLs. All tiers can purge by URL.


        To purge files with custom cache keys, include the headers used to
        compute the cache key as in the example. If you have a device type or
        geo in your cache key, you will need to include the CF-Device-Type or
        CF-IPCountry headers. If you have lang in your cache key, you will need
        to include the Accept-Language header.


        **NB:** When including the Origin header, be sure to include the
        **scheme** and **hostname**. The port number can be omitted if it is the
        default port (80 for http, 443 for https), but must be included
        otherwise.


        Single file purge example with files:

        ```

        {"files": ["http://www.example.com/css/styles.css",
        "http://www.example.com/js/index.js"]}

        ```

        Single file purge example with url and header pairs:

        ```

        {"files": [{url: "http://www.example.com/cat_picture.jpg", headers: {
        "CF-IPCountry": "US", "CF-Device-Type": "desktop", "Accept-Language":
        "zh-CN" }}, {url: "http://www.example.com/dog_picture.jpg", headers: {
        "CF-IPCountry": "EU", "CF-Device-Type": "mobile", "Accept-Language":
        "en-US" }}]}

        ```


        ### Purge Cached Content by Tag, Host or Prefix

        Granularly removes one or more files from Cloudflare's cache either by
        specifying the host, the associated Cache-Tag, or a Prefix.


        Flex purge with tags:

        ```

        {"tags": ["a-cache-tag", "another-cache-tag"]}

        ```

        Flex purge with hosts:

        ```

        {"hosts": ["www.example.com", "images.example.com"]}

        ```

        Flex purge with prefixes:

        ```

        {"prefixes": ["www.example.com/foo", "images.example.com/bar/baz"]}

        ```


        ### Availability and limits

        please refer to [purge cache availability and limits documentation
        page](https://developers.cloudflare.com/cache/how-to/purge-cache/#availability-and-limits).
      operationId: zone-purge
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/cache-purge_identifier'
      requestBody:
        content:
          application/json:
            examples:
              Flex Purge with Hosts:
                summary: Flex purge example with hosts list
                value:
                  hosts:
                    - www.example.com
                    - images.example.com
              Flex Purge with Prefixes:
                summary: Flex purge example with prefixes list
                value:
                  prefixes:
                    - www.example.com/foo
                    - images.example.com/bar/baz
              Flex Purge with Tags:
                summary: Flex purge example with tags list
                value:
                  tags:
                    - a-cache-tag
                    - another-cache-tag
              Purge Everything:
                summary: Purge everything example
                value:
                  purge_everything: true
              Single File Purge:
                summary: Single file purge example with files list
                value:
                  files:
                    - http://www.example.com/css/styles.css
                    - http://www.example.com/js/index.js
              Single File Purge with UrlAndHeaders:
                summary: Single file purge example with url and headers list
                value:
                  files:
                    - headers:
                        Accept-Language: zh-CN
                        CF-Device-Type: desktop
                        CF-IPCountry: US
                      url: http://www.example.com/cat_picture.jpg
                    - headers:
                        Accept-Language: en-US
                        CF-Device-Type: mobile
                        CF-IPCountry: EU
                      url: http://www.example.com/dog_picture.jpg
            schema:
              anyOf:
                - $ref: '#/components/schemas/cache-purge_FlexPurgeByTags'
                - $ref: '#/components/schemas/cache-purge_FlexPurgeByHostnames'
                - $ref: '#/components/schemas/cache-purge_FlexPurgeByPrefixes'
                - $ref: '#/components/schemas/cache-purge_Everything'
                - $ref: '#/components/schemas/cache-purge_SingleFile'
                - $ref: '#/components/schemas/cache-purge_SingleFileWithUrlAndHeaders'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cache-purge_api-response-single-id'
          description: Request to purge cached content successfull.
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/cache-purge_api-response-single-id'
                  - $ref: >-
                      #/components/schemas/cache-purge_api-response-common-failure
          description: Request to purge cached content failed.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Purge Cached Content
      tags:
        - Zone
      x-api-token-group:
        - Cache Purge
      x-cfPermissionsRequired:
        enum:
          - '#cache_purge:edit'
components:
  schemas:
    cache-purge_Everything:
      properties:
        purge_everything:
          description: >-
            For more information, please refer to [purge everything
            documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge-everything/).
          example: true
          type: boolean
          x-auditable: true
      title: Purge everything
      type: object
    cache-purge_FlexPurgeByHostnames:
      properties:
        hosts:
          description: >-
            For more information purging by hostnames, please refer to [purge by
            hostname documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge-by-hostname/).
          example:
            - www.example.com
            - images.example.com
          items:
            type: string
            x-auditable: true
          type: array
      title: Purge by hostnames
      type: object
    cache-purge_FlexPurgeByPrefixes:
      properties:
        prefixes:
          description: >-
            For more information on purging by prefixes, please refer to [purge
            by prefix documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge_by_prefix/).
          example:
            - www.example.com/foo
            - images.example.com/bar/baz
          items:
            type: string
            x-auditable: true
          type: array
      title: Purge by prefixes
      type: object
    cache-purge_FlexPurgeByTags:
      properties:
        tags:
          description: >-
            For more information on cache tags and purging by tags, please refer
            to [purge by cache-tags documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge-by-tags/).
          example:
            - a-cache-tag
            - another-cache-tag
          items:
            type: string
            x-auditable: true
          type: array
      title: Purge by tags
      type: object
    cache-purge_SingleFile:
      properties:
        files:
          description: >-
            For more information on purging files, please refer to [purge by
            single-file documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge-by-single-file/).
          example:
            - http://www.example.com/css/styles.css
            - http://www.example.com/js/index.js
          items:
            type: string
            x-auditable: true
          type: array
      title: Purge files
      type: object
    cache-purge_SingleFileWithUrlAndHeaders:
      properties:
        files:
          description: >-
            For more information on purging files with URL and headers, please
            refer to [purge by single-file documentation
            page](https://developers.cloudflare.com/cache/how-to/purge-cache/purge-by-single-file/).
          example:
            - headers:
                Accept-Language: zh-CN
                CF-Device-Type: desktop
                CF-IPCountry: US
              url: http://www.example.com/cat_picture.jpg
            - headers:
                Accept-Language: en-US
                CF-Device-Type: mobile
                CF-IPCountry: EU
              url: http://www.example.com/dog_picture.jpg
          items:
            properties:
              headers:
                additionalProperties:
                  type: string
                  x-auditable: true
                example: <HTTP header object>
                type: object
              url:
                example: http://www.example.com/cat_picture.jpg
                type: string
                x-auditable: true
            type: object
          type: array
      title: Purge files with URL and headers
      type: object
    cache-purge_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/cache-purge_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/cache-purge_messages'
          example: []
        result:
          nullable: true
          type: object
        success:
          description: Indicates the API call's success or failure.
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    cache-purge_api-response-single-id:
      properties:
        errors:
          $ref: '#/components/schemas/cache-purge_messages'
        messages:
          $ref: '#/components/schemas/cache-purge_messages'
        result:
          nullable: true
          properties:
            id:
              $ref: '#/components/schemas/cache-purge_identifier'
          required:
            - id
          type: object
        success:
          description: Indicates the API call's success or failure.
          example: true
          type: boolean
      required:
        - success
        - errors
        - messages
      type: object
    cache-purge_identifier:
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
    zone-activation_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/zone-activation_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/zone-activation_messages'
          example: []
        result:
          enum:
            - null
          nullable: true
          type: object
        success:
          description: Whether the API call was successful.
          enum:
            - false
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    zone-activation_api-response-single:
      allOf:
        - $ref: '#/components/schemas/zone-activation_api-response-common'
      type: object
    zone-activation_identifier:
      description: Identifier.
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
      x-auditable: true
    zones_api-response-common:
      properties:
        errors:
          $ref: '#/components/schemas/zones_messages'
        messages:
          $ref: '#/components/schemas/zones_messages'
        success:
          description: Whether the API call was successful.
          example: true
          type: boolean
      required:
        - success
        - errors
        - messages
      type: object
    zones_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/zones_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/zones_messages'
          example: []
        result:
          nullable: true
          type: object
        success:
          description: Whether the API call was successful.
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    zones_api-response-single-id:
      allOf:
        - $ref: '#/components/schemas/zones_api-response-common'
        - properties:
            result:
              nullable: true
              properties:
                id:
                  $ref: '#/components/schemas/zones_identifier'
              required:
                - id
              type: object
      type: object
    zones_identifier:
      description: Identifier
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
    zones_name:
      description: The domain name.
      example: example.com
      maxLength: 253
      pattern: ^([a-zA-Z0-9][\-a-zA-Z0-9]*\.)+[\-a-zA-Z0-9]{2,20}$
      type: string
    zones_paused:
      default: false
      description: |
        Indicates whether the zone is only using Cloudflare DNS services. A
        true value means the zone will not receive security or performance
        benefits.
      type: boolean
    zones_result_info:
      properties:
        count:
          description: Total number of results for the requested service.
          example: 1
          type: number
        page:
          description: Current page within paginated list of results.
          example: 1
          type: number
        per_page:
          description: Number of results per page of results.
          example: 20
          type: number
        total_count:
          description: Total results available without any search parameters.
          example: 2000
          type: number
        total_pages:
          description: Total number of pages
          example: 100
          type: number
      type: object
    zones_type:
      default: full
      description: >
        A full zone implies that DNS is hosted with Cloudflare. A partial zone
        is

        typically a partner-hosted zone or a CNAME setup.
      enum:
        - full
        - partial
        - secondary
        - internal
      example: full
      type: string
    zones_vanity_name_servers:
      default: []
      description: |-
        An array of domains used for custom name servers. This is only
        available for Business and Enterprise plans.
      example:
        - ns1.example.com
        - ns2.example.com
      items:
        format: hostname
        maxLength: 253
        type: string
      type: array
    zones_zone:
      properties:
        account:
          description: The account the zone belongs to.
          properties:
            id:
              $ref: '#/components/schemas/zones_identifier'
            name:
              description: The name of the account.
              example: Example Account Name
              type: string
          type: object
        activated_on:
          description: |-
            The last time proof of ownership was detected and the zone was made
            active.
          example: '2014-01-02T00:01:00.12345Z'
          format: date-time
          nullable: true
          readOnly: true
          type: string
        cname_suffix:
          description: |-
            Allows the customer to use a custom apex.
            *Tenants Only Configuration*.
          example: cdn.cloudflare.com
          type: string
        created_on:
          description: When the zone was created.
          example: '2014-01-01T05:20:00.12345Z'
          format: date-time
          readOnly: true
          type: string
        development_mode:
          description: |-
            The interval (in seconds) from when development mode expires
            (positive integer) or last expired (negative integer) for the
            domain. If development mode has never been enabled, this value is 0.
          example: 7200
          readOnly: true
          type: number
        id:
          $ref: '#/components/schemas/zones_identifier'
        meta:
          description: Metadata about the zone.
          properties:
            cdn_only:
              description: The zone is only configured for CDN.
              example: true
              type: boolean
            custom_certificate_quota:
              description: Number of Custom Certificates the zone can have.
              example: 1
              type: integer
            dns_only:
              description: The zone is only configured for DNS.
              example: true
              type: boolean
            foundation_dns:
              description: The zone is setup with Foundation DNS.
              example: true
              type: boolean
            page_rule_quota:
              description: Number of Page Rules a zone can have.
              example: 100
              type: integer
            phishing_detected:
              description: The zone has been flagged for phishing.
              example: false
              type: boolean
            step:
              example: 2
              type: integer
          type: object
        modified_on:
          description: When the zone was last modified.
          example: '2014-01-01T05:20:00.12345Z'
          format: date-time
          readOnly: true
          type: string
        name:
          description: The domain name.
          example: example.com
          maxLength: 253
          pattern: ^([a-zA-Z0-9][\-a-zA-Z0-9]*\.)+[\-a-zA-Z0-9]{2,20}$
          type: string
        name_servers:
          description: The name servers Cloudflare assigns to a zone.
          example:
            - bob.ns.cloudflare.com
            - lola.ns.cloudflare.com
          items:
            format: hostname
            type: string
          readOnly: true
          type: array
        original_dnshost:
          description: DNS host at the time of switching to Cloudflare.
          example: NameCheap
          maxLength: 50
          nullable: true
          readOnly: true
          type: string
        original_name_servers:
          description: Original name servers before moving to Cloudflare.
          example:
            - ns1.originaldnshost.com
            - ns2.originaldnshost.com
          items:
            format: hostname
            type: string
          nullable: true
          readOnly: true
          type: array
        original_registrar:
          description: Registrar for the domain at the time of switching to Cloudflare.
          example: GoDaddy
          nullable: true
          readOnly: true
          type: string
        owner:
          description: The owner of the zone.
          properties:
            id:
              $ref: '#/components/schemas/zones_identifier'
            name:
              description: Name of the owner.
              example: Example Org
              type: string
            type:
              description: The type of owner.
              example: organization
              type: string
          type: object
        paused:
          $ref: '#/components/schemas/zones_paused'
        permissions:
          deprecated: true
          description: Legacy permissions based on legacy user membership information.
          items:
            example: '#worker:read'
            type: string
          type: array
          x-stainless-message: This has been replaced by Account memberships.
        plan:
          deprecated: true
          description: A Zones subscription information.
          properties:
            can_subscribe:
              description: States if the subscription can be activated.
              example: false
              type: boolean
            currency:
              description: The denomination of the customer.
              example: USD
              type: string
            externally_managed:
              description: If this Zone is managed by another company.
              example: false
              type: boolean
            frequency:
              description: How often the customer is billed.
              example: monthly
              type: string
            id:
              $ref: '#/components/schemas/zones_identifier'
            is_subscribed:
              description: States if the subscription active.
              example: false
              type: boolean
            legacy_discount:
              description: If the legacy discount applies to this Zone.
              example: false
              type: boolean
            legacy_id:
              description: The legacy name of the plan.
              example: free
              type: string
            name:
              description: Name of the owner.
              example: Example Org
              type: string
            price:
              description: How much the customer is paying.
              example: 10.99
              type: number
          x-stainless-message: >-
            Please use the `/zones/{zone_id}/subscription` API

            to update a zone's plan. Changing this value will create/cancel

            associated subscriptions. To view available plans for this zone,

            see [Zone
            Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/).
        status:
          description: The zone status on Cloudflare.
          enum:
            - initializing
            - pending
            - active
            - moved
          example: active
          readOnly: true
          type: string
        tenant:
          description: >-
            The root organizational unit that this zone belongs to (such as a
            tenant or organization).
          properties:
            id:
              $ref: '#/components/schemas/zones_identifier'
            name:
              description: The name of the Tenant account.
              example: Example Account Name
              type: string
        tenant_unit:
          description: >-
            The immediate parent organizational unit that this zone belongs to
            (such as under a tenant or sub-organization).
          properties:
            id:
              $ref: '#/components/schemas/zones_identifier'
        type:
          $ref: '#/components/schemas/zones_type'
        vanity_name_servers:
          default: []
          description: >-
            An array of domains used for custom name servers. This is only
            available for Business and Enterprise plans.
          example:
            - ns1.example.com
            - ns2.example.com
          items:
            format: hostname
            maxLength: 253
            type: string
          type: array
        verification_key:
          description: Verification key for partial zone setup.
          example: 284344499-1084221259
          readOnly: true
          type: string
      required:
        - id
        - name
        - development_mode
        - owner
        - account
        - meta
        - name_servers
        - original_name_servers
        - original_registrar
        - original_dnshost
        - created_on
        - modified_on
        - activated_on
        - plan
      type: object

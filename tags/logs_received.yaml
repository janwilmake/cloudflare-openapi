openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /zones/{zone_id}/logs/control/retention/flag:
    get:
      description: Gets log retention flag for Logpull API.
      operationId: get-zones-zone_id-logs-control-retention-flag
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/logcontrol_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logcontrol_retention_flag_response_single'
          description: Get log retention flag response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/logcontrol_api-response-common-failure
          description: Get log retention flag response failure
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get log retention flag
      tags:
        - Logs Received
      x-api-token-group:
        - Logs Write
        - Logs Read
      x-cfPermissionsRequired:
        enum:
          - '#logs:read'
          - '#analytics:read'
      x-cfPlanAvailability:
        business: false
        enterprise: true
        free: false
        pro: false
    post:
      description: Updates log retention flag for Logpull API.
      operationId: post-zones-zone_id-logs-control-retention-flag
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/logcontrol_identifier'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logcontrol_retention_flag'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logcontrol_retention_flag_response_single'
          description: Update log retention flag response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/logcontrol_api-response-common-failure
          description: Update log retention flag response failure
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Update log retention flag
      tags:
        - Logs Received
      x-api-token-group:
        - Logs Write
      x-cfPermissionsRequired:
        enum:
          - '#logs:edit'
      x-cfPlanAvailability:
        business: false
        enterprise: true
        free: false
        pro: false
  /zones/{zone_id}/logs/rayids/{ray_id}:
    get:
      description: >-
        The `/rayids` api route allows lookups by specific rayid. The rayids
        route will return zero, one, or more records (ray ids are not unique).
      operationId: get-zones-zone_id-logs-rayids-ray_id
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/logshare_identifier'
        - in: path
          name: ray_id
          required: true
          schema:
            $ref: '#/components/schemas/logshare_ray_identifier'
        - in: query
          name: fields
          schema:
            $ref: '#/components/schemas/logshare_fields'
        - in: query
          name: timestamps
          schema:
            $ref: '#/components/schemas/logshare_timestamps'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logshare_logs_response_json_lines'
          description: Get logs RayIDs response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/logshare_api-response-common-failure'
          description: Get logs RayIDs response failure
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get logs RayIDs
      tags:
        - Logs Received
      x-api-token-group:
        - Logs Write
        - Logs Read
      x-cfPlanAvailability:
        business: false
        enterprise: true
        free: false
        pro: false
  /zones/{zone_id}/logs/received:
    get:
      description: >-
        The `/received` api route allows customers to retrieve their edge HTTP
        logs. The basic access pattern is "give me all the logs for zone Z for
        minute M", where the minute M refers to the time records were received
        at Cloudflare's central data center. `start` is inclusive, and `end` is
        exclusive. Because of that, to get all data, at minutely cadence,
        starting at 10AM, the proper values are:
        `start=2018-05-20T10:00:00Z&end=2018-05-20T10:01:00Z`, then
        `start=2018-05-20T10:01:00Z&end=2018-05-20T10:02:00Z` and so on; the
        overlap will be handled properly.
      operationId: get-zones-zone_id-logs-received
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/logshare_identifier'
        - in: query
          name: start
          schema:
            $ref: '#/components/schemas/logshare_start'
        - in: query
          name: end
          required: true
          schema:
            $ref: '#/components/schemas/logshare_end'
        - in: query
          name: fields
          schema:
            $ref: '#/components/schemas/logshare_fields'
        - in: query
          name: sample
          schema:
            $ref: '#/components/schemas/logshare_sample'
        - in: query
          name: count
          schema:
            $ref: '#/components/schemas/logshare_count'
        - in: query
          name: timestamps
          schema:
            $ref: '#/components/schemas/logshare_timestamps'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logshare_logs_response_json_lines'
          description: Get logs received response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/logshare_api-response-common-failure'
          description: Get logs received response failure
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get logs received
      tags:
        - Logs Received
      x-api-token-group:
        - Logs Write
        - Logs Read
      x-cfPermissionsRequired:
        enum:
          - '#logs:read'
      x-cfPlanAvailability:
        business: false
        enterprise: true
        free: false
        pro: false
  /zones/{zone_id}/logs/received/fields:
    get:
      description: >-
        Lists all fields available. The response is json object with key-value
        pairs, where keys are field names, and values are descriptions.
      operationId: get-zones-zone_id-logs-received-fields
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            $ref: '#/components/schemas/logshare_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logshare_fields_response'
          description: List fields response
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/logshare_api-response-common-failure'
          description: List fields response failure
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: List fields
      tags:
        - Logs Received
      x-api-token-group:
        - Logs Write
        - Logs Read
      x-cfPlanAvailability:
        business: false
        enterprise: true
        free: false
        pro: false
components:
  schemas:
    logcontrol_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/logcontrol_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/logcontrol_messages'
          example: []
        result:
          enum:
            - null
          nullable: true
          type: object
        success:
          description: Whether the API call was successful.
          enum:
            - false
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    logcontrol_identifier:
      description: Identifier.
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
      x-auditable: true
    logcontrol_retention_flag:
      nullable: true
      properties:
        flag:
          $ref: '#/components/schemas/logcontrol_flag'
      type: object
    logcontrol_retention_flag_response_single:
      allOf:
        - $ref: '#/components/schemas/logcontrol_api-response-single'
        - properties:
            result:
              $ref: '#/components/schemas/logcontrol_retention_flag'
    logshare_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/logshare_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/logshare_messages'
          example: []
        result:
          enum:
            - null
          nullable: true
          type: object
        success:
          description: Whether the API call was successful
          enum:
            - false
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    logshare_count:
      description: >-
        When `?count=` is provided, the response will contain up to `count`
        results. Since results are not sorted, you are likely to get different
        data for repeated requests. `count` must be an integer > 0.
      minimum: 1
      type: integer
      x-auditable: true
    logshare_end:
      anyOf:
        - type: string
        - type: integer
      description: >-
        Sets the (exclusive) end of the requested time frame. This can be a unix
        timestamp (in seconds or nanoseconds), or an absolute timestamp that
        conforms to RFC 3339. `end` must be at least five minutes earlier than
        now and must be later than `start`. Difference between `start` and `end`
        must be not greater than one hour.
      example: '2018-05-20T10:01:00Z'
      x-auditable: true
    logshare_fields:
      description: >-
        The `/received` route by default returns a limited set of fields, and
        allows customers to override the default field set by specifying
        individual fields. The reasons for this are: 1. Most customers require
        only a small subset of fields, but that subset varies from customer to
        customer; 2. Flat schema is much easier to work with downstream
        (importing into BigTable etc); 3. Performance (time to process, file
        size). If `?fields=` is not specified, default field set is returned.
        This default field set may change at any time. When `?fields=` is
        provided, each record is returned with the specified fields. `fields`
        must be specified as a comma separated list without any whitespaces, and
        all fields must exist. The order in which fields are specified does not
        matter, and the order of fields in the response is not specified.
      example: ClientIP,RayID,EdgeStartTimestamp
      type: string
      x-auditable: true
    logshare_fields_response:
      properties:
        key:
          example: value
          type: string
          x-auditable: true
      type: object
    logshare_identifier:
      description: Identifier
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
    logshare_logs_response_json_lines:
      anyOf:
        - type: string
        - type: object
      example: >-
        {"ClientIP":"192.0.2.1","RayID":"41ddf1740f67442d","EdgeStartTimestamp":1526810289280000000}

        {"ClientIP":"192.0.2.1","RayID":"41ddf1740f67442d","EdgeStartTimestamp":1526810289280000000}

        {"ClientIP":"192.0.2.1","RayID":"41ddf1740f67442d","EdgeStartTimestamp":1526810289280000000}
    logshare_ray_identifier:
      description: Ray identifier.
      example: 41ddf1740f67442d
      maxLength: 16
      readOnly: true
      type: string
      x-auditable: true
    logshare_sample:
      description: >-
        When `?sample=` is provided, a sample of matching records is returned.
        If `sample=0.1` then 10% of records will be returned. Sampling is
        random: repeated calls will not only return different records, but
        likely will also vary slightly in number of returned records. When
        `?count=` is also specified, `count` is applied to the number of
        returned records, not the sampled records. So, with `sample=0.05` and
        `count=7`, when there is a total of 100 records available, approximately
        five will be returned. When there are 1000 records, seven will be
        returned. When there are 10,000 records, seven will be returned.
      example: 0.1
      maximum: 1
      minimum: 0
      type: number
      x-auditable: true
    logshare_start:
      anyOf:
        - type: string
        - type: integer
      description: >-
        Sets the (inclusive) beginning of the requested time frame. This can be
        a unix timestamp (in seconds or nanoseconds), or an absolute timestamp
        that conforms to RFC 3339. At this point in time, it cannot exceed a
        time in the past greater than seven days.
      example: '2018-05-20T10:00:00Z'
      x-auditable: true
    logshare_timestamps:
      default: unixnano
      description: >-
        By default, timestamps in responses are returned as Unix nanosecond
        integers. The `?timestamps=` argument can be set to change the format in
        which response timestamps are returned. Possible values are: `unix`,
        `unixnano`, `rfc3339`. Note that `unix` and `unixnano` return timestamps
        as integers; `rfc3339` returns timestamps as strings.
      enum:
        - unix
        - unixnano
        - rfc3339
      example: unixnano
      type: string
      x-auditable: true

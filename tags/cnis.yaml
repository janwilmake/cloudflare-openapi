openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /accounts/{account_id}/cni/cnis:
    get:
      operationId: list_cnis
      parameters:
        - description: If specified, only show CNIs associated with the specified slot
          in: query
          name: slot
          schema:
            nullable: true
            type: string
        - description: If specified, only show cnis associated with the specified tunnel id
          in: query
          name: tunnel_id
          schema:
            nullable: true
            type: string
        - in: query
          name: cursor
          schema:
            format: int32
            nullable: true
            type: integer
        - in: query
          name: limit
          schema:
            minimum: 0
            nullable: true
            type: integer
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_CniList'
          description: List of matching CNI objects
        '400':
          description: Bad request
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: List existing CNI objects
      tags:
        - CNIs
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
    post:
      operationId: create_cni
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nsc_CniCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_Cni'
          description: CNI was successfully created
        '400':
          description: Bad request
        '409':
          description: Name Conflict
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Create a new CNI object
      tags:
        - CNIs
      x-api-token-group:
        - Magic WAN Write
        - Magic Transit Write
  /accounts/{account_id}/cni/cnis/{cni}:
    get:
      operationId: get_cni
      parameters:
        - description: CNI ID to retrieve information about
          in: path
          name: cni
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_Cni'
          description: CNI's associated data
        '400':
          description: Bad request
        '404':
          description: CNI not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Get information about a CNI object
      tags:
        - CNIs
      x-api-token-group:
        - Magic WAN Write
        - Magic WAN Read
        - Magic Transit Read
        - Magic Transit Write
    put:
      operationId: update_cni
      parameters:
        - description: CNI ID to retrieve information about
          in: path
          name: cni
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nsc_Cni'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nsc_Cni'
          description: CNI has been successfully modified
        '400':
          description: Bad request
        '404':
          description: CNI not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Modify stored information about a CNI object
      tags:
        - CNIs
      x-api-token-group:
        - Magic WAN Write
        - Magic Transit Write
    delete:
      operationId: delete_cni
      parameters:
        - description: CNI ID to retrieve information about
          in: path
          name: cni
          required: true
          schema:
            format: uuid
            type: string
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/nsc_AccountTag'
      responses:
        '200':
          description: CNI has been successfully deleted
        '400':
          description: Bad request
        '404':
          description: CNI not found
        '500':
          description: Internal server error
      security:
        - api_email: []
          api_key: []
          api_token: []
      summary: Delete a specified CNI object
      tags:
        - CNIs
      x-api-token-group:
        - Magic WAN Write
        - Magic Transit Write
components:
  schemas:
    nsc_AccountTag:
      description: Customer account tag
      type: string
    nsc_Cni:
      properties:
        account:
          $ref: '#/components/schemas/nsc_AccountTag'
        bgp:
          $ref: '#/components/schemas/nsc_BgpControl'
        cust_ip:
          description: |-
            Customer end of the point-to-point link

            This should always be inside the same prefix as `p2p_ip`.
          example: 192.168.3.4/31
          format: A.B.C.D/N
          type: string
        id:
          format: uuid
          type: string
        interconnect:
          description: Interconnect identifier hosting this CNI
          type: string
        magic:
          $ref: '#/components/schemas/nsc_MagicSettings'
        p2p_ip:
          description: Cloudflare end of the point-to-point link
          example: 192.168.3.4/31
          format: A.B.C.D/N
          type: string
      required:
        - id
        - interconnect
        - account
        - p2p_ip
        - cust_ip
        - magic
      type: object
    nsc_CniCreate:
      properties:
        account:
          $ref: '#/components/schemas/nsc_AccountTag'
        bgp:
          $ref: '#/components/schemas/nsc_BgpControl'
        interconnect:
          type: string
        magic:
          $ref: '#/components/schemas/nsc_MagicSettings'
      required:
        - interconnect
        - account
        - magic
      type: object
    nsc_CniList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/nsc_Cni'
          type: array
        next:
          format: int32
          nullable: true
          type: integer
      required:
        - items
      type: object

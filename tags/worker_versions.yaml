openapi: 3.0.3
info:
  description: >-
    Welcome to Cloudflare's API documentation site. We are experimenting with an
    updated version of our API documentation - check out
    [developers.cloudflare.com/api-next/](https://developers.cloudflare.com/api-next/)
    to test out the new experience.


    To get started using Cloudflare's products and services via the API, refer
    to [how to interact with
    Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/),
    which covers using tools like
    [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform)
    and the [official
    SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to
    maintain your Cloudflare resources.


    Using the Cloudflare API requires authentication so that Cloudflare knows
    who is making requests and what permissions you have. Create an API token to
    grant access to the API to perform actions. You can also authenticate with
    [API
    keys](https://developers.cloudflare.com/fundamentals/api/get-started/keys/),
    but these keys have [several
    limitations](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations)
    that make them less secure than API tokens. Whenever possible, use API
    tokens to interact with the Cloudflare API.


    To create an API token, from the Cloudflare dashboard, go to My Profile >
    API Tokens and select Create Token. For more information on how to create
    and troubleshoot API tokens, refer to

    our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).


    For information regarding rate limits, refer to our [API Rate
    Limits](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/platform/limits/#api-rate-limits).


    Totally new to Cloudflare? [Start
    here](https://developers.cloudflare.com/fundamentals/get-started/).
  license:
    name: BSD-3-Clause
    url: https://opensource.org/licenses/BSD-3-Clause
  title: Cloudflare API
  version: 4.0.0
servers:
  - description: Client API
    url: https://api.cloudflare.com/client/v4
paths:
  /accounts/{account_id}/workers/scripts/{script_name}/versions:
    get:
      description: >-
        List of Worker Versions. The first version in the list is the latest
        version.
      operationId: worker-versions-list-versions
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/workers_identifier'
        - in: path
          name: script_name
          required: true
          schema:
            $ref: '#/components/schemas/workers_schemas-script_name'
        - description: >-
            Only return versions that can be used in a deployment. Ignores
            pagination.
          in: query
          name: deployable
          schema:
            default: false
            type: boolean
        - description: Current page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Items per-page.
          in: query
          name: per_page
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workers_versions-list-response'
          description: List Versions response.
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/workers_versions-list-response'
                  - $ref: '#/components/schemas/workers_api-response-common-failure'
          description: List Versions response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: List Versions
      tags:
        - Worker Versions
      x-api-token-group:
        - Workers Tail Read
        - Workers Scripts Write
        - Workers Scripts Read
    post:
      description: >-
        Upload a Worker Version without deploying to Cloudflare's network. You
        can find more about the multipart metadata on our docs:
        https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.
      operationId: worker-versions-upload-version
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/workers_identifier'
        - in: path
          name: script_name
          required: true
          schema:
            $ref: '#/components/schemas/workers_schemas-script_name'
      requestBody:
        $ref: '#/components/requestBodies/workers_version-post'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workers_versions-upload-response'
          description: Upload Version response.
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/workers_versions-upload-response'
                  - $ref: '#/components/schemas/workers_api-response-common-failure'
          description: Upload Version response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Upload Version
      tags:
        - Worker Versions
      x-api-token-group:
        - Workers Scripts Write
  /accounts/{account_id}/workers/scripts/{script_name}/versions/{version_id}:
    get:
      operationId: worker-versions-get-version-detail
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            $ref: '#/components/schemas/workers_identifier'
        - in: path
          name: script_name
          required: true
          schema:
            $ref: '#/components/schemas/workers_schemas-script_name'
        - in: path
          name: version_id
          required: true
          schema:
            $ref: '#/components/schemas/workers_version_identifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workers_versions-single-response'
          description: Get Version Detail response.
        4XX:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/workers_versions-single-response'
                  - $ref: '#/components/schemas/workers_api-response-common-failure'
          description: Get Version Detail response failure.
      security:
        - api_token: []
        - api_email: []
          api_key: []
      summary: Get Version Detail
      tags:
        - Worker Versions
      x-api-token-group:
        - Workers Tail Read
        - Workers Scripts Write
        - Workers Scripts Read
components:
  schemas:
    workers_api-response-common-failure:
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/workers_messages'
          example:
            - code: 7003
              message: No route for the URI
          minLength: 1
        messages:
          allOf:
            - $ref: '#/components/schemas/workers_messages'
          example: []
        result:
          enum:
            - null
          nullable: true
          type: object
        success:
          description: Whether the API call was successful.
          enum:
            - false
          example: false
          type: boolean
      required:
        - success
        - errors
        - messages
        - result
      type: object
    workers_identifier:
      description: Identifier.
      example: 023e105f4ecef8ad9ca31a8372d0c353
      maxLength: 32
      type: string
      x-auditable: true
    workers_schemas-script_name:
      description: Name of the script.
      example: this-is_my_script-01
      pattern: ^[a-z0-9_][a-z0-9-_]*$
      type: string
    workers_version_identifier:
      example: bcf48806-b317-4351-9ee7-36e7d557d4de
      maxLength: 36
      readOnly: true
      type: string
    workers_versions-list-response:
      allOf:
        - $ref: '#/components/schemas/workers_api-response-common'
        - properties:
            result:
              properties:
                items:
                  items:
                    $ref: '#/components/schemas/workers_version-item-short'
                  type: array
              type: object
          required:
            - result
          type: object
    workers_versions-single-response:
      allOf:
        - $ref: '#/components/schemas/workers_api-response-common'
        - properties:
            result:
              $ref: '#/components/schemas/workers_version-item-full'
          required:
            - result
          type: object
    workers_versions-upload-response:
      allOf:
        - $ref: '#/components/schemas/workers_api-response-common'
        - properties:
            result:
              $ref: '#/components/schemas/workers_version-item-uploaded'
          required:
            - result
          type: object
  requestBodies:
    workers_version-post:
      content:
        multipart/form-data:
          encoding:
            files:
              contentType: >-
                application/javascript+module, text/javascript+module,
                application/javascript, text/javascript, `text/x-python`,
                text/x-python-requirement, application/wasm, text/plain,
                application/octet-stream, application/source-map
          schema:
            properties:
              files:
                description: >-
                  An array of modules (often JavaScript files) comprising a
                  Worker script. At least one module must be present and
                  referenced in the metadata as `main_module` or `body_part` by
                  filename.<br/>Possible Content-Type(s) are:
                  `application/javascript+module`, `text/javascript+module`,
                  `application/javascript`, `text/javascript`, `text/x-python`,
                  `text/x-python-requirement`, `application/wasm`, `text/plain`,
                  `application/octet-stream`, `application/source-map`.
                items:
                  format: binary
                  type: string
                type: array
                x-stainless-collection-type: set
              metadata:
                description: >-
                  JSON encoded metadata about the uploaded parts and Worker
                  configuration.
                properties:
                  annotations:
                    properties:
                      workers/message:
                        description: >-
                          Human-readable message about the version. Truncated to
                          100 bytes.
                        example: Fixed worker code.
                        maxLength: 100
                        type: string
                      workers/tag:
                        description: User-provided identifier for the version.
                        example: any-identifier-from-external-system
                        maxLength: 25
                        type: string
                    type: object
                  bindings:
                    $ref: '#/components/schemas/workers_bindings'
                  compatibility_date:
                    $ref: '#/components/schemas/workers_compatibility_date'
                  compatibility_flags:
                    $ref: '#/components/schemas/workers_compatibility_flags'
                  keep_bindings:
                    description: List of binding types to keep from previous_upload.
                    items:
                      type: string
                    type: array
                    x-stainless-collection-type: set
                  main_module:
                    description: >-
                      Name of the uploaded file that contains the main module
                      (e.g. the file exporting a `fetch` handler). Indicates a
                      `module syntax` Worker, which is required for Version
                      Upload.
                    example: worker.js
                    type: string
                  usage_model:
                    $ref: '#/components/schemas/workers_usage_model'
                required:
                  - main_module
                type: object
            required:
              - metadata
            type: object
      required: true
